<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴晓龙</title>
  <icon>https://www.gravatar.com/avatar/c3164500aaa6ba4b06d2c5617067c85e</icon>
  <subtitle>爱吃哈密瓜的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-19T00:25:17.659Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴晓龙</name>
    <email>635912159@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯</title>
    <link href="http://yoursite.com/2019/01/19/%E8%85%BE%E8%AE%AF/"/>
    <id>http://yoursite.com/2019/01/19/腾讯/</id>
    <published>2019-01-19T00:24:47.000Z</published>
    <updated>2019-01-19T00:25:17.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><p>标签（空格分隔）： 地图生产链</p><hr><p>1、拿你一个项目为例，说一下你用到的你觉得最牛的技术点是什么？说一下比较有技术含量的？spanablestring能显示代码吗？如果要支持复杂样式你要怎么做？有没有用到html标签？有了解过它的内部怎么实现吗？</p><p>2、自定义一个view注意哪些事项？ondraw为什么不能new很多对象，为什么new对象太多会卡动，gc一定会卡吗，ondraw里面for 循环new对象，出了栈就失效了，这些存在什么区域？回收在什么代？需要什么回收算法？viewgroup的ondraw绘制流程顺序？ondraw,draw这些方法的流程？viewgroup的ondraw一定会被调用吗？<br>3、说下handler的工作机制？messagequeue里面没有消息怎么处理？你听说过一个IDLEHandler吗，它是什么时候调用？<br>4、你说下retrofit用了哪些技术？如果一个接口方法有个泛型，怎么获取这个泛型的类型？睡一下java泛型机制？result泛型参数为User，编译完了函数的签名应该是什么样？我用的时候拿到的时候，retrofit怎么样把它反序列化出来？详细解释下java泛型的类型擦除是什么意思？用过dagger吗？Butterknife吗？ButterkNife的原理是什么？不用说太详细，说核心技术。你用butternife的时候，工程上会要求你怎么配？所以这个框架的核心技术你还是没有说出来？谁给view赋值的？要被注入的view有什么要求吗，有什么限制吗？为什么要用反射？谁访问权限？使用java反射怎么去访问一个静态方法？反射学了也其实不怎么了解是吧？<br>5、java的匿名内部类你了解吗？静态内部类跟非静态内部类有什么区别？<br>它的生命周期为什么跟activity不一样？匿名内部类属于静态还是非静态，它的构造方法的参数是谁来指定的，它的构造方法是你写出来的，还是你没写过，编译器生成这个构造方法，它的依据是什么？非静态内部类引用外部类，它是怎么引用的？编译成字节码是长什么样？怎么着做到这一点的？我在非静态的内部类，或匿名内部类，除了外部类.this，还有其他方法，这样就比较接近它的本质。<br>6、用过缓存吗？你设计一个lrucache。linkedhashmap会维护队列吗？linkedhashmap在初始化的时候有哪些参数要注意？put后谁来做这个排序工作？有没有看过哪些框架的lrucache的实现，哪些点考虑的比较好？哪些地方让你觉得它写的比较好？你有没有看过android的lrucache？它们是线程安全的吗？<br>你要实现你需要怎么做，需要加哪些操作？size需要加锁吗，有没有不加锁的方法?cocurenthashmap了解吗，你看过的是哪个版本，你看过1.7的吗？<br>linkedhashmap和hashmap的插入和查找的时间复杂度是怎么样的？hashmap源码，你看过jdk1.8对它的优化吗？<br>7、设计一个推送系统，从前端到后台需要关注哪些点？怎么样心跳合理？做一个推送，从业务上考虑，你关注的点有哪些？不同的手机表现不一样，为什么？有没有想过运营商搞的？<br>8、你自己有做过开源框架的吗？解决了什么问题？记录cpu和记录内存还需要两个线程吗，这样做是什么考虑，有没有想过为什么？<br>9、有没有做过插件化，热修复？哪种派系的demo？jar跟dex文件有什么区别？这种法案需要重启吗？有没有不需要重启的？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;腾讯&quot;&gt;&lt;a href=&quot;#腾讯&quot; class=&quot;headerlink&quot; title=&quot;腾讯&quot;&gt;&lt;/a&gt;腾讯&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 地图生产链&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1、拿你一个项目为例，说一下你用到的你觉得最牛的技术点是什么？说一下比较有技术含量的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <link href="http://yoursite.com/2019/01/16/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/01/16/寻找两个有序数组的中位数/</id>
    <published>2019-01-16T12:19:23.000Z</published>
    <updated>2019-01-16T12:32:24.611Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package interview;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 这道题让我们求两个有序数组的中位数，而且限制了时间复杂度为O(log (m+n))，</span><br><span class="line">* 看到这个时间复杂度，自然而然的想到了应该使用二分查找法来求解。</span><br><span class="line">* 但是这道题被定义为Hard也是有其原因的，难就难在要在两个未合并的有序数组之间使用二分法，</span><br><span class="line">* 如果这道题只有一个有序数组，让我们求中位数的话，估计就是个Easy题。</span><br><span class="line">* 那么我们可以将两个有序数组混合起来成为一个有序数组再做吗，图样图森破，</span><br><span class="line">* 这个时间复杂度限制的就是告诉你金坷垃别想啦。那么我们还是要用二分法，</span><br><span class="line">* 而且是在两个数组之间使用，感觉很高端啊。那么回顾一下中位数的定义，</span><br><span class="line">* 如果某个有序数组长度是奇数，那么其中位数就是最中间那个，如果是偶数，</span><br><span class="line">* 那么就是最中间两个数字的平均值。这里对于两个有序数组也是一样的，</span><br><span class="line">* 假设两个有序数组的长度分别为m和n，由于两个数组长度之和 m+n 的奇偶不确定，</span><br><span class="line">* 因此需要分情况来讨论，对于奇数的情况，直接找到最中间的数即可，</span><br><span class="line">* 偶数的话需要求最中间两个数的平均值。为了简化代码，不分情况讨论，</span><br><span class="line">* 我们使用一个小trick，我们分别找第 (m+n+1) / 2 个，和 (m+n+2) / 2 个，</span><br><span class="line">* 然后求其平均值即可，这对奇偶数均适用。加入 m+n 为奇数的话，</span><br><span class="line">* 那么其实 (m+n+1) / 2 和 (m+n+2) / 2 的值相等，相当于两个相同的数字相加再除以2，还是其本身。</span><br><span class="line"></span><br><span class="line">好，这里我们需要定义一个函数来在两个有序数组中找到第K个元素，</span><br><span class="line">下面重点来看如何实现找到第K个元素。首先，为了避免产生新的数组从而增加时间复杂度，</span><br><span class="line">我们使用两个变量i和j分别来标记数组nums1和nums2的起始位置。</span><br><span class="line">然后来处理一些corner cases，比如当某一个数组的起始位置大于等于其数组长度时，</span><br><span class="line">说明其所有数字均已经被淘汰了，相当于一个空数组了，那么实际上就变成了在另一个数组中找数字，</span><br><span class="line">直接就可以找出来了。还有就是如果K=1的话，那么我们只要比较nums1和nums2的起始位置i和j上的数字就可以了。</span><br><span class="line">难点就在于一般的情况怎么处理？因为我们需要在两个有序数组中找到第K个元素，为了加快搜索的速度，</span><br><span class="line">我们要使用二分法，那么对谁二分呢，数组么？其实要对K二分，</span><br><span class="line">意思是我们需要分别在nums1和nums2中查找第K/2个元素，</span><br><span class="line">注意这里由于两个数组的长度不定，所以有可能某个数组没有第K/2个数字，所以我们需要先check一下，</span><br><span class="line">数组中到底存不存在第K/2个数字，如果存在就取出来，否则就赋值上一个整型最大值。</span><br><span class="line">如果某个数组没有第K/2个数字，那么我们就淘汰另一个数字的前K/2个数字即可。</span><br><span class="line">有没有可能两个数组都不存在第K/2个数字呢，这道题里是不可能的，因为我们的K不是任意给的，</span><br><span class="line">而是给的m+n的中间值，所以必定至少会有一个数组是存在第K/2个数字的。最后就是二分法的核心啦，</span><br><span class="line">比较这两个数组的第K/2小的数字midVal1和midVal2的大小，如果第一个数组的第K/2个数字小的话，</span><br><span class="line">那么说明我们要找的数字肯定不在nums1中的前K/2个数字，所以我们可以将其淘汰，</span><br><span class="line">将nums1的起始位置向后移动K/2个，并且此时的K也自减去K/2，调用递归。</span><br><span class="line">反之，我们淘汰nums2中的前K/2个数字，并将nums2的起始位置向后移动K/2个，</span><br><span class="line">并且此时的K也自减去K/2，调用递归即可，参见代码如下：</span><br><span class="line">*/</span><br><span class="line">public class Test11 &#123;</span><br><span class="line">static int findkTh(int[] arr1, int i, int[] arr2, int j, int k) &#123;</span><br><span class="line">if (i &gt;= arr1.length) &#123;</span><br><span class="line">return arr2[j+k-1];</span><br><span class="line">&#125;</span><br><span class="line">if (j &gt;= arr2.length) &#123;</span><br><span class="line">return arr1[i+k-1];</span><br><span class="line">&#125;</span><br><span class="line">if (k == 1) &#123;</span><br><span class="line">return Math.min(arr1[i],arr2[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int mid1 = i+ k /2 -1 &lt; arr1.length ? arr1[i+ k /2 -1] : Integer.MAX_VALUE;</span><br><span class="line">int mid2 = j+ k /2 -1 &lt; arr2.length ? arr2[j+ k /2 -1] : Integer.MAX_VALUE;</span><br><span class="line">if (mid1 &lt; mid2) &#123;</span><br><span class="line">return findkTh(arr1,i+ k /2 ,arr2,j,k-k/2);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return findkTh(arr1,i,arr2,j+k/2,k-k/2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static double findMedian(int[] arr1,int[] arr2) &#123;</span><br><span class="line">int length1 = arr1.length;</span><br><span class="line">int length2 = arr2.length;</span><br><span class="line">int total = length1 + length2;</span><br><span class="line">int left = (total + 1) / 2 ;</span><br><span class="line">int right = (total + 2) / 2;</span><br><span class="line">int median1 = findkTh(arr1, 0, arr2, 0, left);</span><br><span class="line">int median2 = findkTh(arr1, 0, arr2, 0, right);</span><br><span class="line">System.out.println(left);</span><br><span class="line">System.out.println(right);</span><br><span class="line">System.out.println(median1);</span><br><span class="line">System.out.println(median2);</span><br><span class="line"></span><br><span class="line">return  (median1+ median2)/2.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] arr1 = &#123;1,3,5&#125;;</span><br><span class="line">int[] arr2 = &#123;2,4,7&#125;;</span><br><span class="line">//        int i = findkTh(arr1, 0, arr2, 0, 2);</span><br><span class="line">//        System.out.println(i);</span><br><span class="line">double median = findMedian(arr1, arr2);</span><br><span class="line">System.out.println(median);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搜狗</title>
    <link href="http://yoursite.com/2019/01/14/%E6%90%9C%E7%8B%97/"/>
    <id>http://yoursite.com/2019/01/14/搜狗/</id>
    <published>2019-01-14T07:06:27.000Z</published>
    <updated>2019-01-14T08:30:06.234Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>1、两 数 组 中 值<br>2、两数 组第k 个 值</p><p>1、分辨率适配，resurse下面的文件夹对应的分辨率。<br>正常1080<em>1920,density=3.0的话取哪个文件夹下的图片。xh文件夹下100</em>100取出来的图片是多大的。<br>2、handler实现原理，loop为什么不会anr。点击操作是通过什么通知到主线程，最终怎么让主线程invalidate。时间分发中每一次move都会发送handler消息吗？<br>3、数据化持久存储有哪几种方式？什么样的情况下使用sharedprefence？shreareprefence有什么优缺点吗？有anr这种吗？加入异步操作apply很多，这样会有什么影响？还有其他问题吗？数据库频繁读取的话和sharedprefence比那个效率高？<br>4、使用数据库的时候有没有遇上读写效率够不够高？<br>5、contentprovider的生命周期，onCreate的执行时机是什么？<br>6、intentservice的特点是什么？不停的starservice，这个队列会重新创建吗？<br>7、android现有的实现动画有哪几种方式？实际应用中有做过动画吗？<br>8、系统优化这有做过什么实际的事情吗？<br>9、有遇到oom的问题吗？<br>10、给一个字符串判断是不是一个合法的iPv4地址？<br>11、alarm唤醒有什么特点？延迟规则是什么？怎么统一封装alarmmanager的？pendingintent怎么判断是不是同一个？<br>12、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h3&gt;&lt;p&gt;1、两 数 组 中 值&lt;br&gt;2、两数 组第k 个 值&lt;/p&gt;
&lt;p&gt;1、分辨率适配，resurse下面的文件夹对应的分辨率。&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TopK</title>
    <link href="http://yoursite.com/2019/01/13/TopK/"/>
    <id>http://yoursite.com/2019/01/13/TopK/</id>
    <published>2019-01-13T04:14:26.000Z</published>
    <updated>2019-01-13T04:15:06.997Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package interview;</span><br><span class="line">/**</span><br><span class="line">* TopK</span><br><span class="line">* 求一维数组中最小的k 个数。</span><br><span class="line">*/</span><br><span class="line">public class Test05 &#123;</span><br><span class="line">static int partition(int[] arr, int start, int end) &#123;</span><br><span class="line">if (start &gt; end) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int index = start;</span><br><span class="line">swap(arr,index,end);</span><br><span class="line">for (int i = start; i &lt; end; i++) &#123;</span><br><span class="line">if (arr[i] &lt;= arr[end]) &#123;</span><br><span class="line">if (i != index) &#123;</span><br><span class="line">swap(arr,index,i);</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr,index,end);</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int[] topK(int[] arr, int k) &#123;</span><br><span class="line">int start = 0;</span><br><span class="line">int end = arr.length - 1;</span><br><span class="line">int index = partition(arr, start, end);</span><br><span class="line">while (index != k-1) &#123;</span><br><span class="line">if (index &lt; k-1) &#123;</span><br><span class="line">start = index + 1;</span><br><span class="line">index = partition(arr,start,end);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">end = index-1;</span><br><span class="line">index = partition(arr,start,end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int[] ints = new int[k];</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">ints[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">return ints;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void swap(int[] arr, int left, int right) &#123;</span><br><span class="line">int temp = arr[left];</span><br><span class="line">arr[left] = arr[right];</span><br><span class="line">arr[right] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] arr = &#123;6,9,23,65,1,93,4,67,32,5&#125;;</span><br><span class="line">int[] ints = topK(arr, 4);</span><br><span class="line">for (int i = 0; i &lt; ints.length; i++) &#123;</span><br><span class="line">System.out.print(ints[i] + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>蚂蚁金服</title>
    <link href="http://yoursite.com/2019/01/11/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D/"/>
    <id>http://yoursite.com/2019/01/11/蚂蚁金服/</id>
    <published>2019-01-11T10:58:11.000Z</published>
    <updated>2019-01-11T11:00:44.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h1><p>标签（空格分隔）： 未分类</p><hr><p>阿里一<br>1、有没有c++或者jni的经验？<br>2、解决oom，anr问题的经验？<br>3、测试流程。<br>4、自定义键盘。简单介绍下绘制流程<br>5、动态代理。热修复，简单说下实现方式。<br>6、涉及到加固这些吗。<br>7、有用到其他语言吗？<br>8、平常会去看android源码，<br>9、对新发布的8.0，9.0有了解吗？</p><p>1、说一个能代表技术能力的事情。<br>2、哪些地方你做了优化？<br>3、有没有能体现出自己技术能力的点？<br>4、分享长截图具体怎么做？<br>5、java中有哪些主要的数据结构？他们之间有什么关系。<br>arraylist和linkedlist之间的区别在哪里？hashmap。扩容<br>6、介绍一下java中的垃圾回收。<br>7、对java面向对象怎么理解的？有哪些设计思想，初衷是什么，有哪些特性。<br>设计或者开发的时候有什么原则。面向过程和面向对象写的时候有什么注意的。<br>8、android里的事件传递？<br>9、长轮询的通讯协议怎么写？包括哪些元素。通讯协议一般包含哪些元素，比如请求和返回。<br>10、两亿整数里面找出重复的整数。内存不足以存储这么多数据。</p><p>蚂蚁二<br>1、搜索里面做什么，做ui？有做离线的吗？<br>2、db有没有做优化，性能有没有挑战。<br>3、多度绘制怎么解决，中间用了什么东西吗？你觉得做overdraw的过程中你的思考是什么？还是针对问题本身。。我们为什么会产生？我们遇到问题不可怕，可怕的是每次遇上问题。遇到问题千千万，我们都会有解决方案。我们是研发工程师，而不是技工。你的思考是什么？你的成长是什么？你的进步是什么，你的总结是什么？<br>4、db，sqllite怎么用的？用sqllite就是因为sql语句长吗？跟用不用ormlite有什么关系。对sqllite本身作过优化吗，库的数量级有多大呀。在滑动的时候是db做的缓存吧。滑动会卡吗？你觉得分库好还是分表好？db在开启的时候模式？<br>5、除了android以外有没有前端的经验。<br>6、找出单向链表中倒数第k个节点。</p><p>蚂蚁三<br>1、项目分为几个模块？具体怎么做，怎么设计，考虑什么点。<br>2、项目中用过哪些设计模式？用到哪些？单例模式的价值是什么，解决什么问题？使用场景。<br>3、android p有哪些特性是比较重要的？<br>4、埋点日志采用什么样的技术栈，有什么提升空间没？文件系统可以吗，具体哪些地方不适合。<br>5、跳槽的原因</p><p>阿里四、<br>1、毕业几年技术上的拿得出来的东西，可以跟朋友吹牛逼的，可以讲一两个？<br>2、oom问题，如果再去做一次会怎么做？如果每天都要做一次，你会怎么做。<br>3、平时看源代码吗？怎么看源码的？如果有看不明白的会怎么办。<br>4、业界有名的经常看哪些人的博客？<br>5、在大图片加载的时候遇到的问题是什么?解决方案是什么？你自己会写吗？<br>6、你有没有想过做大前端？<br>7、你对数据结构这些熟悉吗？堆排序。时间复杂度和空间复杂度。最差的情况。怎么样去规避最差的情况，做什么样的升级<br>8、毕业四年跳槽比较多为什么？</p><p>阿里五<br>1、webrtc实现直播，讲下原理。音视频的连接是经过服务端还是直连。<br>h264,rtmp。延迟怎么解决？经过中转层的意义。媒体链路。音视频同步的逻辑是什么？有没有音视频不同步的问题？音频数据段和视频数据段不在一块，h264编码格式。对于播放，建联以后，缓存到一段时间后才能播放，缓存多久才能播放。mediaplayer的状态机，prepare是一个缓存，用户说播放不出来，怎么去定位，点击播放传递的参数是什么？<br>2、解决oom，anr，过度绘制问题。哪些情况会导致oom问题。有没有提炼一套方法或工具去杜绝这样的问题。什么情况下会造成anr。<br>3、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;蚂蚁金服&quot;&gt;&lt;a href=&quot;#蚂蚁金服&quot; class=&quot;headerlink&quot; title=&quot;蚂蚁金服&quot;&gt;&lt;/a&gt;蚂蚁金服&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 未分类&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;阿里一&lt;br&gt;1、有没有c++或者jni的经验？&lt;br&gt;2、解决oom，
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>百度</title>
    <link href="http://yoursite.com/2019/01/11/%E7%99%BE%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/01/11/百度/</id>
    <published>2019-01-11T07:59:53.000Z</published>
    <updated>2019-01-11T11:00:52.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><p>标签（空格分隔）： interview</p><hr><p>一面<br>1、语音识别是离线还是在线的？<br>2、机器学习算法了解吗？<br>3、用surfaceview能解决数据太多的问题吗？<br>4、自定义view，贴标签加音频怎么实现的？怎么放上去的？打两个对勾怎么去记录这个数据结构？hashmap里面的key和 value分别是什么？<br>5、asynctTask的原理.如果拼命往里面塞任务，超过128会怎么样？创建线程池需要哪些参数？最大线程池数和核心线程池数有什么区别？队列满了会怎么样？<br>6、Binder机制。aidl文件怎么在servise之间通信的。自定义的参数或者方法要怎么提供给Binder。怎么传递方法名。aidl在编译后形成的文件看过吗，那里面怎么处理这些方法的？<br>7、什么场景下会使用syncronized？<br>8、死锁是怎么产生的?<br>9、object的notify了解吗？notifyall<br>10、arraylist当成仓库，规定上限100个。需要两个方法，生产方法和消费方法，可以并发的生产和消费。手写生产者消费者模型.怎么样在notify的时候生产的时候唤醒消费线程，避免唤起生产线程。<br>11、有n个数，求前m大数。时间复杂度是多少？<br>12、青蛙跳tai’jie台阶方法。<br>13、二分法排序超找之类的。表达式</p><p>百度二<br>1、介绍项目，2-3个。有哪些是你做的？挑一个讲讲细节。<br>2、音视频数据怎么根白板数据同步的。<br>3、解决oom，anr。eventlog中通常有什么信息。event的时间可以对上吗？<br>4、滚动截屏<br>5、过度绘制有什么样的性能提升。<br>6、冷启动优化<br>7、电量优化<br>8、链表反转<br>9、滑动冲突，时间冲突。滑动距离的最小阈值。<br>10、git rebase 和merge，rebase具体做了什么操作<br>11、https做个简单介绍。和http对比。https证书怎么样做检验呢？<br>12、开源框架原理<br>13、Lrucache怎么实现。<br>14、linux上看某个进程打开哪些文件？某个pid， lsof<br>百度三<br>1、自我介绍，项目介绍，wps邮箱的用户群<br>2、三家公司换工作的原因<br>3、在图灵公司的成长。<br>4、对于邮件的传输协议，怎么样保证安全。<br>5、对于常见的网络传输加密，自己设计一套网络协议怎么做？<br>6、对称加密和非对称加密实现原理？非对称加密密钥怎么生成？为什么需要证书？证书有什么用？怎么判断一个证书是不是合法？<br>7、email客户端投入最多的是哪块？遇到什么问题，解决了什么难题？怎么优化搜索的性能<br>8、解决oom，anr问题用了哪些手段呢？或者哪些工具或者独特的方法？<br>9、自己对自己未来发展的预期，对团队的期待？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;百度&quot;&gt;&lt;a href=&quot;#百度&quot; class=&quot;headerlink&quot; title=&quot;百度&quot;&gt;&lt;/a&gt;百度&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： interview&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一面&lt;br&gt;1、语音识别是离线还是在线的？&lt;br&gt;2、机器学习算法了解吗？&lt;
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>美团</title>
    <link href="http://yoursite.com/2019/01/11/%E7%BE%8E%E5%9B%A2/"/>
    <id>http://yoursite.com/2019/01/11/美团/</id>
    <published>2019-01-11T05:20:11.000Z</published>
    <updated>2019-01-11T11:01:00.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><p>标签（空格分隔）： interview</p><hr><p>1、图灵机器人是智能玩具是吧？<br>2、在金山怎么做小米邮箱？是企业邮箱是吧<br>3、又看邮箱下面的协议吗？如果对邮箱协议进行分类的话你会分为哪几类，为什么？有没有其他维度去分类？有哪些维度比较重要？（存储）<br>pop3有哪些东西跟其他有哪些明显的区别？有些是存在服务端，有些同步服务端就没有数据了？<br>4、做过长轮训？有没有看过具体实现？为什么叫长轮训，长在什么地方？一个普通请求不停的发请求会变成长轮训么？keepAlive.长轮训一般请求耗时是多少？<br>5、分拣搬运是什么？<br>6、棋盘中一点有没有被围死。用什么代表棋子，用什么存储，数组有什么问题？boolean有没有别的什么问题？<br>7、collection和set有什么区别，概念上有什么区别？set可以直接操作吗，不是接口吗？<br>8、android为什么搞自己的集合，比如sparsearray等。主要是优化什么，查询速度吗？如果然你写二分查找需要多少行代码？二分查找用递归好还是循环好？空间复杂度除了直接看到的还有其他的什么吗？<br>9、http协议了解吗？如果想往http中加入自己的统计信息，通过header。还有什么问题吗?https。中文怎么传？不转码会怎么样，为什么会乱码？<br>10、对restful了解吗，能用一句话概括restful的核心思想？它跟普通soa有什么区别？<br>11、你了解http的一些发展历程吗？1.1,1.2之类的。<br>12、对将来的个人发展有什么计划？<br>13、你以前在搞机器人，现在还有兴趣继续玩下去吗？你们用的步进电机还是？用c语言烧进去吧？<br>14、还有什么想问我的吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;美团&quot;&gt;&lt;a href=&quot;#美团&quot; class=&quot;headerlink&quot; title=&quot;美团&quot;&gt;&lt;/a&gt;美团&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： interview&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1、图灵机器人是智能玩具是吧？&lt;br&gt;2、在金山怎么做小米邮箱？是企业邮箱是
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>滴滴</title>
    <link href="http://yoursite.com/2019/01/11/%E6%BB%B4%E6%BB%B4/"/>
    <id>http://yoursite.com/2019/01/11/滴滴/</id>
    <published>2019-01-11T03:12:26.000Z</published>
    <updated>2019-01-11T11:01:11.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滴滴"><a href="#滴滴" class="headerlink" title="滴滴"></a>滴滴</h1><p>标签（空格分隔）： interview</p><hr><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>1、四中引用的区别：强引用、软引用、弱引用、虚引用<br>2、String、StringBuffer与StringBuilder之间区别<br>3、String a = “AB”, String b = “A” + “B”,Sting c = new String(“AB”)<br>这三个是否相等，为什么？<br>4、java中的线程池，核心参数，怎么处理的<br>5、AsyncTask是线程池吗？大概流程，线程池怎么创建的，核心参数怎么定的,线程怎么切换的，rannable和callable的区别。<br>6、多线程同步，volatile。单例为什么要保证volatile？和syncronized有什么区别？java虚拟机中多线程怎么对变量进行读取的？<br>7、thradlocal的原理，key是什么？<br>8、hashmap的数据结构？树是什么树？hashmap在多线程有什么问题？<br>9、lrucache？linkedHashmap？<br>10、sparseArray？查找怎么查找？复杂度？hashmap不考虑hash冲突时间复杂度是多少？<br>11、迭代器遍历和for循环遍历有什么区别？</p><h3 id="android"><a href="#android" class="headerlink" title="android"></a>android</h3><p>1、okhttp原理，call对象是什么？realcall是普通类？有几个拦截器，都有哪些？okio原理？怎么处理缓存，缓存机制，怎么判断缓存过期?<br>线程池？<br>2、retrofit？核心思想是什么？<br>3、rxjava<br>4、intentservice，handlerthread跟普通thread有什么区别？<br>5、handler中post(rannable)和sendmessage有什么区别？looper从哪里取rannable？looper取消息是死循环吗？looper为什么不会阻塞用户操作，界面渲染，卡死主线程？handler在子线程创建有什么问题？主线程为什么不用创建？<br>6、oom都有哪些场景？讲一下内存泄漏？怎么解决内存泄漏？leakcanary怎么检测到内存泄漏的？<br>7、如何定义一个对象可以被回收？有哪些可以作为gcroot的节点？<br>8、jvm回收的算法？新生代假如内存没满不配置，一定是15次吗？都有哪些算法（标记整理，复制，标记清除）？major gc和full gc有什么区别？<br>9、android中自定义view的核心方法？canvas和paint分别是干嘛的？<br>10、onmeasure中有哪些测量模式？<br>11、android性能优化分别做了哪些？过度渲染怎么判断？怎么避免？<br>12、recylerview滑动到item，怎么保证滑动到的时候手松开，保证显示的是完整的item？<br>13、git rebase 和merge区别？<br>14、http三次握手，为什么需要三次？四次挥手，为什么需要四次？<br>15、http常见的header有哪些？charles<br>16、什么是AOP？</p><h3 id="滴滴二面"><a href="#滴滴二面" class="headerlink" title="滴滴二面"></a>滴滴二面</h3><p>1、做android开发多久了？做过日志系统，怎么做的？<br>2、你清楚android事件传递流程吗？<br>3、blockcanary怎么做的？有现成的为什么还要自己再封装一个？looper和handler的关系？handlermessage有一部分是c实现的，native代码做什么用的，功能是什么，作用是什么？<br>4、解决过重构中的难题？是什么样的难题？<br>5、app启动的时候数据比较多的时候会比较慢，怎么解决这个问题的？（数据库比较大的时候，怎么解决启动速度），通常优化查询速度怎么做的？（一次读入大量数据，查询性能怎么做的），能用int不用string原理是什么？groupby会用吗？like，搜索词做不做预处理？做一次查询最长的是多长？没有对sqllite做过优化吗？当sql数据变得越来越多的时候怎么处理？几个db？拆表的目的是什么？拆数据库的目的是什么？数据库大了后启动速度变慢怎么解决？<br>6、从ui上怎么做启动优化的？两个activity之间跳转的时间节省多少？viewstub？<br>7、intentServise？了解跨进程吗？aidl原理？Binder原理？Binder的优点是什么？socekt为什么需要两次？<br>8、我如何画一条虚线？paint设置什么属性？还有别的实现方式吗？shape了解过吗？<br>9、怎么写一个自定义view？并且把view的属性暴露给xml用？怎么定义一个自定义view的主题（theme）？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;滴滴&quot;&gt;&lt;a href=&quot;#滴滴&quot; class=&quot;headerlink&quot; title=&quot;滴滴&quot;&gt;&lt;/a&gt;滴滴&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： interview&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;head
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>两数之和3</title>
    <link href="http://yoursite.com/2019/01/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C3/"/>
    <id>http://yoursite.com/2019/01/09/两数之和3/</id>
    <published>2019-01-09T01:19:30.000Z</published>
    <updated>2019-01-09T01:19:54.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组三：两数之和"><a href="#数组三：两数之和" class="headerlink" title="数组三：两数之和"></a>数组三：两数之和</h1><p>标签（空格分隔）： 数据结构</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package array;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 两数之和丨丨丨</span><br><span class="line">* 设计一个类.包含如下两个成员函数：</span><br><span class="line">* Save(int input)</span><br><span class="line">* 插入一个整数到一个整数集合里。</span><br><span class="line">* Test(int target)</span><br><span class="line">* 检验是否存在两个数和为输入值。如果存在这两个数. 则返回 true; 否则返回 false。</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">public class TwoSum &#123;</span><br><span class="line">static HashMap&lt;Integer,Integer&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">public static void save(int input) &#123;</span><br><span class="line">Integer integer = hashMap.get(input);</span><br><span class="line">if (integer != null) &#123;</span><br><span class="line">hashMap.put(input,integer++);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">hashMap.put(input,1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean test(int target) &#123;</span><br><span class="line">Iterator&lt;Integer&gt; iterator = hashMap.keySet().iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Integer next = iterator.next();</span><br><span class="line">if (hashMap.containsKey(target - next) ) &#123;</span><br><span class="line">//需要判断是否有这种特殊情况</span><br><span class="line">boolean isDouble = target == next * 2;</span><br><span class="line">//排除同一个数是要找的和的一半，并且只有一个，如果这个数存储了两个那也是满足情况的</span><br><span class="line">if (!(isDouble &amp;&amp; hashMap.get(next) == 1)) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组三：两数之和&quot;&gt;&lt;a href=&quot;#数组三：两数之和&quot; class=&quot;headerlink&quot; title=&quot;数组三：两数之和&quot;&gt;&lt;/a&gt;数组三：两数之和&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 数据结构&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两数之和2</title>
    <link href="http://yoursite.com/2019/01/08/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C2/"/>
    <id>http://yoursite.com/2019/01/08/两数之和2/</id>
    <published>2019-01-08T02:12:14.000Z</published>
    <updated>2019-01-08T02:13:13.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组二：两数之和"><a href="#数组二：两数之和" class="headerlink" title="数组二：两数之和"></a>数组二：两数之和</h1><p>标签（空格分隔）： 数据结构</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package array;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 两数 之 和 II</span><br><span class="line">*</span><br><span class="line">* 给定一个整型的数组. 找出其中的两个数使其和为某个指定的值，</span><br><span class="line">* 并返 回这两个数的下标（数组下标是从〇开始)。假设数组元素的值各不相同.</span><br><span class="line">* 则要求时间复杂度为〇(n). n 为数组的长度。</span><br><span class="line">*/</span><br><span class="line">public class Test02 &#123;</span><br><span class="line">public static int[] twoSum(int[] arr, int target) &#123;</span><br><span class="line">int[] res = &#123;-1,-1&#125;;</span><br><span class="line">if (arr == null || arr.length &lt; 2) &#123;</span><br><span class="line">return  res;</span><br><span class="line">&#125;</span><br><span class="line">HashMap&lt;Integer, Integer&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">//扫描一遍，存储值与下标</span><br><span class="line">hashMap.put(arr[i],i);</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">//不能出现同一个数的两倍是target</span><br><span class="line">if (hashMap.containsKey(target - arr[i]) &amp;&amp; target != 2 * arr[i]) &#123;</span><br><span class="line">//获取结果的两个下标</span><br><span class="line">res[0] = arr[i];</span><br><span class="line">res[1] = hashMap.get(target - arr[i]);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组二：两数之和&quot;&gt;&lt;a href=&quot;#数组二：两数之和&quot; class=&quot;headerlink&quot; title=&quot;数组二：两数之和&quot;&gt;&lt;/a&gt;数组二：两数之和&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 数据结构&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://yoursite.com/2019/01/08/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/08/两数之和/</id>
    <published>2019-01-08T01:09:34.000Z</published>
    <updated>2019-01-08T01:11:45.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组一：两数之和"><a href="#数组一：两数之和" class="headerlink" title="数组一：两数之和"></a>数组一：两数之和</h1><p>标签（空格分隔）： 数据结构</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package array;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 面 试 题 1 : 两数之和</span><br><span class="line"> *</span><br><span class="line"> * 给定一个整型数组，是否能找出其中的两个数使其和为某个指定的值?</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * 举例</span><br><span class="line"> * 输入数组为&#123;1，5, 7, 3&#125;以及指定的目标值为10,我们可以从中找出两个数3 和 7, 和 为 10。</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * 通过排序让复杂度降至O(n*logn)</span><br><span class="line"> */</span><br><span class="line">public class Test01 &#123;</span><br><span class="line"></span><br><span class="line">    public static boolean hasSum(int[] arr, int target) &#123;</span><br><span class="line">        boolean res = false;</span><br><span class="line">        //参数校验</span><br><span class="line">        if (arr == null || arr.length &lt; 2) &#123;</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">        //对数组排序</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = arr.length -1;</span><br><span class="line">        while (left != right) &#123;</span><br><span class="line">           int sum =  arr[left] + arr[right];</span><br><span class="line">           if (sum &gt; target) &#123; //目标值过小，向前移动尾部指针，减小两数之和</span><br><span class="line">               right --;</span><br><span class="line">           &#125; else if (sum &lt; target) &#123;//目标值过大，向后移动头部指针，增加两数之和</span><br><span class="line">               left ++;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               res = true;</span><br><span class="line">               break;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组一：两数之和&quot;&gt;&lt;a href=&quot;#数组一：两数之和&quot; class=&quot;headerlink&quot; title=&quot;数组一：两数之和&quot;&gt;&lt;/a&gt;数组一：两数之和&lt;/h1&gt;&lt;p&gt;标签（空格分隔）： 数据结构&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习心得</title>
    <link href="http://yoursite.com/2018/07/24/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2018/07/24/学习心得/</id>
    <published>2018-07-24T08:22:47.000Z</published>
    <updated>2018-09-23T05:47:40.905Z</updated>
    
    <content type="html"><![CDATA[<p>#以前觉得看视频学得快，其实真正获取知识还是要自己去思考</p><p>标签（空格分隔）： 系统的静下心来学习</p><hr><p>系统的学习；<br>不沉迷于打广告挣外快；<br>有计划的学习；<br>锻炼抗压能力。<br>更有效的学习。<br>不跟随别人脚步，按照自己心意来；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#以前觉得看视频学得快，其实真正获取知识还是要自己去思考&lt;/p&gt;
&lt;p&gt;标签（空格分隔）： 系统的静下心来学习&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;系统的学习；&lt;br&gt;不沉迷于打广告挣外快；&lt;br&gt;有计划的学习；&lt;br&gt;锻炼抗压能力。&lt;br&gt;更有效的学习。&lt;br&gt;不跟随别人脚步，按照自
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 应用工程师的 Binder 原理剖析</title>
    <link href="http://yoursite.com/2018/05/08/Android-%E5%BA%94%E7%94%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84-Binder-%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2018/05/08/Android-应用工程师的-Binder-原理剖析/</id>
    <published>2018-05-08T12:33:02.000Z</published>
    <updated>2018-05-09T03:06:12.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-应用工程师的-Binder-原理剖析"><a href="#Android-应用工程师的-Binder-原理剖析" class="headerlink" title="Android 应用工程师的 Binder 原理剖析"></a>Android 应用工程师的 Binder 原理剖析</h1><p>标签（空格分隔）： Binder</p><hr><p>##一、Binder概述</p><h3 id="Binder是一种进程间通信机制，基于开源的OpenBinder实现（http-www-angryredplanet-com-hackbod-openbinder-docs-html-）"><a href="#Binder是一种进程间通信机制，基于开源的OpenBinder实现（http-www-angryredplanet-com-hackbod-openbinder-docs-html-）" class="headerlink" title="Binder是一种进程间通信机制，基于开源的OpenBinder实现（http://www.angryredplanet.com/~hackbod/openbinder/docs/html/）"></a>Binder是一种进程间通信机制，基于开源的OpenBinder实现（<a href="http://www.angryredplanet.com/~hackbod/openbinder/docs/html/）" target="_blank" rel="noopener">http://www.angryredplanet.com/~hackbod/openbinder/docs/html/）</a></h3><h3 id="1、为什么必须理解Binder？"><a href="#1、为什么必须理解Binder？" class="headerlink" title="1、为什么必须理解Binder？"></a>1、为什么必须理解Binder？</h3><ol><li>为什么Activity间传递对象需要序列化？</li><li>Activity的启动流程是什么样？</li><li>四大组件底层的通信机制是怎么样的？</li><li>AIDL内部的实现原理是什么？</li><li>插件化编程技术应该从何学起？</li><li>…</li></ol><h4 id="要弄清楚上面一系列问题，就必须先理解Binder通信机制。"><a href="#要弄清楚上面一系列问题，就必须先理解Binder通信机制。" class="headerlink" title="要弄清楚上面一系列问题，就必须先理解Binder通信机制。"></a>要弄清楚上面一系列问题，就必须先理解Binder通信机制。</h4><h4 id="Activity、Service、Broadcast-Receiver、Content-Provider四大组件有时运行在不同进程，进程间通信依赖于Binder-IPC机制。"><a href="#Activity、Service、Broadcast-Receiver、Content-Provider四大组件有时运行在不同进程，进程间通信依赖于Binder-IPC机制。" class="headerlink" title="Activity、Service、Broadcast Receiver、Content Provider四大组件有时运行在不同进程，进程间通信依赖于Binder IPC机制。"></a>Activity、Service、Broadcast Receiver、Content Provider四大组件有时运行在不同进程，进程间通信依赖于Binder IPC机制。</h4><h4 id="Android系统对应用层提供的各种服务：-ActivityManagerService、PackageManagerService等都是基于Binder-IPC机制实现。"><a href="#Android系统对应用层提供的各种服务：-ActivityManagerService、PackageManagerService等都是基于Binder-IPC机制实现。" class="headerlink" title="Android系统对应用层提供的各种服务： ActivityManagerService、PackageManagerService等都是基于Binder IPC机制实现。"></a>Android系统对应用层提供的各种服务： ActivityManagerService、PackageManagerService等都是基于Binder IPC机制实现。</h4><h3 id="2、Android系统为什么用Binder？"><a href="#2、Android系统为什么用Binder？" class="headerlink" title="2、Android系统为什么用Binder？"></a>2、Android系统为什么用Binder？</h3><p>####Android系统基于Linux内核，Linux已经提供了管道、消息队列、共享内存和Socket等IPC机制。为什么Android还要提供Binder来实现IPC? </p><p>详细请参考知乎：<br><a href="https://www.zhihu.com/question/39440766?sort=created" target="_blank" rel="noopener">为什么Android要采用Binder作为IPC机制?</a><br><a href="https://www.cnblogs.com/bastard/archive/2012/10/17/2728155.html" target="_blank" rel="noopener">Android为什么选择binder</a></p><h4 id="对比Linux进程间IPC方式："><a href="#对比Linux进程间IPC方式：" class="headerlink" title="对比Linux进程间IPC方式："></a>对比Linux进程间IPC方式：</h4><ol><li>管道：在创建时分配一个page大小的内存，缓存区大小比较有限；</li><li>消息队列：信息复制两次，额外的CPU消耗；不适合频繁或信息量大的通信；</li><li>共享内存：无需复制，共享缓冲区直接附加到进程虚拟地址空间，速度快；但进程间的同步问题操作系统无法实现，必须各进程利用同步工具解决；</li><li>套接字：作为更通用的接口，传输效率低，主要用于不同机器或跨网络的通信；</li><li>信号量：常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>信号：不适用于信息交换，更适用于进程中断控制，比如非法内存访问，杀死某个进程等；</li></ol><h4 id="主要是："><a href="#主要是：" class="headerlink" title="主要是："></a>主要是：</h4><ul><li>性能：数据拷贝次数：Binder数据拷贝只需要一次，而管道、消息队列、Socket都需要两次，但共享内存方式一次内存拷贝都不需要；从性能角度看，Binder性能仅次于共享内存。</li><li>稳定性：Binder是基于C/S架构的(客户端Client和服务端Server组成架构，Client端有什么需求，直接发送给Server端去完成，架构清晰明朗，Server端与Clent端相对独立，稳定性较好)；而共享内存实现方式复杂，没有客户与服务端之别，需要充分考虑到访问临界资源的并发同步问题，否则可能会出现死锁等问题；从稳定性角度看，Binder架构优越于共享内存。</li><li>安全性：传统Linux IPC的接收方无法获得对方进程可靠的UID/PID,从而无法鉴别对方身份；而Android作为一个开放的开源体系，拥有非常多的开发平台，App开源甚广，因此手机的安全显得额外重要；对于普通用户，绝不希望从App商店下载偷窥隐私数据、后台造成手机耗电等等问题，传统的Linux IPC无任何保护措施，完全由上层协议来确保。Android为每个按照你黄浩的APp分配了自己的UID，故而进程的UID是鉴别金恒身份的重要标志。传统的IPC只能由用户在数据包中填入UID/PID，但这样不可靠，容易被恶意程序利用。可靠的身份标识只有由IPC机制在内核在内核中添加。其次传统的IPC访问接入点是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。同时Binder既支持实名Binder，又支持匿名Binder，安全性高。</li></ul><p>##二、Linux下传统的进程间通信原理</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/linux_ipc_1.png" alt="Linux背景知识"></p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/linux_ipc_2.png" alt="传统IPC通信原理"></p><ul><li>进程隔离 </li></ul><p>进程与进程间内存是不共享的。两个进程就像两个平行的世界，A进程没法直接访问B进程的数据，A进程和B进程之间要进行数据交互就得采用特殊的通信机制：进程间通信（IPC）。</p><ul><li>进程空间划分</li></ul><p>操作系统给的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也可以访问底层硬件设备。为了保护用户进程不能直接操作内核，保证内核的安全，操作系统刚从落机上将虚拟空间划分为用户空间（User Space）和内核空间（Kernel Space）。简单说，内核空间（Kernel）是系统内核运行的空间，用户空间（User Space）是用户程序运行的空间。为了保证安全性，他们之间是隔离的。</p><ul><li>系统调用</li></ul><p>虽然从逻辑上进行了用户空间和内核空间的划分，但不可避免的用户空间需要访问内核资源，比如文件操作，网络访问等。为了突破隔离限制，就需要借助系统调用来实现。系统调用是用户空间访问内核空间的唯一方式，保证了所有的资源访问都是在内核的控制下进行，避免用户程序对系统资源的越权访问，提升系统安全性和稳定性。</p><p>系统调用主要通过如下两个函数实现：<br>copy_from_user()//将数据从用户空间拷贝到内核空间<br>copy_to_user()//将数据从内核空间拷贝到用户空间</p><p>通常的做法是消息发送方将要发送的数据存放在内存缓存区中，通过系统调用进入内核态。然后内核程序在内核空间分配内存，开辟一块内核缓存区，调用copy_from_user()函数将数据从用户空间的内存缓存区拷贝到内和空间的内存缓存区中。同样的，接收方进程在接收数据时在自己的用户空间开辟一块内存缓存区，然后内核程序调用copy_to_user()函数将数据从内核缓存区起拷贝到接收进程的内存缓存区。这样数据发送方进程和数据接收方进程就完成了一次数据传输，我们称完成了一次进程间通信。</p><p>####传统的IPC通信方式有两个问题：<br>1、性能低下,一次数据传递需要经历：内存缓存区–&gt;内存缓存区–&gt;内存缓存区，需要2次数据拷贝；<br>2、接收数据的缓存区由数据接收进程提供，但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能打的内存空间或者先调用API接收消息来获取消息体的大小，这两种做法不是浪费空间就是浪费时间。</p><p>##三、Binder跨进程通信原理<br><a href="https://blog.csdn.net/boyupeng/article/details/47011383" target="_blank" rel="noopener">Android Binder机制原理（史上最强理解，没有之一）</a></p><ol><li>动态内核可加载模块 &amp;&amp; 内存映射</li></ol><p>Binder并不是Linux的内核，得益于Linux的动态内核可加载模块（Loadable Kernel Module,LKM）机制；模块是具有独立功能的程序，它可以被单独编译，但是不能独立运行。它在运行时被连接到内核作为内核的一部分运行。这样，Android系统就可以通过动态添加一个内核模块运行在内核空间，用户进程之间通过这个内核模块作为桥梁来实现通信。</p><p>在Android系统中，这个运行在内核空间，负责各个用户进程通过Binder实现通信的内核模块就叫Binde驱动（Binder Driver）。</p><p>内存映射：Binder IPC机制中涉及到的内存映射通过mmap（）实现，mmap（）是操作系统中的一种内存映射的方法。内存映射简单的将就是讲用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</p><p>内存映射能减少数据拷贝次数，实现用户空间和内和空间的高效互动。两个空间各自的修改能直接反映在映射的内存区域，从而被对方空间及时感知。也正因为如此，内存映射能够提供对进程间通信的支持。</p><ol><li>Binder IPC实现原理</li></ol><p>Binder IPC正是基于内存映射（mmpc）来实现的，但是mmap（）通常是在有物理截止的文件系统上的。<br>比如进程中的用户区域是不能直接和物理设备打交道的，如果想把磁盘上的数据读取到进程的用户区域，需要两次拷贝（磁盘–&gt;内核空间–&gt;用户空间）；通常在这种场景下mmap（）就能发挥作用，通过在物理介质和用户空间之间建立映射，减少数据的拷贝次数，用内存读写取代I/O读写，提价文件读取效率。</p><p>而Binder并不存在物理介质，因此Binder驱动使用mmap（）并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p><h4 id="一次完整的Binder-IPC-通信过程通常是这样："><a href="#一次完整的Binder-IPC-通信过程通常是这样：" class="headerlink" title="一次完整的Binder IPC 通信过程通常是这样："></a>一次完整的Binder IPC 通信过程通常是这样：</h4><ol><li>首先Binder驱动在内核空间创建一个数据接收缓存区；</li><li>接着在内核空间开辟一块内核缓存区，建立内核缓存区和内核中数据接收缓存区之间的映射关系，以及内核中数据接收缓存区和接收进程用户空间地址的映射关系。</li><li>发送方进程通过系统调用copy_from_user()将数据copy到内核中的内核缓存区，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。</li></ol><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_1.png" alt="Binder IPC原理"></p><p>##四、Binder通信模型</p><p>一次完整的进程间通信必然至少包含两个进程，通常我们称通信的双方分别为客户端进程（Client）和服务端进程（Server），由于进程隔离机制的存在，通信双方必然需要借助Binder来实现。</p><h3 id="Clent-Server-ServerManager-驱动"><a href="#Clent-Server-ServerManager-驱动" class="headerlink" title="Clent/Server/ServerManager/驱动"></a>Clent/Server/ServerManager/驱动</h3><p>Binder由Clent，Server、ServerManager、Binder驱动一系列组件组成。其中Clent、Server、ServerManager运行在用户空间，Binder驱动运行在内核空间。其中ServerManager和Binder驱动由系统提供，而Clent、Server由应用程序来实现。Clent、Server和ServerManager均是通过系统调用open、mmap和ioctl来访问设备文件/dev/binder，从而实现与Binder驱动的交互来间接的实现跨进程通信。</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_2.png" alt="通信模型"></p><h3 id="Binder通信过程"><a href="#Binder通信过程" class="headerlink" title="Binder通信过程"></a>Binder通信过程</h3><ol><li>首先，一个进程使用BINDER_SET_CONTEXT_MGR命令通过Binder驱动将自己注册成为ServiceManager；</li><li>Server通过驱动向ServiceManager中注册Binder（Server中的Binder实体）驱动为这个Binder创建位于内核中的实体节点以及ServiceManager对实体的引用，将名字以及新建的引用打包传给ServiceManager，ServiceManager将其填入查找表。</li><li>Clent通过名字，在Binder驱动的帮助下从ServiceManager中获取到对Binder实体的引用，通过这个引用就能实现和Server进程的通信。</li></ol><p>整个通信过程都需要Binder驱动的接入，</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_4.png" alt="Binder通信模型"></p><h3 id="Binder通信中的代理模式"><a href="#Binder通信中的代理模式" class="headerlink" title="Binder通信中的代理模式"></a>Binder通信中的代理模式</h3><p>A进程想要B进程中某个对象如何实现？</p><p>数据流经Binder驱动的时候驱动会对数据做一层转换。当A进程想要获取B进程中的object时，驱动并不会真的把object返回给A，而是返回一个跟object一抹一眼的代理对象objectProxy，这个objectProxy具有和object一模一样的方法，但是这些方法并没有B进程找那个object对象那些方法的能力，这些方法只需要把请求参数交给驱动即可。</p><p>当驱动接收到A进程的消息后，发现这个objectProxy就去查询自己维护的表单，一查发现这是B进程object的代理对象。于是就会通知B进程调用object的方法，并要求B进程把结果发给自己。的那个驱动霸道B进程的返回结果后就会转发给A进程，一次通信及完成了。</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_5.png" alt=""></p><h3 id="Binder的完整定义"><a href="#Binder的完整定义" class="headerlink" title="Binder的完整定义"></a>Binder的完整定义</h3><ul><li>从进程间通信的角度看，Binder是一种进程间通信的机制；</li><li>从Server进程角度看，Binder指的是Server中的Binder实体对象；</li><li>从Clent进程的角度看，Binder指的是对Binder代理对象，是Binder实体对象的一个远程代理。</li><li>从传输过程的角度看，Binder是一个可以跨进程传输的对象；Binder驱动会对这个跨越进程的对象做一点点特殊处理，自动完成代理对象和本地对象之间的转换。</li></ul><h2 id="五、手动编码实现跨进程调用"><a href="#五、手动编码实现跨进程调用" class="headerlink" title="五、手动编码实现跨进程调用"></a>五、手动编码实现跨进程调用</h2><ul><li>IBinder：IBinder是一个接口，代表了一种跨进程的能力。只要实现了这个接口，这个对象就能跨进程传输。</li><li>IInterface: IInterface代表的是Server进程对象具备什么能力</li><li>Binder：java层的Binder类，代表队额其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder，因而都具有跨进程传输的能力；实际上，在跨进程的视乎，Binder驱动会自动完成这两个对象的转换。</li><li>Stub：<br>AIDL的时候，编译工具会给我们生成一个名为Stub的静态内部类，这个类继承了Binder，说明它是一个Binder本地对象，它实现了Interface接口，表明它具有Server承诺给Client的能力；Stub是一个抽象类，具体的IIterface的相关实现需要开发者自己实现。</li></ul><p>##五、总结</p><ul><li>Binder使用了面向对象的思想来描述作为访问接入点的Binder及其在Client中的入口。Binder是一个实体位于Server中的对象，该对象提供了一套方法用以实现对服务的请求，如同类的成员函数。面向对象思想的引入将进程间通信转化为通过对某个Binder对象的引用调用该对象的方法，而其独特之处在于Binder对象是一个可以跨进程引用的对象，他的实体位于一个进程中，而它的引用却遍布于系统给的各个进程中。这个引用和java中的引用一样既可以是强引用也可以是弱类型，而且可以从一个进程传给其他进程，让大家都能访问同意server，就像讲一个对象或引用赋值给另一个引用一样。Binder模糊了进程边界，淡化了进程间通信过程，整个系统仿佛运行与同一个面向对象的程序之中。形形色色的Binder对象以及星罗密布的引用仿佛粘接各个应用程序的胶水，这也是Binder在英文里的原意。（<strong>当然面向对象只是针对应用程序而言，对于Binder驱动和内核其它模块一样使用C语言实现，没有类和对象的概念。Binder驱动为面向对象的进程间通信提供底层支持</strong>。）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-应用工程师的-Binder-原理剖析&quot;&gt;&lt;a href=&quot;#Android-应用工程师的-Binder-原理剖析&quot; class=&quot;headerlink&quot; title=&quot;Android 应用工程师的 Binder 原理剖析&quot;&gt;&lt;/a&gt;Android 
      
    
    </summary>
    
      <category term="解析" scheme="http://yoursite.com/categories/%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>仿bugtags实现App线上Crash监控及问题复现</title>
    <link href="http://yoursite.com/2018/03/16/%E4%BB%BFbugtags%E5%AE%9E%E7%8E%B0App%E7%BA%BF%E4%B8%8ACrash%E7%9B%91%E6%8E%A7%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/03/16/仿bugtags实现App线上Crash监控及问题复现/</id>
    <published>2018-03-16T13:15:18.000Z</published>
    <updated>2018-03-16T13:19:11.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仿bugtags实现App线上Crash监控及问题复现"><a href="#仿bugtags实现App线上Crash监控及问题复现" class="headerlink" title="仿bugtags实现App线上Crash监控及问题复现"></a>仿bugtags实现App线上Crash监控及问题复现</h1><h1 id="实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。"><a href="#实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。" class="headerlink" title="实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。"></a>实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。</h1><p>大致的流程如下：<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553a189001?w=1050&amp;h=478&amp;f=png&amp;s=26046" alt=""></p><h2 id="下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。"><a href="#下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。" class="headerlink" title="下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。"></a>下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。</h2><h2 id="1、首先初始化BugMonitor工具BugMonitor-init-this-及小米推送MiPushClient-registerPush-this-APP-ID-APP-KEY-和文件上传的工具Bmob-initialize-this-BMOB-APPID-（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）"><a href="#1、首先初始化BugMonitor工具BugMonitor-init-this-及小米推送MiPushClient-registerPush-this-APP-ID-APP-KEY-和文件上传的工具Bmob-initialize-this-BMOB-APPID-（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）" class="headerlink" title="1、首先初始化BugMonitor工具BugMonitor.init(this);及小米推送MiPushClient.registerPush(this, APP_ID, APP_KEY);和文件上传的工具Bmob.initialize(this,BMOB_APPID);（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）"></a>1、首先初始化BugMonitor工具BugMonitor.init(this);及小米推送MiPushClient.registerPush(this, APP_ID, APP_KEY);和文件上传的工具Bmob.initialize(this,BMOB_APPID);（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onCreate() &#123;</span><br><span class="line">       super.onCreate();</span><br><span class="line">       BugMonitor.init(this);</span><br><span class="line">       Bmob.initialize(this,BMOB_APPID);</span><br><span class="line">       MiPushClient.registerPush(this, APP_ID, APP_KEY);</span><br><span class="line">       LoggerInterface newLogger = new LoggerInterface() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void setTag(String tag) &#123;</span><br><span class="line">               // ignore</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void log(String content, Throwable t) &#123;</span><br><span class="line">               Log.d(TAG, &quot;----&gt;&gt;t&quot;+content, t);</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void log(String content) &#123;</span><br><span class="line">               Log.d(TAG, &quot;----&gt;&gt;content&quot;+content);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       Logger.setLogger(this, newLogger);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2、在BugMonitor中初始化CrashHandler-因为安卓中可以通过这个Handler来捕捉crash信息"><a href="#2、在BugMonitor中初始化CrashHandler-因为安卓中可以通过这个Handler来捕捉crash信息" class="headerlink" title="2、在BugMonitor中初始化CrashHandler,因为安卓中可以通过这个Handler来捕捉crash信息"></a>2、在BugMonitor中初始化CrashHandler,因为安卓中可以通过这个Handler来捕捉crash信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void init(Context context) &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        initCrashHandler(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void initCrashHandler(Context context) &#123;</span><br><span class="line">        Thread.UncaughtExceptionHandler exceptionHandler = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">        CrashHandler crashHandler = new CrashHandler(context, exceptionHandler);</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(crashHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3、CrashHandler-实现了-Thread-UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。"><a href="#3、CrashHandler-实现了-Thread-UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。" class="headerlink" title="3、CrashHandler 实现了 Thread.UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。"></a>3、CrashHandler 实现了 Thread.UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。</h2><h2 id="4、当发生crash的时候我们需要做的就是尽量收集有用的信息-下面我们仔细看下onCrash方法。"><a href="#4、当发生crash的时候我们需要做的就是尽量收集有用的信息-下面我们仔细看下onCrash方法。" class="headerlink" title="4、当发生crash的时候我们需要做的就是尽量收集有用的信息,下面我们仔细看下onCrash方法。"></a>4、当发生crash的时候我们需要做的就是尽量收集有用的信息,下面我们仔细看下onCrash方法。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onCrash(String crashInfo) &#123;</span><br><span class="line">        Activity activity = ActivityHelper.getActivity();</span><br><span class="line">        long mills = System.currentTimeMillis();</span><br><span class="line">        dirName = TIME_FORMATTER.format(mills);</span><br><span class="line"></span><br><span class="line">        Display defaultDisplay = activity.getWindowManager().getDefaultDisplay();</span><br><span class="line">        Point point = new Point();</span><br><span class="line">        defaultDisplay.getSize(point);</span><br><span class="line">        float density = activity.getResources().getDisplayMetrics().density;</span><br><span class="line"></span><br><span class="line">        String networkState = NetUtil.getNetworkState(BugMonitor.mContext);</span><br><span class="line">        PackageInfo info = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            info = BugMonitor.mContext.getPackageManager().getPackageInfo(BugMonitor.mContext.getPackageName(), 0);</span><br><span class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long freeMemory = MemoryUtil.getFreeMemory();</span><br><span class="line">        long totalMemory = MemoryUtil.getTotalMemory();</span><br><span class="line">        String cpuName = CPUUtil.getCpuName();</span><br><span class="line">        String curCpuFreq = CPUUtil.getCurCpuFreq();</span><br><span class="line">        String maxCpuFreq = CPUUtil.getMaxCpuFreq();</span><br><span class="line">        String minCpuFreq = CPUUtil.getMinCpuFreq();</span><br><span class="line">        int numCores = CPUUtil.getNumCores();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        boolean rooted = SystemInfoUtil.checkSuFile();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        activity.getWindow().getDecorView().setDrawingCacheEnabled(true);</span><br><span class="line">        Bitmap bmp = activity.getWindow().getDecorView().getDrawingCache();</span><br><span class="line">        BitmapHelper.saveBitmap(bmp, dirName);</span><br><span class="line">        final String s = CrashInfo.newInstance()</span><br><span class="line">                .setStackStrings(crashInfo)</span><br><span class="line">                .setScreenResolution(point)</span><br><span class="line">                .setDensity(density)</span><br><span class="line">                .setNetwork(networkState)</span><br><span class="line">                .setPackageInfo(info)</span><br><span class="line">                .setMemory(freeMemory,totalMemory)</span><br><span class="line">                .setCpuInfo(numCores,cpuName,curCpuFreq,maxCpuFreq)</span><br><span class="line">                .setIsRoot(rooted)</span><br><span class="line">                .flushString()</span><br><span class="line">                .toString();</span><br><span class="line">        saveLogToSDCard(s,&quot;crashInfo&quot;);</span><br><span class="line">        String step = StepQueueHelper.flushString();</span><br><span class="line">        Log.e(TAG, &quot;----&gt;&gt;step: &quot;+step );</span><br><span class="line">        saveLogToSDCard(step,&quot;step&quot;);</span><br><span class="line">        Log.e(TAG, s );</span><br><span class="line"></span><br><span class="line">        //1、将文件夹目录写入sp中，再次启动时读出其中的内容</span><br><span class="line">        //2、特殊情况：已启动就fc，根本来不及上传</span><br><span class="line">        Intent intent = new Intent(activity, UploadService.class);</span><br><span class="line">        activity.startService(intent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码https-github-com-lantier743865-kso）"><a href="#5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码https-github-com-lantier743865-kso）" class="headerlink" title="5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码https://github.com/lantier743865/kso）"></a>5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码<a href="https://github.com/lantier743865/kso）" target="_blank" rel="noopener">https://github.com/lantier743865/kso）</a></h2><p>##6、关于使用步骤我们要看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package android.com.bugmonitor.base;</span><br><span class="line"></span><br><span class="line">import android.com.bugmonitor.collector.BugMonitor;</span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.view.MotionEvent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by wuxiaolong on 2018/3/9.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class BaseActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static final String TAG = &quot;BaseActivity&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        super.onResume();</span><br><span class="line">        BugMonitor.onResume(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">        BugMonitor.onPause(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        BugMonitor.onDispatchTouchEvent(this,ev);</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。"><a href="#在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。" class="headerlink" title="在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。"></a>在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onDispatchTouchEvent(Activity activity, MotionEvent event) &#123;</span><br><span class="line">       if(event.getAction() == 0) &#123;</span><br><span class="line">           this.lastX = event.getRawX();</span><br><span class="line">           this.lastY = event.getRawY();</span><br><span class="line">       &#125; else if(event.getAction() == 1) &#123;</span><br><span class="line">           float currentX = event.getRawX();</span><br><span class="line">           float currentY = event.getRawY();</span><br><span class="line">           if(this.lastX == currentX &amp;&amp; this.lastY == currentY) &#123;</span><br><span class="line">               View var5 = this.getView(activity.getWindow().getDecorView(), currentX, currentY);</span><br><span class="line">               Log.e(TAG, &quot;----&gt;&gt;var5: &quot;+var5 );</span><br><span class="line">               StepQueueHelper.enqueueStep(activity,var5);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>##其实，我们在获取到event后，可以通过当前的activity的decorView的位置算出当前是哪个view，这一点我也是从bugtags的源码看出来的，可以混淆过我看了半天才想明白。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void enqueueStep(Activity activity, View view) &#123;</span><br><span class="line">        String path  = view.getResources().getResourceName(view.getId());</span><br><span class="line">        String vName = path.substring(path.indexOf(&quot;/&quot;)+1);</span><br><span class="line">        String format = TIME_FORMATTER.format(System.currentTimeMillis());</span><br><span class="line">        stepBuilder.append(format)</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(activity.getClass().getName())</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(EVENT)</span><br><span class="line">                .append(VIEWID)</span><br><span class="line">                .append(vName)</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(TYPE)</span><br><span class="line">                .append(view.getClass().getName());</span><br><span class="line">        String s = stepBuilder.toString();</span><br><span class="line">        stepQueue.add(s);</span><br><span class="line">        stepBuilder.delete(0,stepBuilder.length());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。"><a href="#有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。" class="headerlink" title="有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。"></a>有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。</h2><h2 id="6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service-在其他进程中"><a href="#6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service-在其他进程中" class="headerlink" title="6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service(在其他进程中)"></a>6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service(在其他进程中)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(activity, UploadService.class);</span><br><span class="line">        activity.startService(intent);</span><br></pre></td></tr></table></figure><p>#关于BugMonitor关键的部分讲完了，剩下的就是代码编写和实现了。</p><p>#其中upload是一个接口，大家可以用自己的服务器规范去实现，我个人用了bmob的免费存储。大致的目录结构是这样的：<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef5539893405?w=716&amp;h=1396&amp;f=png&amp;s=176242" alt=""></p><h2 id="7、我们看下最终的结果："><a href="#7、我们看下最终的结果：" class="headerlink" title="7、我们看下最终的结果："></a>7、我们看下最终的结果：</h2><p><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553ae81098?w=2664&amp;h=552&amp;f=png&amp;s=320254" alt=""></p><p>###这是携带设备信息的堆栈信息文件<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553a8c5018?w=2730&amp;h=868&amp;f=png&amp;s=381825" alt=""></p><p>###这是用户的使用步骤文件<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553adb3187?w=2204&amp;h=372&amp;f=png&amp;s=158186" alt=""></p><p>###这是最终上传到服务端后的文件<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553a3bd560?w=2038&amp;h=952&amp;f=png&amp;s=202924" alt=""></p><p>###这是发生crash时候的现场截屏<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef55746956fe?w=1962&amp;h=1638&amp;f=png&amp;s=160631" alt=""></p><h1 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h1><ol><li>工具是为了发生某些crash之后我们尽可能的多收集现场信息</li><li>mipush和bmob是为了流程能够完善，最终我们还需要热修复来善后</li><li>代码地址：![<a href="https://github.com/lantier743865/kso" target="_blank" rel="noopener">https://github.com/lantier743865/kso</a>]</li><li>写的不好，大家请见谅，以后会继续努力。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;仿bugtags实现App线上Crash监控及问题复现&quot;&gt;&lt;a href=&quot;#仿bugtags实现App线上Crash监控及问题复现&quot; class=&quot;headerlink&quot; title=&quot;仿bugtags实现App线上Crash监控及问题复现&quot;&gt;&lt;/a&gt;仿bugt
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://yoursite.com/2018/03/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/03/01/快速排序/</id>
    <published>2018-03-01T12:15:14.000Z</published>
    <updated>2018-03-01T12:16:22.445Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序是用分治策略</span></span><br><span class="line"><span class="comment"> * 基本思想：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；</span></span><br><span class="line"><span class="comment"> *          其中一部分的所有数据都比另外一部分的所有数据都小。</span></span><br><span class="line"><span class="comment"> *          然后，再按此方法对这两部分数据分别进行快速排序，</span></span><br><span class="line"><span class="comment"> *          整个排序过程可以递归进行，以此达到整个数据变成有序序列。</span></span><br><span class="line"><span class="comment"> * 快速排序的流程：</span></span><br><span class="line"><span class="comment"> * 1、从数列中挑出一个基准值</span></span><br><span class="line"><span class="comment"> * 2、将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面（相同的数可以到任一边）；</span></span><br><span class="line"><span class="comment"> *    在这个区分退出后，该基准就处于数列的中间位置</span></span><br><span class="line"><span class="comment"> * 3、递归的把"基准前面的子数列"和"基准值后面的子数列"进行排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 快速排序的事件复杂度和稳定性</span></span><br><span class="line"><span class="comment"> *  快速排序是不稳定的算法，它不满足稳定算法的定义。</span></span><br><span class="line"><span class="comment"> *  快速排序的时间复杂度在最坏的情况下是O(N^2),平均时间复杂度是O(N*lgN)</span></span><br><span class="line"><span class="comment"> *  快速排序采用分治法进行便利，我们将它看作一颗二叉树，它要遍历的次数就是二叉树的深度，</span></span><br><span class="line"><span class="comment"> *  根据完全二叉树的定义，他的深度至少是lg(N+1)，因此，快速排序的遍历次数最少是lg(N+1)次</span></span><br><span class="line"><span class="comment"> *  二叉树的最大深度是N，因此，快速排序的便利次数最多是N次。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input 待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 数组的左边界</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 数组的右边界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] input,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> i,j,x;</span><br><span class="line">            i = left;</span><br><span class="line">            j = right;</span><br><span class="line">            x = input[i];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="comment">//从右向左找第一个小于x的数</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; x&lt;input[j]) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    input[i++] = input[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从左向右找第一个大于x的数</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; x &gt; input[i] )&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    input[j--] = input[i];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            input[i] = x;</span><br><span class="line">            <span class="comment">//递归调用</span></span><br><span class="line">            quickSort(input,left,i -<span class="number">1</span>);</span><br><span class="line">            quickSort(input,i+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] input = &#123;<span class="number">50</span>,<span class="number">30</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">234</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">873</span>&#125;;</span><br><span class="line">        quickSort(input,<span class="number">0</span>,input.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            System.out.print(input[i] +<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://yoursite.com/2018/02/26/%E6%A0%88/"/>
    <id>http://yoursite.com/2018/02/26/栈/</id>
    <published>2018-02-26T08:50:29.000Z</published>
    <updated>2018-02-26T08:51:13.736Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.regexp.internal.RE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralArrayStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] mArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralArrayStack</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(type,DEFAULT_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralArrayStack</span><span class="params">(Class&lt;T&gt; type, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">         mArray = (T[]) Array.newInstance(type, size);</span><br><span class="line">         count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将val添加到栈中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T val)</span></span>&#123;</span><br><span class="line">        mArray[count++] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈顶元素值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mArray[count-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈顶元素，并删除栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T ret = mArray[count - <span class="number">1</span>];</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack is Empty \n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.print("stack size() = d% \n" ,size());</span></span><br><span class="line">        <span class="keyword">int</span> i = size() -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(mArray[i]);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>双向链表</title>
    <link href="http://yoursite.com/2018/02/26/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/02/26/双向链表/</id>
    <published>2018-02-26T08:09:01.000Z</published>
    <updated>2018-02-26T08:11:38.876Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLink</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//表头</span></span><br><span class="line">    <span class="keyword">private</span> DNode&lt;T&gt; mHead;</span><br><span class="line">    <span class="comment">//节点个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCount;</span><br><span class="line">    <span class="comment">//双向链表"节点"对应的结构体</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> DNode prev;</span><br><span class="line">        <span class="keyword">public</span> DNode next;</span><br><span class="line">        <span class="keyword">public</span> T value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DNode</span><span class="params">(T value, DNode prev, DNode next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建表头，表头没有存储数据</span></span><br><span class="line">        mHead = <span class="keyword">new</span> DNode&lt;T&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        mHead.prev = mHead.next = mHead;</span><br><span class="line">        mCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回节点数目</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCount == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取第index位置的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DNode&lt;T&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= mCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正向查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mCount / <span class="number">2</span>)&#123;</span><br><span class="line">            DNode&lt;T&gt; node = mHead.next;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//反向查找</span></span><br><span class="line">        DNode&lt;T&gt; rnode = mHead.prev;</span><br><span class="line">        <span class="keyword">int</span> rindex = mCount - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rindex; i++) &#123;</span><br><span class="line">            rnode = rnode.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rnode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取index位置的节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(index).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第一个节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(<span class="number">0</span>).value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取最后一个节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(mCount - <span class="number">1</span>).value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点插入到第index位置之前</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</span><br><span class="line">            DNode&lt;T&gt; dNode = <span class="keyword">new</span> DNode&lt;&gt;(t, mHead, mHead.next);</span><br><span class="line">            mHead.next.prev = dNode;</span><br><span class="line">            mHead.next = dNode;</span><br><span class="line">            mCount++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先获取到当前位置的节点</span></span><br><span class="line">        DNode&lt;T&gt; inode = getNode(index);</span><br><span class="line">        <span class="comment">//创建这个节点，这个节点之后是当前位置的节点，这个节点之前是当前位置节点之前的节点</span></span><br><span class="line">        DNode&lt;T&gt; tNode = <span class="keyword">new</span> DNode&lt;&gt;(t, inode.prev, inode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下两步是因为是双向链表，所以要两边都指定</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将当前位置的节点的上一个节点的next指向要插入的节点</span></span><br><span class="line">        inode.prev.next = tNode;</span><br><span class="line">        <span class="comment">//将当前位置的节点的下一个节点指向要插入的节点</span></span><br><span class="line">        inode.next = tNode;</span><br><span class="line">        mCount++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点插入第一个 节点处</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFirst</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        insert(<span class="number">0</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点追加到链表的末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendLast</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        DNode&lt;T&gt; tNode = <span class="keyword">new</span> DNode&lt;&gt;(t, mHead.prev, mHead);</span><br><span class="line">        mHead.prev.next = tNode;</span><br><span class="line">        mHead.prev = tNode;</span><br><span class="line">        mCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除index位置的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        DNode&lt;T&gt; node = getNode(index);</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line">        mCount--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除第一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        del(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        del(mCount - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>自我介绍</title>
    <link href="http://yoursite.com/2018/02/13/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/02/13/自我介绍/</id>
    <published>2018-02-13T15:54:24.000Z</published>
    <updated>2018-02-13T16:30:55.586Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么样的异性不考虑：</p><blockquote><ul><li>异性朋友多,常跟异性玩的</li><li>公主病，嘴比较恶毒的</li><li>夜不归宿</li><li>无诚信，承诺过的不去兑现</li><li>只享受被追的过程，不会付出不给反馈</li></ul></blockquote><p>2.我是什么样的人：</p><blockquote><ul><li>我可以坐十几个小时去跟朋友吃顿饭，然后回来上班，因为我认为值得</li><li>在不熟悉的人面前我话少，尤其女生面前我没有话题可说，熟人面前我特别逗比，喜欢开玩笑说段子，基本无拘束</li><li>我重视诚信，即使花费代价也要兑现</li><li>不喜欢争斗，好静，但也喜欢爬山，和熟人聚会</li></ul></blockquote><p>3.我的生活习惯：</p><blockquote><ul><li>喜欢旅游，港澳台、云南、成都、重庆、浙江、江苏、山东、河南、甘肃、山西、贵州等都去玩过，这方面我比较擅长</li><li>喜欢吃，有时候出去旅游就是为了尝尝各地的美食小吃，而且超级喜欢吃水果，特别是哈密瓜，经常去海底捞就是为了吃他们的哈密瓜</li><li>以前喜欢看电视剧，都市、古装、韩剧都看，特别喜欢越狱，因为他我喜欢上工程师，所以我现在也是一名工程师了，只是现在工作了，所以很少抽出时间看，放假的时候还会看</li><li>我比较挑食，吃饭经常会剩饭，所以不喜欢去别人家做客</li></ul></blockquote><p>4.我的兴趣爱好：</p><blockquote><ul><li>羽毛球、网球、足球、篮球我都在大学学过，但也就是很业余的水平</li><li>爬山，爬过泰山、华山，希望以后有机会去爬更多的山</li><li>爱看博客，技术类的喜欢上掘金和csdn，也会订阅微信公众号看。</li><li>喜欢听粤语歌曲，比如杨千嬅、谢安琪等等</li></ul></blockquote><p>5.理想异性：</p><blockquote><ul><li>有信念，能一起走完下半生</li><li>遇上挫折和问题能商量想办法，不会气急败坏</li><li>对于别人的付出能有反馈，不是一味接受</li><li>生活习惯好，能做到自律</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.什么样的异性不考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;异性朋友多,常跟异性玩的&lt;/li&gt;
&lt;li&gt;公主病，嘴比较恶毒的&lt;/li&gt;
&lt;li&gt;夜不归宿&lt;/li&gt;
&lt;li&gt;无诚信，承诺过的不去兑现&lt;/li&gt;
&lt;li&gt;只享受被追的过程，不会付出不给反馈&lt;/l
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>java面试题一</title>
    <link href="http://yoursite.com/2018/02/08/java%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/"/>
    <id>http://yoursite.com/2018/02/08/java面试题一/</id>
    <published>2018-02-08T14:34:38.000Z</published>
    <updated>2018-02-08T14:43:00.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java面试题一"><a href="#java面试题一" class="headerlink" title="java面试题一"></a>java面试题一</h1><hr><p>###来看一道面试题，大家看看结果是多少？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x ,y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        x--;</span><br><span class="line">        myMethod();</span><br><span class="line">        System.out.println(x + y++ + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        y = x++ + ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="先不要看答案"><a href="#先不要看答案" class="headerlink" title="先不要看答案"></a>先不要看答案</h3><p>分析过程，static代码块中的是局部变量，所以是下x，y都是0；<br>main方法中x–后，执行mythod，此时x是-1，<br>执行x++后x++仍然是-1，然后此时x是0，再执行++x，那么++x是1，<br>那么y= -1+1=0；<br>于是x是1，y是0；<br>那么system.out.println中是1+0+1=2；<br>最终结果是2.</p><p>这道题很常见，却也很容易做错，大家体会考到的知识点。</p><p>不同的类加载器分别创建的同一个类的字节码数据属于完全不同的对象，没有任何关联。<br>当运行一个程序的时候，jvm启动，运行bootstrap classloader，该classloader加载java核心api（extclassloader和appclassloader也在此时被加载），然后调用extclassloader加载扩展api，最后appclassloader加载classpath目录下定义的class，这就是一个程序最基本的加载流程。<br>类加载过程使用父类委托模式，这样有三个原因：</p><ol><li>这样可以避免重复加载。</li><li>安全因素，防止加载自定义的classloader</li><li>一些重要的方法</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java面试题一&quot;&gt;&lt;a href=&quot;#java面试题一&quot; class=&quot;headerlink&quot; title=&quot;java面试题一&quot;&gt;&lt;/a&gt;java面试题一&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;###来看一道面试题，大家看看结果是多少？&lt;br&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="java面试" scheme="http://yoursite.com/categories/java%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java面试" scheme="http://yoursite.com/tags/java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>反思自己身上的毛病</title>
    <link href="http://yoursite.com/2018/02/07/%E5%8F%8D%E6%80%9D%E8%87%AA%E5%B7%B1%E8%BA%AB%E4%B8%8A%E7%9A%84%E6%AF%9B%E7%97%85/"/>
    <id>http://yoursite.com/2018/02/07/反思自己身上的毛病/</id>
    <published>2018-02-07T02:40:10.000Z</published>
    <updated>2018-02-07T02:41:01.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反思自己身上的毛病"><a href="#反思自己身上的毛病" class="headerlink" title="反思自己身上的毛病"></a>反思自己身上的毛病</h1><hr><p>数据结构和算法一知半解，一个平常的排序和合并都手写不出来，讲到源码也是停留于皮毛，view的事件分发这种东西，也能讲个人云亦云，究其根源，说不上来。android中有很多framwork层的东西，都没有好好去看，平常工作不努力，机会来了总是抓不住。每天都期盼明天开始努力，却总是明日复明日。<br>jvm被问到就是一头雾水，锁也不知道，多线程不熟悉，新事物出现不去学习，心思总不在工作和学习上，还老爱装逼。。。。<br>  真的，人不反思不知道自己有多可恶，什么都不会还不去学习，静不下心，每天都是悔恨自己不努力，却又不停浪费时间。看了其他人的博客，才知道自己有多懒惰，只接受填鸭式的知识，很少去举一反三，问问为什么这样。</p><p>  感觉这几天真的在经历价值观的重建。希望前30年努力，不要在后30年后悔。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反思自己身上的毛病&quot;&gt;&lt;a href=&quot;#反思自己身上的毛病&quot; class=&quot;headerlink&quot; title=&quot;反思自己身上的毛病&quot;&gt;&lt;/a&gt;反思自己身上的毛病&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;数据结构和算法一知半解，一个平常的排序和合并都手写不出来，讲到源码也是停留
      
    
    </summary>
    
      <category term="反思" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="反思" scheme="http://yoursite.com/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
</feed>
