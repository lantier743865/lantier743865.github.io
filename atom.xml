<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴晓龙</title>
  <icon>https://www.gravatar.com/avatar/c3164500aaa6ba4b06d2c5617067c85e</icon>
  <subtitle>爱吃哈密瓜的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-09T03:06:12.086Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴晓龙</name>
    <email>635912159@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 应用工程师的 Binder 原理剖析</title>
    <link href="http://yoursite.com/2018/05/08/Android-%E5%BA%94%E7%94%A8%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84-Binder-%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2018/05/08/Android-应用工程师的-Binder-原理剖析/</id>
    <published>2018-05-08T12:33:02.000Z</published>
    <updated>2018-05-09T03:06:12.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-应用工程师的-Binder-原理剖析"><a href="#Android-应用工程师的-Binder-原理剖析" class="headerlink" title="Android 应用工程师的 Binder 原理剖析"></a>Android 应用工程师的 Binder 原理剖析</h1><p>标签（空格分隔）： Binder</p><hr><p>##一、Binder概述</p><h3 id="Binder是一种进程间通信机制，基于开源的OpenBinder实现（http-www-angryredplanet-com-hackbod-openbinder-docs-html-）"><a href="#Binder是一种进程间通信机制，基于开源的OpenBinder实现（http-www-angryredplanet-com-hackbod-openbinder-docs-html-）" class="headerlink" title="Binder是一种进程间通信机制，基于开源的OpenBinder实现（http://www.angryredplanet.com/~hackbod/openbinder/docs/html/）"></a>Binder是一种进程间通信机制，基于开源的OpenBinder实现（<a href="http://www.angryredplanet.com/~hackbod/openbinder/docs/html/）" target="_blank" rel="noopener">http://www.angryredplanet.com/~hackbod/openbinder/docs/html/）</a></h3><h3 id="1、为什么必须理解Binder？"><a href="#1、为什么必须理解Binder？" class="headerlink" title="1、为什么必须理解Binder？"></a>1、为什么必须理解Binder？</h3><ol><li>为什么Activity间传递对象需要序列化？</li><li>Activity的启动流程是什么样？</li><li>四大组件底层的通信机制是怎么样的？</li><li>AIDL内部的实现原理是什么？</li><li>插件化编程技术应该从何学起？</li><li>…</li></ol><h4 id="要弄清楚上面一系列问题，就必须先理解Binder通信机制。"><a href="#要弄清楚上面一系列问题，就必须先理解Binder通信机制。" class="headerlink" title="要弄清楚上面一系列问题，就必须先理解Binder通信机制。"></a>要弄清楚上面一系列问题，就必须先理解Binder通信机制。</h4><h4 id="Activity、Service、Broadcast-Receiver、Content-Provider四大组件有时运行在不同进程，进程间通信依赖于Binder-IPC机制。"><a href="#Activity、Service、Broadcast-Receiver、Content-Provider四大组件有时运行在不同进程，进程间通信依赖于Binder-IPC机制。" class="headerlink" title="Activity、Service、Broadcast Receiver、Content Provider四大组件有时运行在不同进程，进程间通信依赖于Binder IPC机制。"></a>Activity、Service、Broadcast Receiver、Content Provider四大组件有时运行在不同进程，进程间通信依赖于Binder IPC机制。</h4><h4 id="Android系统对应用层提供的各种服务：-ActivityManagerService、PackageManagerService等都是基于Binder-IPC机制实现。"><a href="#Android系统对应用层提供的各种服务：-ActivityManagerService、PackageManagerService等都是基于Binder-IPC机制实现。" class="headerlink" title="Android系统对应用层提供的各种服务： ActivityManagerService、PackageManagerService等都是基于Binder IPC机制实现。"></a>Android系统对应用层提供的各种服务： ActivityManagerService、PackageManagerService等都是基于Binder IPC机制实现。</h4><h3 id="2、Android系统为什么用Binder？"><a href="#2、Android系统为什么用Binder？" class="headerlink" title="2、Android系统为什么用Binder？"></a>2、Android系统为什么用Binder？</h3><p>####Android系统基于Linux内核，Linux已经提供了管道、消息队列、共享内存和Socket等IPC机制。为什么Android还要提供Binder来实现IPC? </p><p>详细请参考知乎：<br><a href="https://www.zhihu.com/question/39440766?sort=created" target="_blank" rel="noopener">为什么Android要采用Binder作为IPC机制?</a><br><a href="https://www.cnblogs.com/bastard/archive/2012/10/17/2728155.html" target="_blank" rel="noopener">Android为什么选择binder</a></p><h4 id="对比Linux进程间IPC方式："><a href="#对比Linux进程间IPC方式：" class="headerlink" title="对比Linux进程间IPC方式："></a>对比Linux进程间IPC方式：</h4><ol><li>管道：在创建时分配一个page大小的内存，缓存区大小比较有限；</li><li>消息队列：信息复制两次，额外的CPU消耗；不适合频繁或信息量大的通信；</li><li>共享内存：无需复制，共享缓冲区直接附加到进程虚拟地址空间，速度快；但进程间的同步问题操作系统无法实现，必须各进程利用同步工具解决；</li><li>套接字：作为更通用的接口，传输效率低，主要用于不同机器或跨网络的通信；</li><li>信号量：常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>信号：不适用于信息交换，更适用于进程中断控制，比如非法内存访问，杀死某个进程等；</li></ol><h4 id="主要是："><a href="#主要是：" class="headerlink" title="主要是："></a>主要是：</h4><ul><li>性能：数据拷贝次数：Binder数据拷贝只需要一次，而管道、消息队列、Socket都需要两次，但共享内存方式一次内存拷贝都不需要；从性能角度看，Binder性能仅次于共享内存。</li><li>稳定性：Binder是基于C/S架构的(客户端Client和服务端Server组成架构，Client端有什么需求，直接发送给Server端去完成，架构清晰明朗，Server端与Clent端相对独立，稳定性较好)；而共享内存实现方式复杂，没有客户与服务端之别，需要充分考虑到访问临界资源的并发同步问题，否则可能会出现死锁等问题；从稳定性角度看，Binder架构优越于共享内存。</li><li>安全性：传统Linux IPC的接收方无法获得对方进程可靠的UID/PID,从而无法鉴别对方身份；而Android作为一个开放的开源体系，拥有非常多的开发平台，App开源甚广，因此手机的安全显得额外重要；对于普通用户，绝不希望从App商店下载偷窥隐私数据、后台造成手机耗电等等问题，传统的Linux IPC无任何保护措施，完全由上层协议来确保。Android为每个按照你黄浩的APp分配了自己的UID，故而进程的UID是鉴别金恒身份的重要标志。传统的IPC只能由用户在数据包中填入UID/PID，但这样不可靠，容易被恶意程序利用。可靠的身份标识只有由IPC机制在内核在内核中添加。其次传统的IPC访问接入点是开放的，只要知道这些接入点的程序都可以和对端建立连接，不管怎样都无法阻止恶意程序通过猜测接收方地址获得连接。同时Binder既支持实名Binder，又支持匿名Binder，安全性高。</li></ul><p>##二、Linux下传统的进程间通信原理</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/linux_ipc_1.png" alt="Linux背景知识"></p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/linux_ipc_2.png" alt="传统IPC通信原理"></p><ul><li>进程隔离 </li></ul><p>进程与进程间内存是不共享的。两个进程就像两个平行的世界，A进程没法直接访问B进程的数据，A进程和B进程之间要进行数据交互就得采用特殊的通信机制：进程间通信（IPC）。</p><ul><li>进程空间划分</li></ul><p>操作系统给的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也可以访问底层硬件设备。为了保护用户进程不能直接操作内核，保证内核的安全，操作系统刚从落机上将虚拟空间划分为用户空间（User Space）和内核空间（Kernel Space）。简单说，内核空间（Kernel）是系统内核运行的空间，用户空间（User Space）是用户程序运行的空间。为了保证安全性，他们之间是隔离的。</p><ul><li>系统调用</li></ul><p>虽然从逻辑上进行了用户空间和内核空间的划分，但不可避免的用户空间需要访问内核资源，比如文件操作，网络访问等。为了突破隔离限制，就需要借助系统调用来实现。系统调用是用户空间访问内核空间的唯一方式，保证了所有的资源访问都是在内核的控制下进行，避免用户程序对系统资源的越权访问，提升系统安全性和稳定性。</p><p>系统调用主要通过如下两个函数实现：<br>copy_from_user()//将数据从用户空间拷贝到内核空间<br>copy_to_user()//将数据从内核空间拷贝到用户空间</p><p>通常的做法是消息发送方将要发送的数据存放在内存缓存区中，通过系统调用进入内核态。然后内核程序在内核空间分配内存，开辟一块内核缓存区，调用copy_from_user()函数将数据从用户空间的内存缓存区拷贝到内和空间的内存缓存区中。同样的，接收方进程在接收数据时在自己的用户空间开辟一块内存缓存区，然后内核程序调用copy_to_user()函数将数据从内核缓存区起拷贝到接收进程的内存缓存区。这样数据发送方进程和数据接收方进程就完成了一次数据传输，我们称完成了一次进程间通信。</p><p>####传统的IPC通信方式有两个问题：<br>1、性能低下,一次数据传递需要经历：内存缓存区–&gt;内存缓存区–&gt;内存缓存区，需要2次数据拷贝；<br>2、接收数据的缓存区由数据接收进程提供，但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能打的内存空间或者先调用API接收消息来获取消息体的大小，这两种做法不是浪费空间就是浪费时间。</p><p>##三、Binder跨进程通信原理<br><a href="https://blog.csdn.net/boyupeng/article/details/47011383" target="_blank" rel="noopener">Android Binder机制原理（史上最强理解，没有之一）</a></p><ol><li>动态内核可加载模块 &amp;&amp; 内存映射</li></ol><p>Binder并不是Linux的内核，得益于Linux的动态内核可加载模块（Loadable Kernel Module,LKM）机制；模块是具有独立功能的程序，它可以被单独编译，但是不能独立运行。它在运行时被连接到内核作为内核的一部分运行。这样，Android系统就可以通过动态添加一个内核模块运行在内核空间，用户进程之间通过这个内核模块作为桥梁来实现通信。</p><p>在Android系统中，这个运行在内核空间，负责各个用户进程通过Binder实现通信的内核模块就叫Binde驱动（Binder Driver）。</p><p>内存映射：Binder IPC机制中涉及到的内存映射通过mmap（）实现，mmap（）是操作系统中的一种内存映射的方法。内存映射简单的将就是讲用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</p><p>内存映射能减少数据拷贝次数，实现用户空间和内和空间的高效互动。两个空间各自的修改能直接反映在映射的内存区域，从而被对方空间及时感知。也正因为如此，内存映射能够提供对进程间通信的支持。</p><ol><li>Binder IPC实现原理</li></ol><p>Binder IPC正是基于内存映射（mmpc）来实现的，但是mmap（）通常是在有物理截止的文件系统上的。<br>比如进程中的用户区域是不能直接和物理设备打交道的，如果想把磁盘上的数据读取到进程的用户区域，需要两次拷贝（磁盘–&gt;内核空间–&gt;用户空间）；通常在这种场景下mmap（）就能发挥作用，通过在物理介质和用户空间之间建立映射，减少数据的拷贝次数，用内存读写取代I/O读写，提价文件读取效率。</p><p>而Binder并不存在物理介质，因此Binder驱动使用mmap（）并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p><h4 id="一次完整的Binder-IPC-通信过程通常是这样："><a href="#一次完整的Binder-IPC-通信过程通常是这样：" class="headerlink" title="一次完整的Binder IPC 通信过程通常是这样："></a>一次完整的Binder IPC 通信过程通常是这样：</h4><ol><li>首先Binder驱动在内核空间创建一个数据接收缓存区；</li><li>接着在内核空间开辟一块内核缓存区，建立内核缓存区和内核中数据接收缓存区之间的映射关系，以及内核中数据接收缓存区和接收进程用户空间地址的映射关系。</li><li>发送方进程通过系统调用copy_from_user()将数据copy到内核中的内核缓存区，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信。</li></ol><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_1.png" alt="Binder IPC原理"></p><p>##四、Binder通信模型</p><p>一次完整的进程间通信必然至少包含两个进程，通常我们称通信的双方分别为客户端进程（Client）和服务端进程（Server），由于进程隔离机制的存在，通信双方必然需要借助Binder来实现。</p><h3 id="Clent-Server-ServerManager-驱动"><a href="#Clent-Server-ServerManager-驱动" class="headerlink" title="Clent/Server/ServerManager/驱动"></a>Clent/Server/ServerManager/驱动</h3><p>Binder由Clent，Server、ServerManager、Binder驱动一系列组件组成。其中Clent、Server、ServerManager运行在用户空间，Binder驱动运行在内核空间。其中ServerManager和Binder驱动由系统提供，而Clent、Server由应用程序来实现。Clent、Server和ServerManager均是通过系统调用open、mmap和ioctl来访问设备文件/dev/binder，从而实现与Binder驱动的交互来间接的实现跨进程通信。</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_2.png" alt="通信模型"></p><h3 id="Binder通信过程"><a href="#Binder通信过程" class="headerlink" title="Binder通信过程"></a>Binder通信过程</h3><ol><li>首先，一个进程使用BINDER_SET_CONTEXT_MGR命令通过Binder驱动将自己注册成为ServiceManager；</li><li>Server通过驱动向ServiceManager中注册Binder（Server中的Binder实体）驱动为这个Binder创建位于内核中的实体节点以及ServiceManager对实体的引用，将名字以及新建的引用打包传给ServiceManager，ServiceManager将其填入查找表。</li><li>Clent通过名字，在Binder驱动的帮助下从ServiceManager中获取到对Binder实体的引用，通过这个引用就能实现和Server进程的通信。</li></ol><p>整个通信过程都需要Binder驱动的接入，</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_4.png" alt="Binder通信模型"></p><h3 id="Binder通信中的代理模式"><a href="#Binder通信中的代理模式" class="headerlink" title="Binder通信中的代理模式"></a>Binder通信中的代理模式</h3><p>A进程想要B进程中某个对象如何实现？</p><p>数据流经Binder驱动的时候驱动会对数据做一层转换。当A进程想要获取B进程中的object时，驱动并不会真的把object返回给A，而是返回一个跟object一抹一眼的代理对象objectProxy，这个objectProxy具有和object一模一样的方法，但是这些方法并没有B进程找那个object对象那些方法的能力，这些方法只需要把请求参数交给驱动即可。</p><p>当驱动接收到A进程的消息后，发现这个objectProxy就去查询自己维护的表单，一查发现这是B进程object的代理对象。于是就会通知B进程调用object的方法，并要求B进程把结果发给自己。的那个驱动霸道B进程的返回结果后就会转发给A进程，一次通信及完成了。</p><p><img src="http://ocjtywvav.bkt.clouddn.com/blog/android/binder/binder_ipc_5.png" alt=""></p><h3 id="Binder的完整定义"><a href="#Binder的完整定义" class="headerlink" title="Binder的完整定义"></a>Binder的完整定义</h3><ul><li>从进程间通信的角度看，Binder是一种进程间通信的机制；</li><li>从Server进程角度看，Binder指的是Server中的Binder实体对象；</li><li>从Clent进程的角度看，Binder指的是对Binder代理对象，是Binder实体对象的一个远程代理。</li><li>从传输过程的角度看，Binder是一个可以跨进程传输的对象；Binder驱动会对这个跨越进程的对象做一点点特殊处理，自动完成代理对象和本地对象之间的转换。</li></ul><h2 id="五、手动编码实现跨进程调用"><a href="#五、手动编码实现跨进程调用" class="headerlink" title="五、手动编码实现跨进程调用"></a>五、手动编码实现跨进程调用</h2><ul><li>IBinder：IBinder是一个接口，代表了一种跨进程的能力。只要实现了这个接口，这个对象就能跨进程传输。</li><li>IInterface: IInterface代表的是Server进程对象具备什么能力</li><li>Binder：java层的Binder类，代表队额其实就是Binder本地对象。BinderProxy类是Binder类的一个内部类，它代表远程进程的Binder对象的本地代理；这两个类都继承自IBinder，因而都具有跨进程传输的能力；实际上，在跨进程的视乎，Binder驱动会自动完成这两个对象的转换。</li><li>Stub：<br>AIDL的时候，编译工具会给我们生成一个名为Stub的静态内部类，这个类继承了Binder，说明它是一个Binder本地对象，它实现了Interface接口，表明它具有Server承诺给Client的能力；Stub是一个抽象类，具体的IIterface的相关实现需要开发者自己实现。</li></ul><p>##五、总结</p><ul><li>Binder使用了面向对象的思想来描述作为访问接入点的Binder及其在Client中的入口。Binder是一个实体位于Server中的对象，该对象提供了一套方法用以实现对服务的请求，如同类的成员函数。面向对象思想的引入将进程间通信转化为通过对某个Binder对象的引用调用该对象的方法，而其独特之处在于Binder对象是一个可以跨进程引用的对象，他的实体位于一个进程中，而它的引用却遍布于系统给的各个进程中。这个引用和java中的引用一样既可以是强引用也可以是弱类型，而且可以从一个进程传给其他进程，让大家都能访问同意server，就像讲一个对象或引用赋值给另一个引用一样。Binder模糊了进程边界，淡化了进程间通信过程，整个系统仿佛运行与同一个面向对象的程序之中。形形色色的Binder对象以及星罗密布的引用仿佛粘接各个应用程序的胶水，这也是Binder在英文里的原意。（<strong>当然面向对象只是针对应用程序而言，对于Binder驱动和内核其它模块一样使用C语言实现，没有类和对象的概念。Binder驱动为面向对象的进程间通信提供底层支持</strong>。）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-应用工程师的-Binder-原理剖析&quot;&gt;&lt;a href=&quot;#Android-应用工程师的-Binder-原理剖析&quot; class=&quot;headerlink&quot; title=&quot;Android 应用工程师的 Binder 原理剖析&quot;&gt;&lt;/a&gt;Android 
      
    
    </summary>
    
      <category term="解析" scheme="http://yoursite.com/categories/%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>仿bugtags实现App线上Crash监控及问题复现</title>
    <link href="http://yoursite.com/2018/03/16/%E4%BB%BFbugtags%E5%AE%9E%E7%8E%B0App%E7%BA%BF%E4%B8%8ACrash%E7%9B%91%E6%8E%A7%E5%8F%8A%E9%97%AE%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/03/16/仿bugtags实现App线上Crash监控及问题复现/</id>
    <published>2018-03-16T13:15:18.000Z</published>
    <updated>2018-03-16T13:19:11.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仿bugtags实现App线上Crash监控及问题复现"><a href="#仿bugtags实现App线上Crash监控及问题复现" class="headerlink" title="仿bugtags实现App线上Crash监控及问题复现"></a>仿bugtags实现App线上Crash监控及问题复现</h1><h1 id="实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。"><a href="#实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。" class="headerlink" title="实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。"></a>实现线上crash监控，包含了手机堆栈信息和设备信息，及时上传，后台修复并启用推送进行热修复流程，重要的是要手机用户的使用步骤及现场截屏，以便更快的复现问题。</h1><p>大致的流程如下：<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553a189001?w=1050&amp;h=478&amp;f=png&amp;s=26046" alt=""></p><h2 id="下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。"><a href="#下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。" class="headerlink" title="下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。"></a>下面按照项目的实现过程介绍怎么具体实现发生fc之后及时上传。</h2><h2 id="1、首先初始化BugMonitor工具BugMonitor-init-this-及小米推送MiPushClient-registerPush-this-APP-ID-APP-KEY-和文件上传的工具Bmob-initialize-this-BMOB-APPID-（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）"><a href="#1、首先初始化BugMonitor工具BugMonitor-init-this-及小米推送MiPushClient-registerPush-this-APP-ID-APP-KEY-和文件上传的工具Bmob-initialize-this-BMOB-APPID-（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）" class="headerlink" title="1、首先初始化BugMonitor工具BugMonitor.init(this);及小米推送MiPushClient.registerPush(this, APP_ID, APP_KEY);和文件上传的工具Bmob.initialize(this,BMOB_APPID);（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）"></a>1、首先初始化BugMonitor工具BugMonitor.init(this);及小米推送MiPushClient.registerPush(this, APP_ID, APP_KEY);和文件上传的工具Bmob.initialize(this,BMOB_APPID);（其实小米推送和文件上传可以自己后台实现，我是因为个人没有服务器，用的免费推送和文件存储服务，在此谢谢这些sdk公司）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onCreate() &#123;</span><br><span class="line">       super.onCreate();</span><br><span class="line">       BugMonitor.init(this);</span><br><span class="line">       Bmob.initialize(this,BMOB_APPID);</span><br><span class="line">       MiPushClient.registerPush(this, APP_ID, APP_KEY);</span><br><span class="line">       LoggerInterface newLogger = new LoggerInterface() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void setTag(String tag) &#123;</span><br><span class="line">               // ignore</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void log(String content, Throwable t) &#123;</span><br><span class="line">               Log.d(TAG, &quot;----&gt;&gt;t&quot;+content, t);</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void log(String content) &#123;</span><br><span class="line">               Log.d(TAG, &quot;----&gt;&gt;content&quot;+content);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       Logger.setLogger(this, newLogger);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2、在BugMonitor中初始化CrashHandler-因为安卓中可以通过这个Handler来捕捉crash信息"><a href="#2、在BugMonitor中初始化CrashHandler-因为安卓中可以通过这个Handler来捕捉crash信息" class="headerlink" title="2、在BugMonitor中初始化CrashHandler,因为安卓中可以通过这个Handler来捕捉crash信息"></a>2、在BugMonitor中初始化CrashHandler,因为安卓中可以通过这个Handler来捕捉crash信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void init(Context context) &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        initCrashHandler(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void initCrashHandler(Context context) &#123;</span><br><span class="line">        Thread.UncaughtExceptionHandler exceptionHandler = Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">        CrashHandler crashHandler = new CrashHandler(context, exceptionHandler);</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(crashHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3、CrashHandler-实现了-Thread-UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。"><a href="#3、CrashHandler-实现了-Thread-UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。" class="headerlink" title="3、CrashHandler 实现了 Thread.UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。"></a>3、CrashHandler 实现了 Thread.UncaughtExceptionHandler接口，并在uncaughtException方法中获取发生crash时的堆栈信息。</h2><h2 id="4、当发生crash的时候我们需要做的就是尽量收集有用的信息-下面我们仔细看下onCrash方法。"><a href="#4、当发生crash的时候我们需要做的就是尽量收集有用的信息-下面我们仔细看下onCrash方法。" class="headerlink" title="4、当发生crash的时候我们需要做的就是尽量收集有用的信息,下面我们仔细看下onCrash方法。"></a>4、当发生crash的时候我们需要做的就是尽量收集有用的信息,下面我们仔细看下onCrash方法。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onCrash(String crashInfo) &#123;</span><br><span class="line">        Activity activity = ActivityHelper.getActivity();</span><br><span class="line">        long mills = System.currentTimeMillis();</span><br><span class="line">        dirName = TIME_FORMATTER.format(mills);</span><br><span class="line"></span><br><span class="line">        Display defaultDisplay = activity.getWindowManager().getDefaultDisplay();</span><br><span class="line">        Point point = new Point();</span><br><span class="line">        defaultDisplay.getSize(point);</span><br><span class="line">        float density = activity.getResources().getDisplayMetrics().density;</span><br><span class="line"></span><br><span class="line">        String networkState = NetUtil.getNetworkState(BugMonitor.mContext);</span><br><span class="line">        PackageInfo info = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            info = BugMonitor.mContext.getPackageManager().getPackageInfo(BugMonitor.mContext.getPackageName(), 0);</span><br><span class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long freeMemory = MemoryUtil.getFreeMemory();</span><br><span class="line">        long totalMemory = MemoryUtil.getTotalMemory();</span><br><span class="line">        String cpuName = CPUUtil.getCpuName();</span><br><span class="line">        String curCpuFreq = CPUUtil.getCurCpuFreq();</span><br><span class="line">        String maxCpuFreq = CPUUtil.getMaxCpuFreq();</span><br><span class="line">        String minCpuFreq = CPUUtil.getMinCpuFreq();</span><br><span class="line">        int numCores = CPUUtil.getNumCores();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        boolean rooted = SystemInfoUtil.checkSuFile();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        activity.getWindow().getDecorView().setDrawingCacheEnabled(true);</span><br><span class="line">        Bitmap bmp = activity.getWindow().getDecorView().getDrawingCache();</span><br><span class="line">        BitmapHelper.saveBitmap(bmp, dirName);</span><br><span class="line">        final String s = CrashInfo.newInstance()</span><br><span class="line">                .setStackStrings(crashInfo)</span><br><span class="line">                .setScreenResolution(point)</span><br><span class="line">                .setDensity(density)</span><br><span class="line">                .setNetwork(networkState)</span><br><span class="line">                .setPackageInfo(info)</span><br><span class="line">                .setMemory(freeMemory,totalMemory)</span><br><span class="line">                .setCpuInfo(numCores,cpuName,curCpuFreq,maxCpuFreq)</span><br><span class="line">                .setIsRoot(rooted)</span><br><span class="line">                .flushString()</span><br><span class="line">                .toString();</span><br><span class="line">        saveLogToSDCard(s,&quot;crashInfo&quot;);</span><br><span class="line">        String step = StepQueueHelper.flushString();</span><br><span class="line">        Log.e(TAG, &quot;----&gt;&gt;step: &quot;+step );</span><br><span class="line">        saveLogToSDCard(step,&quot;step&quot;);</span><br><span class="line">        Log.e(TAG, s );</span><br><span class="line"></span><br><span class="line">        //1、将文件夹目录写入sp中，再次启动时读出其中的内容</span><br><span class="line">        //2、特殊情况：已启动就fc，根本来不及上传</span><br><span class="line">        Intent intent = new Intent(activity, UploadService.class);</span><br><span class="line">        activity.startService(intent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码https-github-com-lantier743865-kso）"><a href="#5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码https-github-com-lantier743865-kso）" class="headerlink" title="5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码https://github.com/lantier743865/kso）"></a>5、首先我们获取当前的activity，截下当前界面的图片，并收集收集系统版本，api，屏幕分辨率，屏幕密度，内存情况，网络情况，cpu，是否root过等等信息，并通过一个Builder模式构建出一个String。同时，将用户的使用步骤队列输出为一个String。（这部分是核心，大家可以看代码<a href="https://github.com/lantier743865/kso）" target="_blank" rel="noopener">https://github.com/lantier743865/kso）</a></h2><p>##6、关于使用步骤我们要看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package android.com.bugmonitor.base;</span><br><span class="line"></span><br><span class="line">import android.com.bugmonitor.collector.BugMonitor;</span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.view.MotionEvent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by wuxiaolong on 2018/3/9.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class BaseActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static final String TAG = &quot;BaseActivity&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onResume() &#123;</span><br><span class="line">        super.onResume();</span><br><span class="line">        BugMonitor.onResume(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPause() &#123;</span><br><span class="line">        super.onPause();</span><br><span class="line">        BugMonitor.onPause(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        BugMonitor.onDispatchTouchEvent(this,ev);</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。"><a href="#在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。" class="headerlink" title="在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。"></a>在这BaseActivity中我们记录了每个界面的进入退出，及事件分发情况。我们重点看事件这部分，因为这部分会找到对应的view的id。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onDispatchTouchEvent(Activity activity, MotionEvent event) &#123;</span><br><span class="line">       if(event.getAction() == 0) &#123;</span><br><span class="line">           this.lastX = event.getRawX();</span><br><span class="line">           this.lastY = event.getRawY();</span><br><span class="line">       &#125; else if(event.getAction() == 1) &#123;</span><br><span class="line">           float currentX = event.getRawX();</span><br><span class="line">           float currentY = event.getRawY();</span><br><span class="line">           if(this.lastX == currentX &amp;&amp; this.lastY == currentY) &#123;</span><br><span class="line">               View var5 = this.getView(activity.getWindow().getDecorView(), currentX, currentY);</span><br><span class="line">               Log.e(TAG, &quot;----&gt;&gt;var5: &quot;+var5 );</span><br><span class="line">               StepQueueHelper.enqueueStep(activity,var5);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>##其实，我们在获取到event后，可以通过当前的activity的decorView的位置算出当前是哪个view，这一点我也是从bugtags的源码看出来的，可以混淆过我看了半天才想明白。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void enqueueStep(Activity activity, View view) &#123;</span><br><span class="line">        String path  = view.getResources().getResourceName(view.getId());</span><br><span class="line">        String vName = path.substring(path.indexOf(&quot;/&quot;)+1);</span><br><span class="line">        String format = TIME_FORMATTER.format(System.currentTimeMillis());</span><br><span class="line">        stepBuilder.append(format)</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(activity.getClass().getName())</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(EVENT)</span><br><span class="line">                .append(VIEWID)</span><br><span class="line">                .append(vName)</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(TYPE)</span><br><span class="line">                .append(view.getClass().getName());</span><br><span class="line">        String s = stepBuilder.toString();</span><br><span class="line">        stepQueue.add(s);</span><br><span class="line">        stepBuilder.delete(0,stepBuilder.length());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。"><a href="#有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。" class="headerlink" title="有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。"></a>有了view我们可以通过R文件获取它在我们项目中设置的id名称，这有助于我们找到对应的发生问题的空间。代码中一系列append是为了打印出来的信息格式化更容易分辨。</h2><h2 id="6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service-在其他进程中"><a href="#6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service-在其他进程中" class="headerlink" title="6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service(在其他进程中)"></a>6、还有关键的一步时应用要挂掉了，怎么把信息传到服务端去？答案是另开一个service(在其他进程中)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(activity, UploadService.class);</span><br><span class="line">        activity.startService(intent);</span><br></pre></td></tr></table></figure><p>#关于BugMonitor关键的部分讲完了，剩下的就是代码编写和实现了。</p><p>#其中upload是一个接口，大家可以用自己的服务器规范去实现，我个人用了bmob的免费存储。大致的目录结构是这样的：<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef5539893405?w=716&amp;h=1396&amp;f=png&amp;s=176242" alt=""></p><h2 id="7、我们看下最终的结果："><a href="#7、我们看下最终的结果：" class="headerlink" title="7、我们看下最终的结果："></a>7、我们看下最终的结果：</h2><p><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553ae81098?w=2664&amp;h=552&amp;f=png&amp;s=320254" alt=""></p><p>###这是携带设备信息的堆栈信息文件<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553a8c5018?w=2730&amp;h=868&amp;f=png&amp;s=381825" alt=""></p><p>###这是用户的使用步骤文件<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553adb3187?w=2204&amp;h=372&amp;f=png&amp;s=158186" alt=""></p><p>###这是最终上传到服务端后的文件<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef553a3bd560?w=2038&amp;h=952&amp;f=png&amp;s=202924" alt=""></p><p>###这是发生crash时候的现场截屏<br><img src="https://user-gold-cdn.xitu.io/2018/3/16/1622ef55746956fe?w=1962&amp;h=1638&amp;f=png&amp;s=160631" alt=""></p><h1 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h1><ol><li>工具是为了发生某些crash之后我们尽可能的多收集现场信息</li><li>mipush和bmob是为了流程能够完善，最终我们还需要热修复来善后</li><li>代码地址：![<a href="https://github.com/lantier743865/kso" target="_blank" rel="noopener">https://github.com/lantier743865/kso</a>]</li><li>写的不好，大家请见谅，以后会继续努力。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;仿bugtags实现App线上Crash监控及问题复现&quot;&gt;&lt;a href=&quot;#仿bugtags实现App线上Crash监控及问题复现&quot; class=&quot;headerlink&quot; title=&quot;仿bugtags实现App线上Crash监控及问题复现&quot;&gt;&lt;/a&gt;仿bugt
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://yoursite.com/2018/03/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/03/01/快速排序/</id>
    <published>2018-03-01T12:15:14.000Z</published>
    <updated>2018-03-01T12:16:22.445Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序是用分治策略</span></span><br><span class="line"><span class="comment"> * 基本思想：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；</span></span><br><span class="line"><span class="comment"> *          其中一部分的所有数据都比另外一部分的所有数据都小。</span></span><br><span class="line"><span class="comment"> *          然后，再按此方法对这两部分数据分别进行快速排序，</span></span><br><span class="line"><span class="comment"> *          整个排序过程可以递归进行，以此达到整个数据变成有序序列。</span></span><br><span class="line"><span class="comment"> * 快速排序的流程：</span></span><br><span class="line"><span class="comment"> * 1、从数列中挑出一个基准值</span></span><br><span class="line"><span class="comment"> * 2、将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面（相同的数可以到任一边）；</span></span><br><span class="line"><span class="comment"> *    在这个区分退出后，该基准就处于数列的中间位置</span></span><br><span class="line"><span class="comment"> * 3、递归的把"基准前面的子数列"和"基准值后面的子数列"进行排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 快速排序的事件复杂度和稳定性</span></span><br><span class="line"><span class="comment"> *  快速排序是不稳定的算法，它不满足稳定算法的定义。</span></span><br><span class="line"><span class="comment"> *  快速排序的时间复杂度在最坏的情况下是O(N^2),平均时间复杂度是O(N*lgN)</span></span><br><span class="line"><span class="comment"> *  快速排序采用分治法进行便利，我们将它看作一颗二叉树，它要遍历的次数就是二叉树的深度，</span></span><br><span class="line"><span class="comment"> *  根据完全二叉树的定义，他的深度至少是lg(N+1)，因此，快速排序的遍历次数最少是lg(N+1)次</span></span><br><span class="line"><span class="comment"> *  二叉树的最大深度是N，因此，快速排序的便利次数最多是N次。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input 待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 数组的左边界</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 数组的右边界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] input,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> i,j,x;</span><br><span class="line">            i = left;</span><br><span class="line">            j = right;</span><br><span class="line">            x = input[i];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="comment">//从右向左找第一个小于x的数</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; x&lt;input[j]) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    input[i++] = input[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从左向右找第一个大于x的数</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; x &gt; input[i] )&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    input[j--] = input[i];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            input[i] = x;</span><br><span class="line">            <span class="comment">//递归调用</span></span><br><span class="line">            quickSort(input,left,i -<span class="number">1</span>);</span><br><span class="line">            quickSort(input,i+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] input = &#123;<span class="number">50</span>,<span class="number">30</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">234</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">873</span>&#125;;</span><br><span class="line">        quickSort(input,<span class="number">0</span>,input.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            System.out.print(input[i] +<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://yoursite.com/2018/02/26/%E6%A0%88/"/>
    <id>http://yoursite.com/2018/02/26/栈/</id>
    <published>2018-02-26T08:50:29.000Z</published>
    <updated>2018-02-26T08:51:13.736Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.regexp.internal.RE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralArrayStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] mArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralArrayStack</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(type,DEFAULT_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeneralArrayStack</span><span class="params">(Class&lt;T&gt; type, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">         mArray = (T[]) Array.newInstance(type, size);</span><br><span class="line">         count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将val添加到栈中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T val)</span></span>&#123;</span><br><span class="line">        mArray[count++] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈顶元素值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mArray[count-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈顶元素，并删除栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T ret = mArray[count - <span class="number">1</span>];</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack is Empty \n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.print("stack size() = d% \n" ,size());</span></span><br><span class="line">        <span class="keyword">int</span> i = size() -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(mArray[i]);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>双向链表</title>
    <link href="http://yoursite.com/2018/02/26/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/02/26/双向链表/</id>
    <published>2018-02-26T08:09:01.000Z</published>
    <updated>2018-02-26T08:11:38.876Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLink</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//表头</span></span><br><span class="line">    <span class="keyword">private</span> DNode&lt;T&gt; mHead;</span><br><span class="line">    <span class="comment">//节点个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCount;</span><br><span class="line">    <span class="comment">//双向链表"节点"对应的结构体</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> DNode prev;</span><br><span class="line">        <span class="keyword">public</span> DNode next;</span><br><span class="line">        <span class="keyword">public</span> T value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DNode</span><span class="params">(T value, DNode prev, DNode next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建表头，表头没有存储数据</span></span><br><span class="line">        mHead = <span class="keyword">new</span> DNode&lt;T&gt;(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        mHead.prev = mHead.next = mHead;</span><br><span class="line">        mCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回节点数目</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCount == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取第index位置的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DNode&lt;T&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= mCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正向查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mCount / <span class="number">2</span>)&#123;</span><br><span class="line">            DNode&lt;T&gt; node = mHead.next;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//反向查找</span></span><br><span class="line">        DNode&lt;T&gt; rnode = mHead.prev;</span><br><span class="line">        <span class="keyword">int</span> rindex = mCount - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rindex; i++) &#123;</span><br><span class="line">            rnode = rnode.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rnode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取index位置的节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(index).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第一个节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(<span class="number">0</span>).value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取最后一个节点的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(mCount - <span class="number">1</span>).value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点插入到第index位置之前</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</span><br><span class="line">            DNode&lt;T&gt; dNode = <span class="keyword">new</span> DNode&lt;&gt;(t, mHead, mHead.next);</span><br><span class="line">            mHead.next.prev = dNode;</span><br><span class="line">            mHead.next = dNode;</span><br><span class="line">            mCount++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先获取到当前位置的节点</span></span><br><span class="line">        DNode&lt;T&gt; inode = getNode(index);</span><br><span class="line">        <span class="comment">//创建这个节点，这个节点之后是当前位置的节点，这个节点之前是当前位置节点之前的节点</span></span><br><span class="line">        DNode&lt;T&gt; tNode = <span class="keyword">new</span> DNode&lt;&gt;(t, inode.prev, inode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下两步是因为是双向链表，所以要两边都指定</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将当前位置的节点的上一个节点的next指向要插入的节点</span></span><br><span class="line">        inode.prev.next = tNode;</span><br><span class="line">        <span class="comment">//将当前位置的节点的下一个节点指向要插入的节点</span></span><br><span class="line">        inode.next = tNode;</span><br><span class="line">        mCount++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点插入第一个 节点处</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFirst</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        insert(<span class="number">0</span>,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将节点追加到链表的末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendLast</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        DNode&lt;T&gt; tNode = <span class="keyword">new</span> DNode&lt;&gt;(t, mHead.prev, mHead);</span><br><span class="line">        mHead.prev.next = tNode;</span><br><span class="line">        mHead.prev = tNode;</span><br><span class="line">        mCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除index位置的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        DNode&lt;T&gt; node = getNode(index);</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        node = <span class="keyword">null</span>;</span><br><span class="line">        mCount--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除第一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        del(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        del(mCount - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>自我介绍</title>
    <link href="http://yoursite.com/2018/02/13/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/02/13/自我介绍/</id>
    <published>2018-02-13T15:54:24.000Z</published>
    <updated>2018-02-13T16:30:55.586Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么样的异性不考虑：</p><blockquote><ul><li>异性朋友多,常跟异性玩的</li><li>公主病，嘴比较恶毒的</li><li>夜不归宿</li><li>无诚信，承诺过的不去兑现</li><li>只享受被追的过程，不会付出不给反馈</li></ul></blockquote><p>2.我是什么样的人：</p><blockquote><ul><li>我可以坐十几个小时去跟朋友吃顿饭，然后回来上班，因为我认为值得</li><li>在不熟悉的人面前我话少，尤其女生面前我没有话题可说，熟人面前我特别逗比，喜欢开玩笑说段子，基本无拘束</li><li>我重视诚信，即使花费代价也要兑现</li><li>不喜欢争斗，好静，但也喜欢爬山，和熟人聚会</li></ul></blockquote><p>3.我的生活习惯：</p><blockquote><ul><li>喜欢旅游，港澳台、云南、成都、重庆、浙江、江苏、山东、河南、甘肃、山西、贵州等都去玩过，这方面我比较擅长</li><li>喜欢吃，有时候出去旅游就是为了尝尝各地的美食小吃，而且超级喜欢吃水果，特别是哈密瓜，经常去海底捞就是为了吃他们的哈密瓜</li><li>以前喜欢看电视剧，都市、古装、韩剧都看，特别喜欢越狱，因为他我喜欢上工程师，所以我现在也是一名工程师了，只是现在工作了，所以很少抽出时间看，放假的时候还会看</li><li>我比较挑食，吃饭经常会剩饭，所以不喜欢去别人家做客</li></ul></blockquote><p>4.我的兴趣爱好：</p><blockquote><ul><li>羽毛球、网球、足球、篮球我都在大学学过，但也就是很业余的水平</li><li>爬山，爬过泰山、华山，希望以后有机会去爬更多的山</li><li>爱看博客，技术类的喜欢上掘金和csdn，也会订阅微信公众号看。</li><li>喜欢听粤语歌曲，比如杨千嬅、谢安琪等等</li></ul></blockquote><p>5.理想异性：</p><blockquote><ul><li>有信念，能一起走完下半生</li><li>遇上挫折和问题能商量想办法，不会气急败坏</li><li>对于别人的付出能有反馈，不是一味接受</li><li>生活习惯好，能做到自律</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.什么样的异性不考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;异性朋友多,常跟异性玩的&lt;/li&gt;
&lt;li&gt;公主病，嘴比较恶毒的&lt;/li&gt;
&lt;li&gt;夜不归宿&lt;/li&gt;
&lt;li&gt;无诚信，承诺过的不去兑现&lt;/li&gt;
&lt;li&gt;只享受被追的过程，不会付出不给反馈&lt;/l
      
    
    </summary>
    
      <category term="个人" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>java面试题一</title>
    <link href="http://yoursite.com/2018/02/08/java%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/"/>
    <id>http://yoursite.com/2018/02/08/java面试题一/</id>
    <published>2018-02-08T14:34:38.000Z</published>
    <updated>2018-02-08T14:43:00.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java面试题一"><a href="#java面试题一" class="headerlink" title="java面试题一"></a>java面试题一</h1><hr><p>###来看一道面试题，大家看看结果是多少？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x ,y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        x--;</span><br><span class="line">        myMethod();</span><br><span class="line">        System.out.println(x + y++ + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        y = x++ + ++x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="先不要看答案"><a href="#先不要看答案" class="headerlink" title="先不要看答案"></a>先不要看答案</h3><p>分析过程，static代码块中的是局部变量，所以是下x，y都是0；<br>main方法中x–后，执行mythod，此时x是-1，<br>执行x++后x++仍然是-1，然后此时x是0，再执行++x，那么++x是1，<br>那么y= -1+1=0；<br>于是x是1，y是0；<br>那么system.out.println中是1+0+1=2；<br>最终结果是2.</p><p>这道题很常见，却也很容易做错，大家体会考到的知识点。</p><p>不同的类加载器分别创建的同一个类的字节码数据属于完全不同的对象，没有任何关联。<br>当运行一个程序的时候，jvm启动，运行bootstrap classloader，该classloader加载java核心api（extclassloader和appclassloader也在此时被加载），然后调用extclassloader加载扩展api，最后appclassloader加载classpath目录下定义的class，这就是一个程序最基本的加载流程。<br>类加载过程使用父类委托模式，这样有三个原因：</p><ol><li>这样可以避免重复加载。</li><li>安全因素，防止加载自定义的classloader</li><li>一些重要的方法</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java面试题一&quot;&gt;&lt;a href=&quot;#java面试题一&quot; class=&quot;headerlink&quot; title=&quot;java面试题一&quot;&gt;&lt;/a&gt;java面试题一&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;###来看一道面试题，大家看看结果是多少？&lt;br&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="java面试" scheme="http://yoursite.com/categories/java%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java面试" scheme="http://yoursite.com/tags/java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>反思自己身上的毛病</title>
    <link href="http://yoursite.com/2018/02/07/%E5%8F%8D%E6%80%9D%E8%87%AA%E5%B7%B1%E8%BA%AB%E4%B8%8A%E7%9A%84%E6%AF%9B%E7%97%85/"/>
    <id>http://yoursite.com/2018/02/07/反思自己身上的毛病/</id>
    <published>2018-02-07T02:40:10.000Z</published>
    <updated>2018-02-07T02:41:01.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反思自己身上的毛病"><a href="#反思自己身上的毛病" class="headerlink" title="反思自己身上的毛病"></a>反思自己身上的毛病</h1><hr><p>数据结构和算法一知半解，一个平常的排序和合并都手写不出来，讲到源码也是停留于皮毛，view的事件分发这种东西，也能讲个人云亦云，究其根源，说不上来。android中有很多framwork层的东西，都没有好好去看，平常工作不努力，机会来了总是抓不住。每天都期盼明天开始努力，却总是明日复明日。<br>jvm被问到就是一头雾水，锁也不知道，多线程不熟悉，新事物出现不去学习，心思总不在工作和学习上，还老爱装逼。。。。<br>  真的，人不反思不知道自己有多可恶，什么都不会还不去学习，静不下心，每天都是悔恨自己不努力，却又不停浪费时间。看了其他人的博客，才知道自己有多懒惰，只接受填鸭式的知识，很少去举一反三，问问为什么这样。</p><p>  感觉这几天真的在经历价值观的重建。希望前30年努力，不要在后30年后悔。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反思自己身上的毛病&quot;&gt;&lt;a href=&quot;#反思自己身上的毛病&quot; class=&quot;headerlink&quot; title=&quot;反思自己身上的毛病&quot;&gt;&lt;/a&gt;反思自己身上的毛病&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;数据结构和算法一知半解，一个平常的排序和合并都手写不出来，讲到源码也是停留
      
    
    </summary>
    
      <category term="反思" scheme="http://yoursite.com/categories/%E5%8F%8D%E6%80%9D/"/>
    
    
      <category term="反思" scheme="http://yoursite.com/tags/%E5%8F%8D%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>Android面试题（美团、猎户星空、作业帮）</title>
    <link href="http://yoursite.com/2018/02/05/Android%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E7%BE%8E%E5%9B%A2%E3%80%81%E7%8C%8E%E6%88%B7%E6%98%9F%E7%A9%BA%E3%80%81%E4%BD%9C%E4%B8%9A%E5%B8%AE%EF%BC%89/"/>
    <id>http://yoursite.com/2018/02/05/Android面试题（美团、猎户星空、作业帮）/</id>
    <published>2018-02-05T03:32:34.000Z</published>
    <updated>2018-02-05T03:33:42.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android面试题（美团、猎户星空、作业帮）"><a href="#Android面试题（美团、猎户星空、作业帮）" class="headerlink" title="Android面试题（美团、猎户星空、作业帮）"></a>Android面试题（美团、猎户星空、作业帮）</h1><hr><h3 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h3><blockquote><ul><li>JsBrige原理</li><li>多线程</li><li>锁</li><li>AsyncTask中Handler</li><li>算法</li><li>链表反转</li><li>两个有序链表合并</li><li>单例模式优缺点（懒加载）</li><li>工厂模式</li><li>mvp，mvc深入了解</li><li>项目架构（画图）</li><li>Handler机制</li><li>RecyclerView的缓存机制（四层），与listview相比有什么优点</li><li>内存泄漏如果不是activity，是其他对象怎么查找</li><li>性能优化</li><li>开源库原理</li><li>HashMap和HashSet区别，原理</li><li>JVM内存模型</li><li>进程和线程的区别</li><li>volatile能做什么，不能做什么，怎么实现的？</li><li>syncronized中notify在什么时候执行</li><li>equals,hashcode方法</li><li>leakcanary什么时候回收对象</li><li>recylerview布局管理器原理</li></ul></blockquote><p>###猎户星空</p><blockquote><ul><li>类锁与对象锁的区别，请列举各自使用场景</li><li>堆区与栈区分别存放什么？除了这两个区还有哪些区？作用是什么？</li><li>string是最基本的数据类型吗？可以继承吗？</li><li>子线程与主线程通信，除了Handler和AsyncTask，还有什么？</li><li>如何生成jar包？jar与aar、module的区别？</li><li>http 和https的区别</li><li>http轮询与socket长连接的区别？</li><li>简述遇到过最难以解决的问题</li><li>请用几句话简述插入排序、选择排序、堆排序实现原理</li></ul></blockquote><h3 id="作业帮"><a href="#作业帮" class="headerlink" title="作业帮"></a>作业帮</h3><blockquote><ul><li>断点续传</li><li>http协议（body等）</li><li>hashcode  equals</li><li>事件分发怎么从phonewindow传递到activity</li><li>滑动冲突的变形（下拉刷新怎么在头部消失后交给listview）</li><li>值传递与引用传递</li><li>binder机制原理（为什么可以跨进程）</li><li>动态代理</li><li>开源库网络请求原理</li><li>hashmap怎么找到链表上的元素</li><li>了解的设计模式</li><li>framwork层代码</li><li>25匹马选出最快的5匹</li><li>性能优化</li><li>静态内部类和非静态内部类区别</li><li>怎么获取另一个apk的资源文件。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android面试题（美团、猎户星空、作业帮）&quot;&gt;&lt;a href=&quot;#Android面试题（美团、猎户星空、作业帮）&quot; class=&quot;headerlink&quot; title=&quot;Android面试题（美团、猎户星空、作业帮）&quot;&gt;&lt;/a&gt;Android面试题（美团、猎户星
      
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>HashMap实现原理</title>
    <link href="http://yoursite.com/2018/01/30/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/01/30/HashMap实现原理/</id>
    <published>2018-01-30T08:32:52.000Z</published>
    <updated>2018-02-08T14:42:30.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h1><h2 id="1-HashMap的定义和构造函数"><a href="#1-HashMap的定义和构造函数" class="headerlink" title="1.  HashMap的定义和构造函数"></a>1.  HashMap的定义和构造函数</h2><h3 id="默认初始容量-必须是2的幂"><a href="#默认初始容量-必须是2的幂" class="headerlink" title="默认初始容量-必须是2的幂"></a>默认初始容量-必须是2的幂</h3><h3 id="DEFAULT-INITIAL-CAPACITY-默认的初始容量为16"><a href="#DEFAULT-INITIAL-CAPACITY-默认的初始容量为16" class="headerlink" title="DEFAULT_INITIAL_CAPACITY:默认的初始容量为16"></a>DEFAULT_INITIAL_CAPACITY:默认的初始容量为16</h3><h3 id="这个要注意的是16是eclipse中的jdk，而android-studio中的25版本的java-util包下的厨师容量为4；"><a href="#这个要注意的是16是eclipse中的jdk，而android-studio中的25版本的java-util包下的厨师容量为4；" class="headerlink" title="这个要注意的是16是eclipse中的jdk，而android studio中的25版本的java.util包下的厨师容量为4；"></a>这个要注意的是16是eclipse中的jdk，而android studio中的25版本的java.util包下的厨师容量为4；</h3><p><img src="http://opq81riyh.bkt.clouddn.com/initcability.png" alt=""></p><h3 id="如果指定一个更大值"><a href="#如果指定一个更大值" class="headerlink" title="如果指定一个更大值"></a>如果指定一个更大值</h3><h3 id="MAXIMUM-CAPACITY-最大的容量为-2-30"><a href="#MAXIMUM-CAPACITY-最大的容量为-2-30" class="headerlink" title="MAXIMUM_CAPACITY:最大的容量为 2 ^ 30"></a>MAXIMUM_CAPACITY:最大的容量为 2 ^ 30</h3><h3 id="默认的加载因子为-0-75f"><a href="#默认的加载因子为-0-75f" class="headerlink" title="默认的加载因子为 0.75f"></a>默认的加载因子为 0.75f</h3><h3 id="Entry类型的数组，HashMap用这个来维护内部的数据结构，它的长度由容量决定"><a href="#Entry类型的数组，HashMap用这个来维护内部的数据结构，它的长度由容量决定" class="headerlink" title="Entry类型的数组，HashMap用这个来维护内部的数据结构，它的长度由容量决定"></a>Entry类型的数组，HashMap用这个来维护内部的数据结构，它的长度由容量决定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">     * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment">     * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment">     * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line">    <span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line">    <span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line">    <span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure><h3 id="容量：是哈希表中桶的数量，初始容量只是哈希表在创建时的容量，实际上就是table的容量"><a href="#容量：是哈希表中桶的数量，初始容量只是哈希表在创建时的容量，实际上就是table的容量" class="headerlink" title="容量：是哈希表中桶的数量，初始容量只是哈希表在创建时的容量，实际上就是table的容量"></a>容量：是哈希表中桶的数量，初始容量只是哈希表在创建时的容量，实际上就是table的容量</h3><h3 id="加载因子：是哈希表在其容量自动增加之前可以达到多满的一种尺度。它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之越小。对于使用链表法的散列表来说，查找一个元素的平均时间是O（1-a），因此如果负载因子越大，对空间的利用更充分，然后后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0-75，一半情况下我们是无需修改的。"><a href="#加载因子：是哈希表在其容量自动增加之前可以达到多满的一种尺度。它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之越小。对于使用链表法的散列表来说，查找一个元素的平均时间是O（1-a），因此如果负载因子越大，对空间的利用更充分，然后后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0-75，一半情况下我们是无需修改的。" class="headerlink" title="加载因子：是哈希表在其容量自动增加之前可以达到多满的一种尺度。它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之越小。对于使用链表法的散列表来说，查找一个元素的平均时间是O（1+a），因此如果负载因子越大，对空间的利用更充分，然后后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一半情况下我们是无需修改的。"></a>加载因子：是哈希表在其容量自动增加之前可以达到多满的一种尺度。它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之越小。对于使用链表法的散列表来说，查找一个元素的平均时间是O（1+a），因此如果负载因子越大，对空间的利用更充分，然后后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一半情况下我们是无需修改的。</h3><h2 id="2-HashMap的数据结构"><a href="#2-HashMap的数据结构" class="headerlink" title="2.  HashMap的数据结构"></a>2.  HashMap的数据结构</h2><h3 id="HashMap是一个“链表散列”，HashMap底层还是数组，只是数组的每一项都是一条链。"><a href="#HashMap是一个“链表散列”，HashMap底层还是数组，只是数组的每一项都是一条链。" class="headerlink" title="HashMap是一个“链表散列”，HashMap底层还是数组，只是数组的每一项都是一条链。"></a>HashMap是一个“链表散列”，HashMap底层还是数组，只是数组的每一项都是一条链。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//容量不能小于0</span></span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                             initialCapacity);</span><br><span class="line">      <span class="comment">//容量不能超出最大容量</span></span><br><span class="line">      <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">          initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">      <span class="comment">//加载因子不能&lt;0 或者 为非数字</span></span><br><span class="line">      <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                             loadFactor);</span><br><span class="line">      <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">      <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Node是HashMap的一个内部类，它也是维护着一个key-value映射关系，除了key和value，还有next引用（该引用指向当前table位置的链表），hash值（用来确定每一个Node链表在table中位置）"><a href="#Node是HashMap的一个内部类，它也是维护着一个key-value映射关系，除了key和value，还有next引用（该引用指向当前table位置的链表），hash值（用来确定每一个Node链表在table中位置）" class="headerlink" title="Node是HashMap的一个内部类，它也是维护着一个key-value映射关系，除了key和value，还有next引用（该引用指向当前table位置的链表），hash值（用来确定每一个Node链表在table中位置）"></a>Node是HashMap的一个内部类，它也是维护着一个key-value映射关系，除了key和value，还有next引用（该引用指向当前table位置的链表），hash值（用来确定每一个Node链表在table中位置）</h3><h2 id="3-HashMap的存储实现put-K-V"><a href="#3-HashMap的存储实现put-K-V" class="headerlink" title="3.  HashMap的存储实现put(K,V)"></a>3.  HashMap的存储实现put(K,V)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果key为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">            <span class="comment">//计算key的hash值</span></span><br><span class="line">        <span class="keyword">int</span> hash = sun.misc.Hashing.singleWordWangJenkinsHash(key);</span><br><span class="line">        <span class="comment">//计算该hash值在table中的下标</span></span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="comment">//对table[i]进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (HashMapEntry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="comment">//判断该条链上是否有hash值相同的（key相同）</span></span><br><span class="line">            <span class="comment">//若存在相同，则直接覆盖value，返回旧value。</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改次数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//把当前key，value添加到table[i]的链表中</span></span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="从上面的我们可以看到两点："><a href="#从上面的我们可以看到两点：" class="headerlink" title="从上面的我们可以看到两点："></a>从上面的我们可以看到两点：</h3><h3 id="1-putForNullKey-value-看出如果key为null，则调用putForNullKey-value-，这就是为什么HashMap可以用null作为键的原因，下面详细看看这个方法："><a href="#1-putForNullKey-value-看出如果key为null，则调用putForNullKey-value-，这就是为什么HashMap可以用null作为键的原因，下面详细看看这个方法：" class="headerlink" title="1. putForNullKey(value)看出如果key为null，则调用putForNullKey(value)，这就是为什么HashMap可以用null作为键的原因，下面详细看看这个方法："></a>1. putForNullKey(value)看出如果key为null，则调用putForNullKey(value)，这就是为什么HashMap可以用null作为键的原因，下面详细看看这个方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (HashMapEntry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="comment">//查找链表中是否有null键</span></span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        如果找不到，则把<span class="keyword">null</span>键插入</span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="然后我们看看addEntry方法做了什么："><a href="#然后我们看看addEntry方法做了什么：" class="headerlink" title="然后我们看看addEntry方法做了什么："></a>然后我们看看addEntry方法做了什么：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">            <span class="comment">//着一步就是对key为null的处理，如果key为null，hash值为0，          //  也就是会插入到哈希表的表头table[0]的位置</span></span><br><span class="line">            hash = (<span class="keyword">null</span> != key) ? sun.misc.Hashing.singleWordWangJenkinsHash(key) : <span class="number">0</span>;</span><br><span class="line">            bucketIndex = indexFor(hash, table.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        createEntry(hash, key, value, bucketIndex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-因为链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回：这就是为什么HashMap不能有两个key的原因。"><a href="#2-因为链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回：这就是为什么HashMap不能有两个key的原因。" class="headerlink" title="2. 因为链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回：这就是为什么HashMap不能有两个key的原因。"></a>2. 因为链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回：这就是为什么HashMap不能有两个key的原因。</h3><h3 id="对于hash操作，最重要的也是最困难的就是如何通过key确定hash的位置，我们看看HashMap的做法："><a href="#对于hash操作，最重要的也是最困难的就是如何通过key确定hash的位置，我们看看HashMap的做法：" class="headerlink" title="对于hash操作，最重要的也是最困难的就是如何通过key确定hash的位置，我们看看HashMap的做法："></a>对于hash操作，最重要的也是最困难的就是如何通过key确定hash的位置，我们看看HashMap的做法：</h3><h3 id="首先求得key的hash值：hash-key-然后通过indexFor方法算出该hash值在table中的下标"><a href="#首先求得key的hash值：hash-key-然后通过indexFor方法算出该hash值在table中的下标" class="headerlink" title="首先求得key的hash值：hash(key),然后通过indexFor方法算出该hash值在table中的下标"></a>首先求得key的hash值：hash(key),然后通过indexFor方法算出该hash值在table中的下标</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="对于HashMap的table而言，数据分布需要均匀（最好每一项都只有一个元素，这样就可以直接找到），不能太紧也不能太松，太紧会导致查询速度慢，太松则浪费空间。计算hash值后，怎么才能保证table元素分布均匀呢？我们会想到取模，但是由于取模的消耗太大，而HashMap是通过-amp-运算符（按位与操作）来实现的：h-amp-（length-1）"><a href="#对于HashMap的table而言，数据分布需要均匀（最好每一项都只有一个元素，这样就可以直接找到），不能太紧也不能太松，太紧会导致查询速度慢，太松则浪费空间。计算hash值后，怎么才能保证table元素分布均匀呢？我们会想到取模，但是由于取模的消耗太大，而HashMap是通过-amp-运算符（按位与操作）来实现的：h-amp-（length-1）" class="headerlink" title="对于HashMap的table而言，数据分布需要均匀（最好每一项都只有一个元素，这样就可以直接找到），不能太紧也不能太松，太紧会导致查询速度慢，太松则浪费空间。计算hash值后，怎么才能保证table元素分布均匀呢？我们会想到取模，但是由于取模的消耗太大，而HashMap是通过&amp;运算符（按位与操作）来实现的：h&amp;（length-1）"></a>对于HashMap的table而言，数据分布需要均匀（最好每一项都只有一个元素，这样就可以直接找到），不能太紧也不能太松，太紧会导致查询速度慢，太松则浪费空间。计算hash值后，怎么才能保证table元素分布均匀呢？我们会想到取模，但是由于取模的消耗太大，而HashMap是通过&amp;运算符（按位与操作）来实现的：h&amp;（length-1）</h3><h3 id="在构造函数中存在：capacity-lt-lt-1-这样做总是能够保证HashMap的底层数组长度为2的次方。当length为2的n次方时，h-amp-（length-1）就相当于对length取模，而且速度比直接取模快得多，这是zhashMap在速度上的一个优化。"><a href="#在构造函数中存在：capacity-lt-lt-1-这样做总是能够保证HashMap的底层数组长度为2的次方。当length为2的n次方时，h-amp-（length-1）就相当于对length取模，而且速度比直接取模快得多，这是zhashMap在速度上的一个优化。" class="headerlink" title="在构造函数中存在：capacity&lt;&lt;=1,这样做总是能够保证HashMap的底层数组长度为2的次方。当length为2的n次方时，h&amp;（length-1）就相当于对length取模，而且速度比直接取模快得多，这是zhashMap在速度上的一个优化。"></a>在构造函数中存在：capacity&lt;&lt;=1,这样做总是能够保证HashMap的底层数组长度为2的次方。当length为2的n次方时，h&amp;（length-1）就相当于对length取模，而且速度比直接取模快得多，这是zhashMap在速度上的一个优化。</h3><h3 id="点那个length-2-n时，不同-的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布比较均匀，查询速度也较快。"><a href="#点那个length-2-n时，不同-的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布比较均匀，查询速度也较快。" class="headerlink" title="点那个length = 2^n时，不同 的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布比较均匀，查询速度也较快。"></a>点那个length = 2^n时，不同 的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布比较均匀，查询速度也较快。</h3><h3 id="计算了hash值后，如何把key-value插入该索引的链表中："><a href="#计算了hash值后，如何把key-value插入该索引的链表中：" class="headerlink" title="计算了hash值后，如何把key-value插入该索引的链表中："></a>计算了hash值后，如何把key-value插入该索引的链表中：</h3><h3 id="调用addEntry方法："><a href="#调用addEntry方法：" class="headerlink" title="调用addEntry方法："></a>调用addEntry方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  如果容量大于极限容量，将要进行重建内部数据结构操作，之后的容量是原来的两倍，并且重新设置hash值和hash值在table中的索引值</span></span><br><span class="line">        <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">            hash = (<span class="keyword">null</span> != key) ? sun.misc.Hashing.singleWordWangJenkinsHash(key) : <span class="number">0</span>;</span><br><span class="line">            bucketIndex = indexFor(hash, table.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//真正创建Entry节点的操作</span></span><br><span class="line">        createEntry(hash, key, value, bucketIndex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">        HashMapEntry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> HashMapEntry&lt;&gt;(hash, key, value, e);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="首先取得bucketIndex位置的Entry头节点，把该节点插入到链表汇总的头部，，该节点的next指针指向原来的头节点。"><a href="#首先取得bucketIndex位置的Entry头节点，把该节点插入到链表汇总的头部，，该节点的next指针指向原来的头节点。" class="headerlink" title="首先取得bucketIndex位置的Entry头节点，把该节点插入到链表汇总的头部，，该节点的next指针指向原来的头节点。"></a>首先取得bucketIndex位置的Entry头节点，把该节点插入到链表汇总的头部，，该节点的next指针指向原来的头节点。</h3><h3 id="这里有两点注意："><a href="#这里有两点注意：" class="headerlink" title="这里有两点注意："></a>这里有两点注意：</h3><h4 id="一-链的产生"><a href="#一-链的产生" class="headerlink" title="一.链的产生"></a>一.链的产生</h4><p> 系统总是将新的Entry对象添加到bugketIndex处。如果bucketIndex处应有了对象，那么新添加的Entry对象将指向原有的Entry对象，形成一条Entry链，但是若bucketIndex处没有Entry对象，也就是e==null，那么新添加的Entry对象指向为null，也就不会产生Entry链了。</p><h4 id="二-扩容问题"><a href="#二-扩容问题" class="headerlink" title="二. 扩容问题"></a>二. 扩容问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="梳理下存储的步骤："><a href="#梳理下存储的步骤：" class="headerlink" title="梳理下存储的步骤："></a>梳理下存储的步骤：</h3><blockquote><ul><li>1.传入key和value，判断key是否为null，如果为null，则调用putForNullkey，以null ️作为key存储到哈希表中；</li><li>2.计算key的hash值，根据hash值搜索在哈希表table中的索引位置，若当前索引位置不为null，则对该位置的Entry链表进行遍历，如果链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回；</li><li>3.否则调用addEntry，用key-value创建一个新的节点，并把该节点插入到所以对应的链表的头部<h2 id="4-HashMap的读取实现get-key-value"><a href="#4-HashMap的读取实现get-key-value" class="headerlink" title="4.  HashMap的读取实现get(key,value)"></a>4.  HashMap的读取实现get(key,value)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果key为null，求null键</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        <span class="comment">//用该key求得entry</span></span><br><span class="line">        Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : sun.misc.Hashing.singleWordWangJenkinsHash(key);</span><br><span class="line">        <span class="keyword">for</span> (HashMapEntry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="读取的步骤比较简单，调用hash-key-求得hash值，然后调用indexFor-hash-求得hash值对应的table的索引位置，然后遍历索引位置的链表，如果存在key，则把key对应的Entry返回，否则返回null。"><a href="#读取的步骤比较简单，调用hash-key-求得hash值，然后调用indexFor-hash-求得hash值对应的table的索引位置，然后遍历索引位置的链表，如果存在key，则把key对应的Entry返回，否则返回null。" class="headerlink" title="读取的步骤比较简单，调用hash(key)求得hash值，然后调用indexFor(hash)求得hash值对应的table的索引位置，然后遍历索引位置的链表，如果存在key，则把key对应的Entry返回，否则返回null。"></a>读取的步骤比较简单，调用hash(key)求得hash值，然后调用indexFor(hash)求得hash值对应的table的索引位置，然后遍历索引位置的链表，如果存在key，则把key对应的Entry返回，否则返回null。</h3><h2 id="5-HashMap键的遍历-keyset"><a href="#5-HashMap键的遍历-keyset" class="headerlink" title="5.  HashMap键的遍历,keyset()"></a>5.  HashMap键的遍历,keyset()</h2><p>HashMap遍历的核心代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        HashMapEntry&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;   <span class="comment">// For fast-fail</span></span><br><span class="line">        <span class="keyword">int</span> index;              <span class="comment">// current slot</span></span><br><span class="line">        HashMapEntry&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">        <span class="comment">//当调用keyset().iterator()时，调用此代码</span></span><br><span class="line">        HashIterator() &#123;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">                HashMapEntry[] t = table;</span><br><span class="line">                <span class="comment">//从哈希表数组从上到下，查找第一个不为null的节点，并把next引用指向该节点</span></span><br><span class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当调用next时，会调用此代码</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            HashMapEntry&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="comment">//如果当前节点的下一个节点为null，从节点出发往下查找哈希表，找到第一个不为null的节点</span></span><br><span class="line">            <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                HashMapEntry[] t = table;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                    ;</span><br><span class="line">            &#125;</span><br><span class="line">            current = e;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            Object k = current.key;</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">            HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="从这里可以看出，HashMap遍历时，按哈希表的每一个索引的链表从上往下遍历，由于HashMap的存储规则，最晚添加的节点都有可能在第一个索引的链表中，这就早晨改了H啊是M阿婆的遍历是无序的。"><a href="#从这里可以看出，HashMap遍历时，按哈希表的每一个索引的链表从上往下遍历，由于HashMap的存储规则，最晚添加的节点都有可能在第一个索引的链表中，这就早晨改了H啊是M阿婆的遍历是无序的。" class="headerlink" title="从这里可以看出，HashMap遍历时，按哈希表的每一个索引的链表从上往下遍历，由于HashMap的存储规则，最晚添加的节点都有可能在第一个索引的链表中，这就早晨改了H啊是M阿婆的遍历是无序的。"></a>从这里可以看出，HashMap遍历时，按哈希表的每一个索引的链表从上往下遍历，由于HashMap的存储规则，最晚添加的节点都有可能在第一个索引的链表中，这就早晨改了H啊是M阿婆的遍历是无序的。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HashMap实现原理&quot;&gt;&lt;a href=&quot;#HashMap实现原理&quot; class=&quot;headerlink&quot; title=&quot;HashMap实现原理&quot;&gt;&lt;/a&gt;HashMap实现原理&lt;/h1&gt;&lt;h2 id=&quot;1-HashMap的定义和构造函数&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="java源码解析" scheme="http://yoursite.com/categories/java%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="java源码解析" scheme="http://yoursite.com/tags/java%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android动画讲解</title>
    <link href="http://yoursite.com/2018/01/29/Android%E5%8A%A8%E7%94%BB%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/01/29/Android动画讲解/</id>
    <published>2018-01-29T03:43:21.000Z</published>
    <updated>2018-01-29T06:20:34.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android动画讲解"><a href="#Android动画讲解" class="headerlink" title="#Android动画讲解"></a>#Android动画讲解</h2><p><img src="http://opq81riyh.bkt.clouddn.com/%E5%8A%A8%E7%94%BB.png" alt=""><br><img src="http://opq81riyh.bkt.clouddn.com/%E5%8A%A8%E7%94%BB.mindnode.zip" alt="333"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android动画讲解&quot;&gt;&lt;a href=&quot;#Android动画讲解&quot; class=&quot;headerlink&quot; title=&quot;#Android动画讲解&quot;&gt;&lt;/a&gt;#Android动画讲解&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://opq81riyh.bkt.c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于8.0源码解析：bindService 启动过程</title>
    <link href="http://yoursite.com/2018/01/25/%E5%9F%BA%E4%BA%8E8-0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9AbindService-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/25/基于8-0源码解析：bindService-启动过程/</id>
    <published>2018-01-25T03:44:40.000Z</published>
    <updated>2018-01-25T03:46:03.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于8-0源码解析：bindService-启动过程"><a href="#基于8-0源码解析：bindService-启动过程" class="headerlink" title="基于8.0源码解析：bindService 启动过程"></a>基于8.0源码解析：bindService 启动过程</h1><p>欢迎关注我的公众号：<br><img src="http://opq81riyh.bkt.clouddn.com/qrcode_for_gh_1d2b09f3edbf_258%20%282%29.jpg" alt=""></p><hr><p><img src="http://opq81riyh.bkt.clouddn.com/bindService%20%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png" alt=""></p><p>调用bindService 后会到ContextWrapper中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mBase.bindService(service, conn, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应为ContextWrapper是继承自context，而context的实现是contextImpl，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="number">1538</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1539</span>            <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line"><span class="number">1540</span>        warnIfCallingFromSystemProcess();</span><br><span class="line"><span class="number">1541</span>        <span class="keyword">return</span> bindServiceCommon(service, conn, flags, mMainThread.getHandler(),</span><br><span class="line"><span class="number">1542</span>                Process.myUserHandle());</span><br><span class="line"><span class="number">1543</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法又调用了bindServiceCommon，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bindServiceCommon</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags, Handler</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1582</span>            handler, UserHandle user)</span> </span>&#123;</span><br><span class="line"><span class="number">1583</span>        <span class="comment">// Keep this in sync with DevicePolicyManager.bindDeviceAdminServiceAsUser.</span></span><br><span class="line"><span class="number">1584</span>        IServiceConnection sd;</span><br><span class="line"><span class="number">1585</span>        <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1586</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"connection is null"</span>);</span><br><span class="line"><span class="number">1587</span>        &#125;</span><br><span class="line"><span class="number">1588</span>        <span class="keyword">if</span> (mPackageInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1589</span>            sd = mPackageInfo.getServiceDispatcher(conn, getOuterContext(), handler, flags);</span><br><span class="line"><span class="number">1590</span>        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1591</span>            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not supported in system context"</span>);</span><br><span class="line"><span class="number">1592</span>        &#125;</span><br><span class="line"><span class="number">1593</span>        validateServiceIntent(service);</span><br><span class="line"><span class="number">1594</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1595</span>            IBinder token = getActivityToken();</span><br><span class="line"><span class="number">1596</span>            <span class="keyword">if</span> (token == <span class="keyword">null</span> &amp;&amp; (flags&amp;BIND_AUTO_CREATE) == <span class="number">0</span> &amp;&amp; mPackageInfo != <span class="keyword">null</span></span><br><span class="line"><span class="number">1597</span>                    &amp;&amp; mPackageInfo.getApplicationInfo().targetSdkVersion</span><br><span class="line"><span class="number">1598</span>                    &lt; android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</span><br><span class="line"><span class="number">1599</span>                flags |= BIND_WAIVE_PRIORITY;</span><br><span class="line"><span class="number">1600</span>            &#125;</span><br><span class="line"><span class="number">1601</span>            service.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">1602</span>            <span class="keyword">int</span> res = ActivityManager.getService().bindService(</span><br><span class="line"><span class="number">1603</span>                mMainThread.getApplicationThread(), getActivityToken(), service,</span><br><span class="line"><span class="number">1604</span>                service.resolveTypeIfNeeded(getContentResolver()),</span><br><span class="line"><span class="number">1605</span>                sd, flags, getOpPackageName(), user.getIdentifier());</span><br><span class="line"><span class="number">1606</span>            <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1607</span>                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line"><span class="number">1608</span>                        <span class="string">"Not allowed to bind to service "</span> + service);</span><br><span class="line"><span class="number">1609</span>            &#125;</span><br><span class="line"><span class="number">1610</span>            <span class="keyword">return</span> res != <span class="number">0</span>;</span><br><span class="line"><span class="number">1611</span>        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">1612</span>            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line"><span class="number">1613</span>        &#125;</span><br><span class="line"><span class="number">1614</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>ActivityManager.getService().bindService会通过Binder机制调用到ActivityManagerService中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bindService</span><span class="params">(IApplicationThread caller, IBinder token, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">18276</span>            String resolvedType, IServiceConnection connection, <span class="keyword">int</span> flags, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">18277</span>            <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">18278</span>        enforceNotIsolatedCaller(<span class="string">"bindService"</span>);</span><br><span class="line"><span class="number">18279</span></span><br><span class="line"><span class="number">18280</span>        <span class="comment">// Refuse possible leaked file descriptors</span></span><br><span class="line"><span class="number">18281</span>        <span class="keyword">if</span> (service != <span class="keyword">null</span> &amp;&amp; service.hasFileDescriptors() == <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="number">18282</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</span><br><span class="line"><span class="number">18283</span>        &#125;</span><br><span class="line"><span class="number">18284</span></span><br><span class="line"><span class="number">18285</span>        <span class="keyword">if</span> (callingPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">18286</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"callingPackage cannot be null"</span>);</span><br><span class="line"><span class="number">18287</span>        &#125;</span><br><span class="line"><span class="number">18288</span></span><br><span class="line"><span class="number">18289</span>        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="number">18290</span>            <span class="keyword">return</span> mServices.bindServiceLocked(caller, token, service,</span><br><span class="line"><span class="number">18291</span>                    resolvedType, connection, flags, callingPackage, userId);</span><br><span class="line"><span class="number">18292</span>        &#125;</span><br><span class="line"><span class="number">18293</span>    &#125;</span><br><span class="line"><span class="number">18294</span></span><br></pre></td></tr></table></figure><p>mServices.bindServiceLocked会调用到ActiveServices中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bindServiceLocked</span><span class="params">(IApplicationThread caller, IBinder token, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1229</span>            String resolvedType, <span class="keyword">final</span> IServiceConnection connection, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1230</span>            String callingPackage, <span class="keyword">final</span> <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">1231</span>        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"bindService: "</span> + service</span><br><span class="line"><span class="number">1232</span>                + <span class="string">" type="</span> + resolvedType + <span class="string">" conn="</span> + connection.asBinder()</span><br><span class="line"><span class="number">1233</span>                + <span class="string">" flags=0x"</span> + Integer.toHexString(flags));</span><br><span class="line"><span class="number">1234</span>        <span class="keyword">final</span> ProcessRecord callerApp = mAm.getRecordForAppLocked(caller);</span><br><span class="line"><span class="number">1235</span>        <span class="keyword">if</span> (callerApp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1236</span>            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line"><span class="number">1237</span>                    <span class="string">"Unable to find app for caller "</span> + caller</span><br><span class="line"><span class="number">1238</span>                    + <span class="string">" (pid="</span> + Binder.getCallingPid()</span><br><span class="line"><span class="number">1239</span>                    + <span class="string">") when binding service "</span> + service);</span><br><span class="line"><span class="number">1240</span>        &#125;</span><br><span class="line"><span class="number">1241</span></span><br><span class="line"><span class="number">1242</span>        ActivityRecord activity = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1243</span>        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1244</span>            activity = ActivityRecord.isInStackLocked(token);</span><br><span class="line"><span class="number">1245</span>            <span class="keyword">if</span> (activity == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1246</span>                Slog.w(TAG, <span class="string">"Binding with unknown activity: "</span> + token);</span><br><span class="line"><span class="number">1247</span>                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">1248</span>            &#125;</span><br><span class="line"><span class="number">1249</span>        &#125;</span><br><span class="line"><span class="number">1250</span></span><br><span class="line"><span class="number">1251</span>        <span class="keyword">int</span> clientLabel = <span class="number">0</span>;</span><br><span class="line"><span class="number">1252</span>        PendingIntent clientIntent = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1253</span>        <span class="keyword">final</span> <span class="keyword">boolean</span> isCallerSystem = callerApp.info.uid == Process.SYSTEM_UID;</span><br><span class="line"><span class="number">1254</span></span><br><span class="line"><span class="number">1255</span>        <span class="keyword">if</span> (isCallerSystem) &#123;</span><br><span class="line"><span class="number">1256</span>            <span class="comment">// Hacky kind of thing -- allow system stuff to tell us</span></span><br><span class="line"><span class="number">1257</span>            <span class="comment">// what they are, so we can report this elsewhere for</span></span><br><span class="line"><span class="number">1258</span>            <span class="comment">// others to know why certain services are running.</span></span><br><span class="line"><span class="number">1259</span>            service.setDefusable(<span class="keyword">true</span>);</span><br><span class="line"><span class="number">1260</span>            clientIntent = service.getParcelableExtra(Intent.EXTRA_CLIENT_INTENT);</span><br><span class="line"><span class="number">1261</span>            <span class="keyword">if</span> (clientIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1262</span>                clientLabel = service.getIntExtra(Intent.EXTRA_CLIENT_LABEL, <span class="number">0</span>);</span><br><span class="line"><span class="number">1263</span>                <span class="keyword">if</span> (clientLabel != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1264</span>                    <span class="comment">// There are no useful extras in the intent, trash them.</span></span><br><span class="line"><span class="number">1265</span>                    <span class="comment">// System code calling with this stuff just needs to know</span></span><br><span class="line"><span class="number">1266</span>                    <span class="comment">// this will happen.</span></span><br><span class="line"><span class="number">1267</span>                    service = service.cloneFilter();</span><br><span class="line"><span class="number">1268</span>                &#125;</span><br><span class="line"><span class="number">1269</span>            &#125;</span><br><span class="line"><span class="number">1270</span>        &#125;</span><br><span class="line"><span class="number">1271</span></span><br><span class="line"><span class="number">1272</span>        <span class="keyword">if</span> ((flags&amp;Context.BIND_TREAT_LIKE_ACTIVITY) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1273</span>            mAm.enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,</span><br><span class="line"><span class="number">1274</span>                    <span class="string">"BIND_TREAT_LIKE_ACTIVITY"</span>);</span><br><span class="line"><span class="number">1275</span>        &#125;</span><br><span class="line"><span class="number">1276</span></span><br><span class="line"><span class="number">1277</span>        <span class="keyword">if</span> ((flags &amp; Context.BIND_ALLOW_WHITELIST_MANAGEMENT) != <span class="number">0</span> &amp;&amp; !isCallerSystem) &#123;</span><br><span class="line"><span class="number">1278</span>            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line"><span class="number">1279</span>                    <span class="string">"Non-system caller "</span> + caller + <span class="string">" (pid="</span> + Binder.getCallingPid()</span><br><span class="line"><span class="number">1280</span>                    + <span class="string">") set BIND_ALLOW_WHITELIST_MANAGEMENT when binding service "</span> + service);</span><br><span class="line"><span class="number">1281</span>        &#125;</span><br><span class="line"><span class="number">1282</span></span><br><span class="line"><span class="number">1283</span>        <span class="keyword">final</span> <span class="keyword">boolean</span> callerFg = callerApp.setSchedGroup != ProcessList.SCHED_GROUP_BACKGROUND;</span><br><span class="line"><span class="number">1284</span>        <span class="keyword">final</span> <span class="keyword">boolean</span> isBindExternal = (flags &amp; Context.BIND_EXTERNAL_SERVICE) != <span class="number">0</span>;</span><br><span class="line"><span class="number">1285</span></span><br><span class="line"><span class="number">1286</span>        ServiceLookupResult res =</span><br><span class="line"><span class="number">1287</span>            retrieveServiceLocked(service, resolvedType, callingPackage, Binder.getCallingPid(),</span><br><span class="line"><span class="number">1288</span>                    Binder.getCallingUid(), userId, <span class="keyword">true</span>, callerFg, isBindExternal);</span><br><span class="line"><span class="number">1289</span>        <span class="keyword">if</span> (res == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1290</span>            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">1291</span>        &#125;</span><br><span class="line"><span class="number">1292</span>        <span class="keyword">if</span> (res.record == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1293</span>            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="number">1294</span>        &#125;</span><br><span class="line"><span class="number">1295</span>        ServiceRecord s = res.record;</span><br><span class="line"><span class="number">1296</span></span><br><span class="line"><span class="number">1297</span>        <span class="keyword">boolean</span> permissionsReviewRequired = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1298</span></span><br><span class="line"><span class="number">1299</span>        <span class="comment">// If permissions need a review before any of the app components can run,</span></span><br><span class="line"><span class="number">1300</span>        <span class="comment">// we schedule binding to the service but do not start its process, then</span></span><br><span class="line"><span class="number">1301</span>        <span class="comment">// we launch a review activity to which is passed a callback to invoke</span></span><br><span class="line"><span class="number">1302</span>        <span class="comment">// when done to start the bound service's process to completing the binding.</span></span><br><span class="line"><span class="number">1303</span>        <span class="keyword">if</span> (mAm.mPermissionReviewRequired) &#123;</span><br><span class="line"><span class="number">1304</span>            <span class="keyword">if</span> (mAm.getPackageManagerInternalLocked().isPermissionsReviewRequired(</span><br><span class="line"><span class="number">1305</span>                    s.packageName, s.userId)) &#123;</span><br><span class="line"><span class="number">1306</span></span><br><span class="line"><span class="number">1307</span>                permissionsReviewRequired = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1308</span></span><br><span class="line"><span class="number">1309</span>                <span class="comment">// Show a permission review UI only for binding from a foreground app</span></span><br><span class="line"><span class="number">1310</span>                <span class="keyword">if</span> (!callerFg) &#123;</span><br><span class="line"><span class="number">1311</span>                    Slog.w(TAG, <span class="string">"u"</span> + s.userId + <span class="string">" Binding to a service in package"</span></span><br><span class="line"><span class="number">1312</span>                            + s.packageName + <span class="string">" requires a permissions review"</span>);</span><br><span class="line"><span class="number">1313</span>                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">1314</span>                &#125;</span><br><span class="line"><span class="number">1315</span></span><br><span class="line"><span class="number">1316</span>                <span class="keyword">final</span> ServiceRecord serviceRecord = s;</span><br><span class="line"><span class="number">1317</span>                <span class="keyword">final</span> Intent serviceIntent = service;</span><br><span class="line"><span class="number">1318</span></span><br><span class="line"><span class="number">1319</span>                RemoteCallback callback = <span class="keyword">new</span> RemoteCallback(</span><br><span class="line"><span class="number">1320</span>                        <span class="keyword">new</span> RemoteCallback.OnResultListener() &#123;</span><br><span class="line"><span class="number">1321</span>                    <span class="meta">@Override</span></span><br><span class="line"><span class="number">1322</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Bundle result)</span> </span>&#123;</span><br><span class="line"><span class="number">1323</span>                        <span class="keyword">synchronized</span>(mAm) &#123;</span><br><span class="line"><span class="number">1324</span>                            <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">1325</span>                            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1326</span>                                <span class="keyword">if</span> (!mPendingServices.contains(serviceRecord)) &#123;</span><br><span class="line"><span class="number">1327</span>                                    <span class="keyword">return</span>;</span><br><span class="line"><span class="number">1328</span>                                &#125;</span><br><span class="line"><span class="number">1329</span>                                <span class="comment">// If there is still a pending record, then the service</span></span><br><span class="line"><span class="number">1330</span>                                <span class="comment">// binding request is still valid, so hook them up. We</span></span><br><span class="line"><span class="number">1331</span>                                <span class="comment">// proceed only if the caller cleared the review requirement</span></span><br><span class="line"><span class="number">1332</span>                                <span class="comment">// otherwise we unbind because the user didn't approve.</span></span><br><span class="line"><span class="number">1333</span>                                <span class="keyword">if</span> (!mAm.getPackageManagerInternalLocked()</span><br><span class="line"><span class="number">1334</span>                                        .isPermissionsReviewRequired(</span><br><span class="line"><span class="number">1335</span>                                                serviceRecord.packageName,</span><br><span class="line"><span class="number">1336</span>                                                serviceRecord.userId)) &#123;</span><br><span class="line"><span class="number">1337</span>                                    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1338</span>                                        bringUpServiceLocked(serviceRecord,</span><br><span class="line"><span class="number">1339</span>                                                serviceIntent.getFlags(),</span><br><span class="line"><span class="number">1340</span>                                                callerFg, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1341</span>                                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">1342</span>                                        <span class="comment">/* ignore - local call */</span></span><br><span class="line"><span class="number">1343</span>                                    &#125;</span><br><span class="line"><span class="number">1344</span>                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1345</span>                                    unbindServiceLocked(connection);</span><br><span class="line"><span class="number">1346</span>                                &#125;</span><br><span class="line"><span class="number">1347</span>                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">1348</span>                                Binder.restoreCallingIdentity(identity);</span><br><span class="line"><span class="number">1349</span>                            &#125;</span><br><span class="line"><span class="number">1350</span>                        &#125;</span><br><span class="line"><span class="number">1351</span>                    &#125;</span><br><span class="line"><span class="number">1352</span>                &#125;);</span><br><span class="line"><span class="number">1353</span></span><br><span class="line"><span class="number">1354</span>                <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_REVIEW_PERMISSIONS);</span><br><span class="line"><span class="number">1355</span>                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line"><span class="number">1356</span>                        | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);</span><br><span class="line"><span class="number">1357</span>                intent.putExtra(Intent.EXTRA_PACKAGE_NAME, s.packageName);</span><br><span class="line"><span class="number">1358</span>                intent.putExtra(Intent.EXTRA_REMOTE_CALLBACK, callback);</span><br><span class="line"><span class="number">1359</span></span><br><span class="line"><span class="number">1360</span>                <span class="keyword">if</span> (DEBUG_PERMISSIONS_REVIEW) &#123;</span><br><span class="line"><span class="number">1361</span>                    Slog.i(TAG, <span class="string">"u"</span> + s.userId + <span class="string">" Launching permission review for package "</span></span><br><span class="line"><span class="number">1362</span>                            + s.packageName);</span><br><span class="line"><span class="number">1363</span>                &#125;</span><br><span class="line"><span class="number">1364</span></span><br><span class="line"><span class="number">1365</span>                mAm.mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="number">1366</span>                    <span class="meta">@Override</span></span><br><span class="line"><span class="number">1367</span>                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">1368</span>                        mAm.mContext.startActivityAsUser(intent, <span class="keyword">new</span> UserHandle(userId));</span><br><span class="line"><span class="number">1369</span>                    &#125;</span><br><span class="line"><span class="number">1370</span>                &#125;);</span><br><span class="line"><span class="number">1371</span>            &#125;</span><br><span class="line"><span class="number">1372</span>        &#125;</span><br><span class="line"><span class="number">1373</span></span><br><span class="line"><span class="number">1374</span>        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">1375</span></span><br><span class="line"><span class="number">1376</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1377</span>            <span class="keyword">if</span> (unscheduleServiceRestartLocked(s, callerApp.info.uid, <span class="keyword">false</span>)) &#123;</span><br><span class="line"><span class="number">1378</span>                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"BIND SERVICE WHILE RESTART PENDING: "</span></span><br><span class="line"><span class="number">1379</span>                        + s);</span><br><span class="line"><span class="number">1380</span>            &#125;</span><br><span class="line"><span class="number">1381</span></span><br><span class="line"><span class="number">1382</span>            <span class="keyword">if</span> ((flags&amp;Context.BIND_AUTO_CREATE) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1383</span>                s.lastActivity = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">1384</span>                <span class="keyword">if</span> (!s.hasAutoCreateConnections()) &#123;</span><br><span class="line"><span class="number">1385</span>                    <span class="comment">// This is the first binding, let the tracker know.</span></span><br><span class="line"><span class="number">1386</span>                    ServiceState stracker = s.getTracker();</span><br><span class="line"><span class="number">1387</span>                    <span class="keyword">if</span> (stracker != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1388</span>                        stracker.setBound(<span class="keyword">true</span>, mAm.mProcessStats.getMemFactorLocked(),</span><br><span class="line"><span class="number">1389</span>                                s.lastActivity);</span><br><span class="line"><span class="number">1390</span>                    &#125;</span><br><span class="line"><span class="number">1391</span>                &#125;</span><br><span class="line"><span class="number">1392</span>            &#125;</span><br><span class="line"><span class="number">1393</span></span><br><span class="line"><span class="number">1394</span>            mAm.startAssociationLocked(callerApp.uid, callerApp.processName, callerApp.curProcState,</span><br><span class="line"><span class="number">1395</span>                    s.appInfo.uid, s.name, s.processName);</span><br><span class="line"><span class="number">1396</span>            <span class="comment">// Once the apps have become associated, if one of them is caller is ephemeral</span></span><br><span class="line"><span class="number">1397</span>            <span class="comment">// the target app should now be able to see the calling app</span></span><br><span class="line"><span class="number">1398</span>            mAm.grantEphemeralAccessLocked(callerApp.userId, service,</span><br><span class="line"><span class="number">1399</span>                    s.appInfo.uid, UserHandle.getAppId(callerApp.uid));</span><br><span class="line"><span class="number">1400</span></span><br><span class="line"><span class="number">1401</span>            AppBindRecord b = s.retrieveAppBindingLocked(service, callerApp);</span><br><span class="line"><span class="number">1402</span>            ConnectionRecord c = <span class="keyword">new</span> ConnectionRecord(b, activity,</span><br><span class="line"><span class="number">1403</span>                    connection, flags, clientLabel, clientIntent);</span><br><span class="line"><span class="number">1404</span></span><br><span class="line"><span class="number">1405</span>            IBinder binder = connection.asBinder();</span><br><span class="line"><span class="number">1406</span>            ArrayList&lt;ConnectionRecord&gt; clist = s.connections.get(binder);</span><br><span class="line"><span class="number">1407</span>            <span class="keyword">if</span> (clist == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1408</span>                clist = <span class="keyword">new</span> ArrayList&lt;ConnectionRecord&gt;();</span><br><span class="line"><span class="number">1409</span>                s.connections.put(binder, clist);</span><br><span class="line"><span class="number">1410</span>            &#125;</span><br><span class="line"><span class="number">1411</span>            clist.add(c);</span><br><span class="line"><span class="number">1412</span>            b.connections.add(c);</span><br><span class="line"><span class="number">1413</span>            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1414</span>                <span class="keyword">if</span> (activity.connections == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1415</span>                    activity.connections = <span class="keyword">new</span> HashSet&lt;ConnectionRecord&gt;();</span><br><span class="line"><span class="number">1416</span>                &#125;</span><br><span class="line"><span class="number">1417</span>                activity.connections.add(c);</span><br><span class="line"><span class="number">1418</span>            &#125;</span><br><span class="line"><span class="number">1419</span>            b.client.connections.add(c);</span><br><span class="line"><span class="number">1420</span>            <span class="keyword">if</span> ((c.flags&amp;Context.BIND_ABOVE_CLIENT) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1421</span>                b.client.hasAboveClient = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1422</span>            &#125;</span><br><span class="line"><span class="number">1423</span>            <span class="keyword">if</span> ((c.flags&amp;Context.BIND_ALLOW_WHITELIST_MANAGEMENT) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1424</span>                s.whitelistManager = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1425</span>            &#125;</span><br><span class="line"><span class="number">1426</span>            <span class="keyword">if</span> (s.app != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1427</span>                updateServiceClientActivitiesLocked(s.app, c, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">1428</span>            &#125;</span><br><span class="line"><span class="number">1429</span>            clist = mServiceConnections.get(binder);</span><br><span class="line"><span class="number">1430</span>            <span class="keyword">if</span> (clist == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1431</span>                clist = <span class="keyword">new</span> ArrayList&lt;ConnectionRecord&gt;();</span><br><span class="line"><span class="number">1432</span>                mServiceConnections.put(binder, clist);</span><br><span class="line"><span class="number">1433</span>            &#125;</span><br><span class="line"><span class="number">1434</span>            clist.add(c);</span><br><span class="line"><span class="number">1435</span></span><br><span class="line"><span class="number">1436</span>            <span class="keyword">if</span> ((flags&amp;Context.BIND_AUTO_CREATE) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1437</span>                s.lastActivity = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">1438</span>                <span class="keyword">if</span> (bringUpServiceLocked(s, service.getFlags(), callerFg, <span class="keyword">false</span>,</span><br><span class="line"><span class="number">1439</span>                        permissionsReviewRequired) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1440</span>                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">1441</span>                &#125;</span><br><span class="line"><span class="number">1442</span>            &#125;</span><br><span class="line"><span class="number">1443</span></span><br><span class="line"><span class="number">1444</span>            <span class="keyword">if</span> (s.app != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1445</span>                <span class="keyword">if</span> ((flags&amp;Context.BIND_TREAT_LIKE_ACTIVITY) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1446</span>                    s.app.treatLikeActivity = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1447</span>                &#125;</span><br><span class="line"><span class="number">1448</span>                <span class="keyword">if</span> (s.whitelistManager) &#123;</span><br><span class="line"><span class="number">1449</span>                    s.app.whitelistManager = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1450</span>                &#125;</span><br><span class="line"><span class="number">1451</span>                <span class="comment">// This could have made the service more important.</span></span><br><span class="line"><span class="number">1452</span>                mAm.updateLruProcessLocked(s.app, s.app.hasClientActivities</span><br><span class="line"><span class="number">1453</span>                        || s.app.treatLikeActivity, b.client);</span><br><span class="line"><span class="number">1454</span>                mAm.updateOomAdjLocked(s.app, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">1455</span>            &#125;</span><br><span class="line"><span class="number">1456</span></span><br><span class="line"><span class="number">1457</span>            <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Bind "</span> + s + <span class="string">" with "</span> + b</span><br><span class="line"><span class="number">1458</span>                    + <span class="string">": received="</span> + b.intent.received</span><br><span class="line"><span class="number">1459</span>                    + <span class="string">" apps="</span> + b.intent.apps.size()</span><br><span class="line"><span class="number">1460</span>                    + <span class="string">" doRebind="</span> + b.intent.doRebind);</span><br><span class="line"><span class="number">1461</span></span><br><span class="line"><span class="number">1462</span>            <span class="keyword">if</span> (s.app != <span class="keyword">null</span> &amp;&amp; b.intent.received) &#123;</span><br><span class="line"><span class="number">1463</span>                <span class="comment">// Service is already running, so we can immediately</span></span><br><span class="line"><span class="number">1464</span>                <span class="comment">// publish the connection.</span></span><br><span class="line"><span class="number">1465</span>                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1466</span>                    c.conn.connected(s.name, b.intent.binder, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1467</span>                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="number">1468</span>                    Slog.w(TAG, <span class="string">"Failure sending service "</span> + s.shortName</span><br><span class="line"><span class="number">1469</span>                            + <span class="string">" to connection "</span> + c.conn.asBinder()</span><br><span class="line"><span class="number">1470</span>                            + <span class="string">" (in "</span> + c.binding.client.processName + <span class="string">")"</span>, e);</span><br><span class="line"><span class="number">1471</span>                &#125;</span><br><span class="line"><span class="number">1472</span></span><br><span class="line"><span class="number">1473</span>                <span class="comment">// If this is the first app connected back to this binding,</span></span><br><span class="line"><span class="number">1474</span>                <span class="comment">// and the service had previously asked to be told when</span></span><br><span class="line"><span class="number">1475</span>                <span class="comment">// rebound, then do so.</span></span><br><span class="line"><span class="number">1476</span>                <span class="keyword">if</span> (b.intent.apps.size() == <span class="number">1</span> &amp;&amp; b.intent.doRebind) &#123;</span><br><span class="line"><span class="number">1477</span>                    requestServiceBindingLocked(s, b.intent, callerFg, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">1478</span>                &#125;</span><br><span class="line"><span class="number">1479</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!b.intent.requested) &#123;</span><br><span class="line"><span class="number">1480</span>                requestServiceBindingLocked(s, b.intent, callerFg, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1481</span>            &#125;</span><br><span class="line"><span class="number">1482</span></span><br><span class="line"><span class="number">1483</span>            getServiceMapLocked(s.userId).ensureNotStartingBackgroundLocked(s);</span><br><span class="line"><span class="number">1484</span></span><br><span class="line"><span class="number">1485</span>        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">1486</span>            Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">1487</span>        &#125;</span><br><span class="line"><span class="number">1488</span></span><br><span class="line"><span class="number">1489</span>        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="number">1490</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>最后又调用了requestServiceBindingLocked：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">requestServiceBindingLocked</span><span class="params">(ServiceRecord r, IntentBindRecord i,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1841</span>            <span class="keyword">boolean</span> execInFg, <span class="keyword">boolean</span> rebind)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">1842</span>        <span class="keyword">if</span> (r.app == <span class="keyword">null</span> || r.app.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1843</span>            <span class="comment">// If service is not currently running, can't yet bind.</span></span><br><span class="line"><span class="number">1844</span>            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1845</span>        &#125;</span><br><span class="line"><span class="number">1846</span>        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.d(TAG_SERVICE, <span class="string">"requestBind "</span> + i + <span class="string">": requested="</span> + i.requested</span><br><span class="line"><span class="number">1847</span>                + <span class="string">" rebind="</span> + rebind);</span><br><span class="line"><span class="number">1848</span>        <span class="keyword">if</span> ((!i.requested || rebind) &amp;&amp; i.apps.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1849</span>            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1850</span>                bumpServiceExecutingLocked(r, execInFg, <span class="string">"bind"</span>);</span><br><span class="line"><span class="number">1851</span>                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</span><br><span class="line"><span class="number">1852</span>                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,</span><br><span class="line"><span class="number">1853</span>                        r.app.repProcState);</span><br><span class="line"><span class="number">1854</span>                <span class="keyword">if</span> (!rebind) &#123;</span><br><span class="line"><span class="number">1855</span>                    i.requested = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1856</span>                &#125;</span><br><span class="line"><span class="number">1857</span>                i.hasBound = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1858</span>                i.doRebind = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1859</span>            &#125; <span class="keyword">catch</span> (TransactionTooLargeException e) &#123;</span><br><span class="line"><span class="number">1860</span>                <span class="comment">// Keep the executeNesting count accurate.</span></span><br><span class="line"><span class="number">1861</span>                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while binding "</span> + r, e);</span><br><span class="line"><span class="number">1862</span>                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</span><br><span class="line"><span class="number">1863</span>                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line"><span class="number">1864</span>                <span class="keyword">throw</span> e;</span><br><span class="line"><span class="number">1865</span>            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">1866</span>                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while binding "</span> + r);</span><br><span class="line"><span class="number">1867</span>                <span class="comment">// Keep the executeNesting count accurate.</span></span><br><span class="line"><span class="number">1868</span>                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</span><br><span class="line"><span class="number">1869</span>                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line"><span class="number">1870</span>                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1871</span>            &#125;</span><br><span class="line"><span class="number">1872</span>        &#125;</span><br><span class="line"><span class="number">1873</span>        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1874</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>r.app.thread.scheduleBindService会调用到ActivityThread中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleBindService</span><span class="params">(IBinder token, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">853</span>                <span class="keyword">boolean</span> rebind, <span class="keyword">int</span> processState)</span> </span>&#123;</span><br><span class="line"><span class="number">854</span>            updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">855</span>            BindServiceData s = <span class="keyword">new</span> BindServiceData();</span><br><span class="line"><span class="number">856</span>            s.token = token;</span><br><span class="line"><span class="number">857</span>            s.intent = intent;</span><br><span class="line"><span class="number">858</span>            s.rebind = rebind;</span><br><span class="line"><span class="number">859</span></span><br><span class="line"><span class="number">860</span>            <span class="keyword">if</span> (DEBUG_SERVICE)</span><br><span class="line"><span class="number">861</span>                Slog.v(TAG, <span class="string">"scheduleBindService token="</span> + token + <span class="string">" intent="</span> + intent + <span class="string">" uid="</span></span><br><span class="line"><span class="number">862</span>                        + Binder.getCallingUid() + <span class="string">" pid="</span> + Binder.getCallingPid());</span><br><span class="line"><span class="number">863</span>            sendMessage(H.BIND_SERVICE, s);</span><br><span class="line"><span class="number">864</span>        &#125;</span><br></pre></td></tr></table></figure></p><p>对应的H中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> BIND_SERVICE:</span><br><span class="line">Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceBind"</span>);</span><br><span class="line">handleBindService((BindServiceData)msg.obj);</span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>handleBindService中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindService</span><span class="params">(BindServiceData data)</span> </span>&#123;</span><br><span class="line">Service s = mServices.get(data.token);</span><br><span class="line"><span class="keyword">if</span> (DEBUG_SERVICE)</span><br><span class="line">Slog.v(TAG, <span class="string">"handleBindService s="</span> + s + <span class="string">" rebind="</span> + data.rebind);</span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">data.intent.setExtrasClassLoader(s.getClassLoader());</span><br><span class="line">data.intent.prepareToEnterProcess();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!data.rebind) &#123;</span><br><span class="line">IBinder binder = s.onBind(data.intent);</span><br><span class="line">ActivityManagerNative.getDefault().publishService(</span><br><span class="line">data.token, data.intent, binder);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">s.onRebind(data.intent);</span><br><span class="line">ActivityManagerNative.getDefault().serviceDoneExecuting(</span><br><span class="line">data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">ensureJitEnabled();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(s, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Unable to bind to service "</span> + s</span><br><span class="line">+ <span class="string">" with "</span> + data.intent + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ActivityManagerNative.getDefault().publishService(<br>data.token, data.intent, binder),于是又回到了ActivityManagerService中（Binder机制）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishService</span><span class="params">(IBinder token, Intent intent, IBinder service)</span> </span>&#123;</span><br><span class="line"><span class="number">18302</span>        <span class="comment">// Refuse possible leaked file descriptors</span></span><br><span class="line"><span class="number">18303</span>        <span class="keyword">if</span> (intent != <span class="keyword">null</span> &amp;&amp; intent.hasFileDescriptors() == <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="number">18304</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</span><br><span class="line"><span class="number">18305</span>        &#125;</span><br><span class="line"><span class="number">18306</span></span><br><span class="line"><span class="number">18307</span>        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="number">18308</span>            <span class="keyword">if</span> (!(token <span class="keyword">instanceof</span> ServiceRecord)) &#123;</span><br><span class="line"><span class="number">18309</span>                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid service token"</span>);</span><br><span class="line"><span class="number">18310</span>            &#125;</span><br><span class="line"><span class="number">18311</span>            mServices.publishServiceLocked((ServiceRecord)token, intent, service);</span><br><span class="line"><span class="number">18312</span>        &#125;</span><br><span class="line"><span class="number">18313</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>最后又调用到了mServices.publishServiceLocked，（<strong>ActiveServices.java</strong>）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">publishServiceLocked</span><span class="params">(ServiceRecord r, Intent intent, IBinder service)</span> </span>&#123;</span><br><span class="line"><span class="number">1493</span>        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">1494</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1495</span>            <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"PUBLISHING "</span> + r</span><br><span class="line"><span class="number">1496</span>                    + <span class="string">" "</span> + intent + <span class="string">": "</span> + service);</span><br><span class="line"><span class="number">1497</span>            <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1498</span>                Intent.FilterComparison filter</span><br><span class="line"><span class="number">1499</span>                        = <span class="keyword">new</span> Intent.FilterComparison(intent);</span><br><span class="line"><span class="number">1500</span>                IntentBindRecord b = r.bindings.get(filter);</span><br><span class="line"><span class="number">1501</span>                <span class="keyword">if</span> (b != <span class="keyword">null</span> &amp;&amp; !b.received) &#123;</span><br><span class="line"><span class="number">1502</span>                    b.binder = service;</span><br><span class="line"><span class="number">1503</span>                    b.requested = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1504</span>                    b.received = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1505</span>                    <span class="keyword">for</span> (<span class="keyword">int</span> conni=r.connections.size()-<span class="number">1</span>; conni&gt;=<span class="number">0</span>; conni--) &#123;</span><br><span class="line"><span class="number">1506</span>                        ArrayList&lt;ConnectionRecord&gt; clist = r.connections.valueAt(conni);</span><br><span class="line"><span class="number">1507</span>                        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;clist.size(); i++) &#123;</span><br><span class="line"><span class="number">1508</span>                            ConnectionRecord c = clist.get(i);</span><br><span class="line"><span class="number">1509</span>                            <span class="keyword">if</span> (!filter.equals(c.binding.intent.intent)) &#123;</span><br><span class="line"><span class="number">1510</span>                                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(</span><br><span class="line"><span class="number">1511</span>                                        TAG_SERVICE, <span class="string">"Not publishing to: "</span> + c);</span><br><span class="line"><span class="number">1512</span>                                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(</span><br><span class="line"><span class="number">1513</span>                                        TAG_SERVICE, <span class="string">"Bound intent: "</span> + c.binding.intent.intent);</span><br><span class="line"><span class="number">1514</span>                                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(</span><br><span class="line"><span class="number">1515</span>                                        TAG_SERVICE, <span class="string">"Published intent: "</span> + intent);</span><br><span class="line"><span class="number">1516</span>                                <span class="keyword">continue</span>;</span><br><span class="line"><span class="number">1517</span>                            &#125;</span><br><span class="line"><span class="number">1518</span>                            <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Publishing to: "</span> + c);</span><br><span class="line"><span class="number">1519</span>                            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1520</span>                                c.conn.connected(r.name, service, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1521</span>                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="number">1522</span>                                Slog.w(TAG, <span class="string">"Failure sending service "</span> + r.name +</span><br><span class="line"><span class="number">1523</span>                                      <span class="string">" to connection "</span> + c.conn.asBinder() +</span><br><span class="line"><span class="number">1524</span>                                      <span class="string">" (in "</span> + c.binding.client.processName + <span class="string">")"</span>, e);</span><br><span class="line"><span class="number">1525</span>                            &#125;</span><br><span class="line"><span class="number">1526</span>                        &#125;</span><br><span class="line"><span class="number">1527</span>                    &#125;</span><br><span class="line"><span class="number">1528</span>                &#125;</span><br><span class="line"><span class="number">1529</span></span><br><span class="line"><span class="number">1530</span>                serviceDoneExecutingLocked(r, mDestroyingServices.contains(r), <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1531</span>            &#125;</span><br><span class="line"><span class="number">1532</span>        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">1533</span>            Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">1534</span>        &#125;</span><br><span class="line"><span class="number">1535</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>c.conn.connected(r.name,service,false);就是调用的Service的connected</p><p><img src="http://opq81riyh.bkt.clouddn.com/bindService%20%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于8-0源码解析：bindService-启动过程&quot;&gt;&lt;a href=&quot;#基于8-0源码解析：bindService-启动过程&quot; class=&quot;headerlink&quot; title=&quot;基于8.0源码解析：bindService 启动过程&quot;&gt;&lt;/a&gt;基于8.0源码解
      
    
    </summary>
    
      <category term="源码解析" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="源码解析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>基于8.0源码解析：startService 启动过程</title>
    <link href="http://yoursite.com/2018/01/24/%E5%9F%BA%E4%BA%8E8-0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9AstartService-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/24/基于8-0源码解析：startService-启动过程/</id>
    <published>2018-01-24T08:18:22.000Z</published>
    <updated>2018-01-24T08:21:11.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于8-0源码解析：startService-启动过程"><a href="#基于8-0源码解析：startService-启动过程" class="headerlink" title="基于8.0源码解析：startService 启动过程"></a>基于8.0源码解析：startService 启动过程</h1><p>欢迎关注我的公众号：<br><img src="http://opq81riyh.bkt.clouddn.com/qrcode_for_gh_1d2b09f3edbf_258%20%282%29.jpg" alt=""></p><hr><p><img src="http://opq81riyh.bkt.clouddn.com/startservice.png" alt=""><br>调用startService 后会到ContextWrapper中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mBase.startService(service);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个mBase就是Context,然后到ContextImpl中看一眼：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="number">1459</span>    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line"><span class="number">1460</span>        warnIfCallingFromSystemProcess();</span><br><span class="line"><span class="number">1461</span>        <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">false</span>, mUser);</span><br><span class="line"><span class="number">1462</span>    &#125;</span><br><span class="line"><span class="number">1463</span></span><br></pre></td></tr></table></figure></p><p>又调用了startServiceCommon<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ComponentName <span class="title">startServiceCommon</span><span class="params">(Intent service, <span class="keyword">boolean</span> requireForeground,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1487</span>            UserHandle user)</span> </span>&#123;</span><br><span class="line"><span class="number">1488</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1489</span>            validateServiceIntent(service);</span><br><span class="line"><span class="number">1490</span>            service.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">1491</span>            ComponentName cn = ActivityManager.getService().startService(</span><br><span class="line"><span class="number">1492</span>                mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span><br><span class="line"><span class="number">1493</span>                            getContentResolver()), requireForeground,</span><br><span class="line"><span class="number">1494</span>                            getOpPackageName(), user.getIdentifier());</span><br><span class="line"><span class="number">1495</span>            <span class="keyword">if</span> (cn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1496</span>                <span class="keyword">if</span> (cn.getPackageName().equals(<span class="string">"!"</span>)) &#123;</span><br><span class="line"><span class="number">1497</span>                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line"><span class="number">1498</span>                            <span class="string">"Not allowed to start service "</span> + service</span><br><span class="line"><span class="number">1499</span>                            + <span class="string">" without permission "</span> + cn.getClassName());</span><br><span class="line"><span class="number">1500</span>                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn.getPackageName().equals(<span class="string">"!!"</span>)) &#123;</span><br><span class="line"><span class="number">1501</span>                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line"><span class="number">1502</span>                            <span class="string">"Unable to start service "</span> + service</span><br><span class="line"><span class="number">1503</span>                            + <span class="string">": "</span> + cn.getClassName());</span><br><span class="line"><span class="number">1504</span>                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn.getPackageName().equals(<span class="string">"?"</span>)) &#123;</span><br><span class="line"><span class="number">1505</span>                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="number">1506</span>                            <span class="string">"Not allowed to start service "</span> + service + <span class="string">": "</span> + cn.getClassName());</span><br><span class="line"><span class="number">1507</span>                &#125;</span><br><span class="line"><span class="number">1508</span>            &#125;</span><br><span class="line"><span class="number">1509</span>            <span class="keyword">return</span> cn;</span><br><span class="line"><span class="number">1510</span>        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">1511</span>            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line"><span class="number">1512</span>        &#125;</span><br><span class="line"><span class="number">1513</span>    &#125;</span><br><span class="line"><span class="number">1514</span></span><br></pre></td></tr></table></figure></p><p>看到其中有这么一句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ComponentName cn = ActivityManager.getService().startService(</span><br><span class="line"><span class="number">1492</span>                mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span><br><span class="line"><span class="number">1493</span>                            getContentResolver()), requireForeground,</span><br><span class="line"><span class="number">1494</span>                            getOpPackageName(), user.getIdentifier());</span><br></pre></td></tr></table></figure></p><p>了解Binder机制的就会知道这会调用到ActivityManagerService中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="number">18125</span>    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(IApplicationThread caller, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">18126</span>            String resolvedType, <span class="keyword">boolean</span> requireForeground, String callingPackage, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">18127            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">18128</span>        enforceNotIsolatedCaller(<span class="string">"startService"</span>);</span><br><span class="line"><span class="number">18129</span>        <span class="comment">// Refuse possible leaked file descriptors</span></span><br><span class="line"><span class="number">18130</span>        <span class="keyword">if</span> (service != <span class="keyword">null</span> &amp;&amp; service.hasFileDescriptors() == <span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="number">18131</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</span><br><span class="line"><span class="number">18132</span>        &#125;</span><br><span class="line"><span class="number">18133</span></span><br><span class="line"><span class="number">18134</span>        <span class="keyword">if</span> (callingPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">18135</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"callingPackage cannot be null"</span>);</span><br><span class="line"><span class="number">18136</span>        &#125;</span><br><span class="line"><span class="number">18137</span></span><br><span class="line"><span class="number">18138</span>        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE,</span><br><span class="line"><span class="number">18139</span>                <span class="string">"*** startService: "</span> + service + <span class="string">" type="</span> + resolvedType + <span class="string">" fg="</span> + requireForeground);</span><br><span class="line"><span class="number">18140</span>        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="number">18141</span>            <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line"><span class="number">18142</span>            <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line"><span class="number">18143</span>            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">18144</span>            ComponentName res;</span><br><span class="line"><span class="number">18145</span>            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">18146</span>                res = mServices.startServiceLocked(caller, service,</span><br><span class="line"><span class="number">18147</span>                        resolvedType, callingPid, callingUid,</span><br><span class="line"><span class="number">18148</span>                        requireForeground, callingPackage, userId);</span><br><span class="line"><span class="number">18149</span>            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">18150</span>                Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">18151</span>            &#125;</span><br><span class="line"><span class="number">18152</span>            <span class="keyword">return</span> res;</span><br><span class="line"><span class="number">18153</span>        &#125;</span><br><span class="line"><span class="number">18154</span>    &#125;</span><br></pre></td></tr></table></figure><p>mServices.startServiceLocked<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ComponentName <span class="title">startServiceLocked</span><span class="params">(IApplicationThread caller, Intent service, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">328</span>            <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, <span class="keyword">boolean</span> fgRequired, String callingPackage, <span class="keyword">final</span> <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">329            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">330</span>        <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class="string">"startService: "</span> + service</span><br><span class="line"><span class="number">331</span>                + <span class="string">" type="</span> + resolvedType + <span class="string">" args="</span> + service.getExtras());</span><br><span class="line"><span class="number">332</span></span><br><span class="line"><span class="number">333</span>        <span class="keyword">final</span> <span class="keyword">boolean</span> callerFg;</span><br><span class="line"><span class="number">334</span>        <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">335</span>            <span class="keyword">final</span> ProcessRecord callerApp = mAm.getRecordForAppLocked(caller);</span><br><span class="line"><span class="number">336</span>            <span class="keyword">if</span> (callerApp == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">337</span>                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line"><span class="number">338</span>                        <span class="string">"Unable to find app for caller "</span> + caller</span><br><span class="line"><span class="number">339</span>                        + <span class="string">" (pid="</span> + callingPid</span><br><span class="line"><span class="number">340</span>                        + <span class="string">") when starting service "</span> + service);</span><br><span class="line"><span class="number">341</span>            &#125;</span><br><span class="line"><span class="number">342</span>            callerFg = callerApp.setSchedGroup != ProcessList.SCHED_GROUP_BACKGROUND;</span><br><span class="line"><span class="number">343</span>        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">344</span>            callerFg = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">345</span>        &#125;</span><br><span class="line"><span class="number">346</span></span><br><span class="line"><span class="number">347</span>        ServiceLookupResult res =</span><br><span class="line"><span class="number">348</span>            retrieveServiceLocked(service, resolvedType, callingPackage,</span><br><span class="line"><span class="number">349</span>                    callingPid, callingUid, userId, <span class="keyword">true</span>, callerFg, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">350</span>        <span class="keyword">if</span> (res == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">351</span>            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="number">352</span>        &#125;</span><br><span class="line"><span class="number">353</span>        <span class="keyword">if</span> (res.record == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">354</span>            <span class="keyword">return</span> <span class="keyword">new</span> ComponentName(<span class="string">"!"</span>, res.permission != <span class="keyword">null</span></span><br><span class="line"><span class="number">355</span>                    ? res.permission : <span class="string">"private to package"</span>);</span><br><span class="line"><span class="number">356</span>        &#125;</span><br><span class="line"><span class="number">357</span></span><br><span class="line"><span class="number">358</span>        ServiceRecord r = res.record;</span><br><span class="line"><span class="number">359</span></span><br><span class="line"><span class="number">360</span>        <span class="keyword">if</span> (!mAm.mUserController.exists(r.userId)) &#123;</span><br><span class="line"><span class="number">361</span>            Slog.w(TAG, <span class="string">"Trying to start service with non-existent user! "</span> + r.userId);</span><br><span class="line"><span class="number">362</span>            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="number">363</span>        &#125;</span><br><span class="line"><span class="number">364</span></span><br><span class="line"><span class="number">365</span>        <span class="comment">// If this isn't a direct-to-foreground start, check our ability to kick off an</span></span><br><span class="line"><span class="number">366</span>        <span class="comment">// arbitrary service</span></span><br><span class="line"><span class="number">367</span>        <span class="keyword">if</span> (!r.startRequested &amp;&amp; !fgRequired) &#123;</span><br><span class="line"><span class="number">368</span>            <span class="comment">// Before going further -- if this app is not allowed to start services in the</span></span><br><span class="line"><span class="number">369</span>            <span class="comment">// background, then at this point we aren't going to let it period.</span></span><br><span class="line"><span class="number">370</span>            <span class="keyword">final</span> <span class="keyword">int</span> allowed = mAm.getAppStartModeLocked(r.appInfo.uid, r.packageName,</span><br><span class="line"><span class="number">371</span>                    r.appInfo.targetSdkVersion, callingPid, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">372</span>            <span class="keyword">if</span> (allowed != ActivityManager.APP_START_MODE_NORMAL) &#123;</span><br><span class="line"><span class="number">373</span>                Slog.w(TAG, <span class="string">"Background start not allowed: service "</span></span><br><span class="line"><span class="number">374</span>                        + service + <span class="string">" to "</span> + r.name.flattenToShortString()</span><br><span class="line"><span class="number">375</span>                        + <span class="string">" from pid="</span> + callingPid + <span class="string">" uid="</span> + callingUid</span><br><span class="line"><span class="number">376</span>                        + <span class="string">" pkg="</span> + callingPackage);</span><br><span class="line"><span class="number">377</span>                <span class="keyword">if</span> (allowed == ActivityManager.APP_START_MODE_DELAYED) &#123;</span><br><span class="line"><span class="number">378</span>                    <span class="comment">// In this case we are silently disabling the app, to disrupt as</span></span><br><span class="line"><span class="number">379</span>                    <span class="comment">// little as possible existing apps.</span></span><br><span class="line"><span class="number">380</span>                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="number">381</span>                &#125;</span><br><span class="line"><span class="number">382</span>                <span class="comment">// This app knows it is in the new model where this operation is not</span></span><br><span class="line"><span class="number">383</span>                <span class="comment">// allowed, so tell it what has happened.</span></span><br><span class="line"><span class="number">384</span>                UidRecord uidRec = mAm.mActiveUids.get(r.appInfo.uid);</span><br><span class="line"><span class="number">385</span>                <span class="keyword">return</span> <span class="keyword">new</span> ComponentName(<span class="string">"?"</span>, <span class="string">"app is in background uid "</span> + uidRec);</span><br><span class="line"><span class="number">386</span>            &#125;</span><br><span class="line"><span class="number">387</span>        &#125;</span><br><span class="line"><span class="number">388</span></span><br><span class="line"><span class="number">389</span>        NeededUriGrants neededGrants = mAm.checkGrantUriPermissionFromIntentLocked(</span><br><span class="line"><span class="number">390</span>                callingUid, r.packageName, service, service.getFlags(), <span class="keyword">null</span>, r.userId);</span><br><span class="line"><span class="number">391</span></span><br><span class="line"><span class="number">392</span>        <span class="comment">// If permissions need a review before any of the app components can run,</span></span><br><span class="line"><span class="number">393</span>        <span class="comment">// we do not start the service and launch a review activity if the calling app</span></span><br><span class="line"><span class="number">394</span>        <span class="comment">// is in the foreground passing it a pending intent to start the service when</span></span><br><span class="line"><span class="number">395</span>        <span class="comment">// review is completed.</span></span><br><span class="line"><span class="number">396</span>        <span class="keyword">if</span> (mAm.mPermissionReviewRequired) &#123;</span><br><span class="line"><span class="number">397</span>            <span class="keyword">if</span> (!requestStartTargetPermissionsReviewIfNeededLocked(r, callingPackage,</span><br><span class="line"><span class="number">398</span>                    callingUid, service, callerFg, userId)) &#123;</span><br><span class="line"><span class="number">399</span>                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="number">400</span>            &#125;</span><br><span class="line"><span class="number">401</span>        &#125;</span><br><span class="line"><span class="number">402</span></span><br><span class="line"><span class="number">403</span>        <span class="keyword">if</span> (unscheduleServiceRestartLocked(r, callingUid, <span class="keyword">false</span>)) &#123;</span><br><span class="line"><span class="number">404</span>            <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"START SERVICE WHILE RESTART PENDING: "</span> + r);</span><br><span class="line"><span class="number">405</span>        &#125;</span><br><span class="line"><span class="number">406</span>        r.lastActivity = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">407</span>        r.startRequested = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">408</span>        r.delayedStop = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">409</span>        r.fgRequired = fgRequired;</span><br><span class="line"><span class="number">410</span>        r.pendingStarts.add(<span class="keyword">new</span> ServiceRecord.StartItem(r, <span class="keyword">false</span>, r.makeNextStartId(),</span><br><span class="line"><span class="number">411</span>                service, neededGrants, callingUid));</span><br><span class="line"><span class="number">412</span></span><br><span class="line"><span class="number">413</span>        <span class="keyword">final</span> ServiceMap smap = getServiceMapLocked(r.userId);</span><br><span class="line"><span class="number">414</span>        <span class="keyword">boolean</span> addToStarting = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">415</span>        <span class="keyword">if</span> (!callerFg &amp;&amp; !fgRequired &amp;&amp; r.app == <span class="keyword">null</span></span><br><span class="line"><span class="number">416</span>                &amp;&amp; mAm.mUserController.hasStartedUserState(r.userId)) &#123;</span><br><span class="line"><span class="number">417</span>            ProcessRecord proc = mAm.getProcessRecordLocked(r.processName, r.appInfo.uid, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">418</span>            <span class="keyword">if</span> (proc == <span class="keyword">null</span> || proc.curProcState &gt; ActivityManager.PROCESS_STATE_RECEIVER) &#123;</span><br><span class="line"><span class="number">419</span>                <span class="comment">// If this is not coming from a foreground caller, then we may want</span></span><br><span class="line"><span class="number">420</span>                <span class="comment">// to delay the start if there are already other background services</span></span><br><span class="line"><span class="number">421</span>                <span class="comment">// that are starting.  This is to avoid process start spam when lots</span></span><br><span class="line"><span class="number">422</span>                <span class="comment">// of applications are all handling things like connectivity broadcasts.</span></span><br><span class="line"><span class="number">423</span>                <span class="comment">// We only do this for cached processes, because otherwise an application</span></span><br><span class="line"><span class="number">424</span>                <span class="comment">// can have assumptions about calling startService() for a service to run</span></span><br><span class="line"><span class="number">425</span>                <span class="comment">// in its own process, and for that process to not be killed before the</span></span><br><span class="line"><span class="number">426</span>                <span class="comment">// service is started.  This is especially the case for receivers, which</span></span><br><span class="line"><span class="number">427</span>                <span class="comment">// may start a service in onReceive() to do some additional work and have</span></span><br><span class="line"><span class="number">428</span>                <span class="comment">// initialized some global state as part of that.</span></span><br><span class="line"><span class="number">429</span>                <span class="keyword">if</span> (DEBUG_DELAYED_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Potential start delay of "</span></span><br><span class="line"><span class="number">430</span>                        + r + <span class="string">" in "</span> + proc);</span><br><span class="line"><span class="number">431</span>                <span class="keyword">if</span> (r.delayed) &#123;</span><br><span class="line"><span class="number">432</span>                    <span class="comment">// This service is already scheduled for a delayed start; just leave</span></span><br><span class="line"><span class="number">433</span>                    <span class="comment">// it still waiting.</span></span><br><span class="line"><span class="number">434</span>                    <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class="string">"Continuing to delay: "</span> + r);</span><br><span class="line"><span class="number">435</span>                    <span class="keyword">return</span> r.name;</span><br><span class="line"><span class="number">436</span>                &#125;</span><br><span class="line"><span class="number">437</span>                <span class="keyword">if</span> (smap.mStartingBackground.size() &gt;= mMaxStartingBackground) &#123;</span><br><span class="line"><span class="number">438</span>                    <span class="comment">// Something else is starting, delay!</span></span><br><span class="line"><span class="number">439</span>                    Slog.i(TAG_SERVICE, <span class="string">"Delaying start of: "</span> + r);</span><br><span class="line"><span class="number">440</span>                    smap.mDelayedStartList.add(r);</span><br><span class="line"><span class="number">441</span>                    r.delayed = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">442</span>                    <span class="keyword">return</span> r.name;</span><br><span class="line"><span class="number">443</span>                &#125;</span><br><span class="line"><span class="number">444</span>                <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class="string">"Not delaying: "</span> + r);</span><br><span class="line"><span class="number">445</span>                addToStarting = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">446</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc.curProcState &gt;= ActivityManager.PROCESS_STATE_SERVICE) &#123;</span><br><span class="line"><span class="number">447</span>                <span class="comment">// We slightly loosen when we will enqueue this new service as a background</span></span><br><span class="line"><span class="number">448</span>                <span class="comment">// starting service we are waiting for, to also include processes that are</span></span><br><span class="line"><span class="number">449</span>                <span class="comment">// currently running other services or receivers.</span></span><br><span class="line"><span class="number">450</span>                addToStarting = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">451</span>                <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,</span><br><span class="line"><span class="number">452</span>                        <span class="string">"Not delaying, but counting as bg: "</span> + r);</span><br><span class="line"><span class="number">453</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) &#123;</span><br><span class="line"><span class="number">454</span>                StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"><span class="number">455</span>                sb.append(<span class="string">"Not potential delay (state="</span>).append(proc.curProcState)</span><br><span class="line"><span class="number">456</span>                        .append(<span class="string">' '</span>).append(proc.adjType);</span><br><span class="line"><span class="number">457</span>                String reason = proc.makeAdjReason();</span><br><span class="line"><span class="number">458</span>                <span class="keyword">if</span> (reason != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">459</span>                    sb.append(<span class="string">' '</span>);</span><br><span class="line"><span class="number">460</span>                    sb.append(reason);</span><br><span class="line"><span class="number">461</span>                &#125;</span><br><span class="line"><span class="number">462</span>                sb.append(<span class="string">"): "</span>);</span><br><span class="line"><span class="number">463</span>                sb.append(r.toString());</span><br><span class="line"><span class="number">464</span>                Slog.v(TAG_SERVICE, sb.toString());</span><br><span class="line"><span class="number">465</span>            &#125;</span><br><span class="line"><span class="number">466</span>        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) &#123;</span><br><span class="line"><span class="number">467</span>            <span class="keyword">if</span> (callerFg || fgRequired) &#123;</span><br><span class="line"><span class="number">468</span>                Slog.v(TAG_SERVICE, <span class="string">"Not potential delay (callerFg="</span> + callerFg + <span class="string">" uid="</span></span><br><span class="line"><span class="number">469</span>                        + callingUid + <span class="string">" pid="</span> + callingPid + <span class="string">" fgRequired="</span> + fgRequired + <span class="string">"): "</span> + r);</span><br><span class="line"><span class="number">470</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.app != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">471</span>                Slog.v(TAG_SERVICE, <span class="string">"Not potential delay (cur app="</span> + r.app + <span class="string">"): "</span> + r);</span><br><span class="line"><span class="number">472</span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">473</span>                Slog.v(TAG_SERVICE,</span><br><span class="line"><span class="number">474</span>                        <span class="string">"Not potential delay (user "</span> + r.userId + <span class="string">" not started): "</span> + r);</span><br><span class="line"><span class="number">475</span>            &#125;</span><br><span class="line"><span class="number">476</span>        &#125;</span><br><span class="line"><span class="number">477</span></span><br><span class="line"><span class="number">478</span>        ComponentName cmp = startServiceInnerLocked(smap, service, r, callerFg, addToStarting);</span><br><span class="line"><span class="number">479</span>        <span class="keyword">return</span> cmp;</span><br><span class="line"><span class="number">480</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>最后调用了ComponentName cmp = startServiceInnerLocked(smap, service, r, callerFg, addToStarting);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ComponentName <span class="title">startServiceInnerLocked</span><span class="params">(ServiceMap smap, Intent service, ServiceRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">527</span>            <span class="keyword">boolean</span> callerFg, <span class="keyword">boolean</span> addToStarting)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">528</span>        ServiceState stracker = r.getTracker();</span><br><span class="line"><span class="number">529</span>        <span class="keyword">if</span> (stracker != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">530</span>            stracker.setStarted(<span class="keyword">true</span>, mAm.mProcessStats.getMemFactorLocked(), r.lastActivity);</span><br><span class="line"><span class="number">531</span>        &#125;</span><br><span class="line"><span class="number">532</span>        r.callStart = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">533</span>        <span class="keyword">synchronized</span> (r.stats.getBatteryStats()) &#123;</span><br><span class="line"><span class="number">534</span>            r.stats.startRunningLocked();</span><br><span class="line"><span class="number">535</span>        &#125;</span><br><span class="line"><span class="number">536</span>        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">537</span>        <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">538</span>            <span class="keyword">return</span> <span class="keyword">new</span> ComponentName(<span class="string">"!!"</span>, error);</span><br><span class="line"><span class="number">539</span>        &#125;</span><br><span class="line"><span class="number">540</span></span><br><span class="line"><span class="number">541</span>        <span class="keyword">if</span> (r.startRequested &amp;&amp; addToStarting) &#123;</span><br><span class="line"><span class="number">542</span>            <span class="keyword">boolean</span> first = smap.mStartingBackground.size() == <span class="number">0</span>;</span><br><span class="line"><span class="number">543</span>            smap.mStartingBackground.add(r);</span><br><span class="line"><span class="number">544</span>            r.startingBgTimeout = SystemClock.uptimeMillis() + mAm.mConstants.BG_START_TIMEOUT;</span><br><span class="line"><span class="number">545</span>            <span class="keyword">if</span> (DEBUG_DELAYED_SERVICE) &#123;</span><br><span class="line"><span class="number">546</span>                RuntimeException here = <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>);</span><br><span class="line"><span class="number">547</span>                here.fillInStackTrace();</span><br><span class="line"><span class="number">548</span>                Slog.v(TAG_SERVICE, <span class="string">"Starting background (first="</span> + first + <span class="string">"): "</span> + r, here);</span><br><span class="line"><span class="number">549</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) &#123;</span><br><span class="line"><span class="number">550</span>                Slog.v(TAG_SERVICE, <span class="string">"Starting background (first="</span> + first + <span class="string">"): "</span> + r);</span><br><span class="line"><span class="number">551</span>            &#125;</span><br><span class="line"><span class="number">552</span>            <span class="keyword">if</span> (first) &#123;</span><br><span class="line"><span class="number">553</span>                smap.rescheduleDelayedStartsLocked();</span><br><span class="line"><span class="number">554</span>            &#125;</span><br><span class="line"><span class="number">555</span>        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (callerFg || r.fgRequired) &#123;</span><br><span class="line"><span class="number">556</span>            smap.ensureNotStartingBackgroundLocked(r);</span><br><span class="line"><span class="number">557</span>        &#125;</span><br><span class="line"><span class="number">558</span></span><br><span class="line"><span class="number">559</span>        <span class="keyword">return</span> r.name;</span><br><span class="line"><span class="number">560</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法中又调用到了 String error = bringUpServiceLocked(r, service.getFlags(), callerFg, false, false);<br>然后掉用到：<br>sendServiceArgsLocked(r, execInFg, false);<br>进而调用到：<br>realStartServiceLocked(r, app, execInFg);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">realStartServiceLocked</span><span class="params">(ServiceRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">2190</span>            ProcessRecord app, <span class="keyword">boolean</span> execInFg)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"><span class="number">2191</span>        <span class="keyword">if</span> (app.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">2192</span>            <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line"><span class="number">2193</span>        &#125;</span><br><span class="line"><span class="number">2194</span>        <span class="keyword">if</span> (DEBUG_MU)</span><br><span class="line"><span class="number">2195</span>            Slog.v(TAG_MU, <span class="string">"realStartServiceLocked, ServiceRecord.uid = "</span> + r.appInfo.uid</span><br><span class="line"><span class="number">2196</span>                    + <span class="string">", ProcessRecord.uid = "</span> + app.uid);</span><br><span class="line"><span class="number">2197</span>        r.app = app;</span><br><span class="line"><span class="number">2198</span>        r.restartTime = r.lastActivity = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">2199</span></span><br><span class="line"><span class="number">2200</span>        <span class="keyword">final</span> <span class="keyword">boolean</span> newService = app.services.add(r);</span><br><span class="line"><span class="number">2201</span>        bumpServiceExecutingLocked(r, execInFg, <span class="string">"create"</span>);</span><br><span class="line"><span class="number">2202</span>        mAm.updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="number">2203</span>        updateServiceForegroundLocked(r.app, <span class="comment">/* oomAdj= */</span> <span class="keyword">false</span>);</span><br><span class="line"><span class="number">2204</span>        mAm.updateOomAdjLocked();</span><br><span class="line"><span class="number">2205</span></span><br><span class="line"><span class="number">2206</span>        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2207</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">2208</span>            <span class="keyword">if</span> (LOG_SERVICE_START_STOP) &#123;</span><br><span class="line"><span class="number">2209</span>                String nameTerm;</span><br><span class="line"><span class="number">2210</span>                <span class="keyword">int</span> lastPeriod = r.shortName.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line"><span class="number">2211</span>                nameTerm = lastPeriod &gt;= <span class="number">0</span> ? r.shortName.substring(lastPeriod) : r.shortName;</span><br><span class="line"><span class="number">2212</span>                EventLogTags.writeAmCreateService(</span><br><span class="line"><span class="number">2213</span>                        r.userId, System.identityHashCode(r), nameTerm, r.app.uid, r.app.pid);</span><br><span class="line"><span class="number">2214</span>            &#125;</span><br><span class="line"><span class="number">2215</span>            <span class="keyword">synchronized</span> (r.stats.getBatteryStats()) &#123;</span><br><span class="line"><span class="number">2216</span>                r.stats.startLaunchedLocked();</span><br><span class="line"><span class="number">2217</span>            &#125;</span><br><span class="line"><span class="number">2218</span>            mAm.notifyPackageUse(r.serviceInfo.packageName,</span><br><span class="line"><span class="number">2219</span>                                 PackageManager.NOTIFY_PACKAGE_USE_SERVICE);</span><br><span class="line"><span class="number">2220</span>            app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</span><br><span class="line"><span class="number">2221</span>            app.thread.scheduleCreateService(r, r.serviceInfo,</span><br><span class="line"><span class="number">2222</span>                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</span><br><span class="line"><span class="number">2223</span>                    app.repProcState);</span><br><span class="line"><span class="number">2224</span>            r.postNotification();</span><br><span class="line"><span class="number">2225</span>            created = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">2226</span>        &#125; <span class="keyword">catch</span> (DeadObjectException e) &#123;</span><br><span class="line"><span class="number">2227</span>            Slog.w(TAG, <span class="string">"Application dead when creating service "</span> + r);</span><br><span class="line"><span class="number">2228</span>            mAm.appDiedLocked(app);</span><br><span class="line"><span class="number">2229</span>            <span class="keyword">throw</span> e;</span><br><span class="line"><span class="number">2230</span>        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">2231</span>            <span class="keyword">if</span> (!created) &#123;</span><br><span class="line"><span class="number">2232</span>                <span class="comment">// Keep the executeNesting count accurate.</span></span><br><span class="line"><span class="number">2233</span>                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</span><br><span class="line"><span class="number">2234</span>                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line"><span class="number">2235</span></span><br><span class="line"><span class="number">2236</span>                <span class="comment">// Cleanup.</span></span><br><span class="line"><span class="number">2237</span>                <span class="keyword">if</span> (newService) &#123;</span><br><span class="line"><span class="number">2238</span>                    app.services.remove(r);</span><br><span class="line"><span class="number">2239</span>                    r.app = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">2240</span>                &#125;</span><br><span class="line"><span class="number">2241</span></span><br><span class="line"><span class="number">2242</span>                <span class="comment">// Retry.</span></span><br><span class="line"><span class="number">2243</span>                <span class="keyword">if</span> (!inDestroying) &#123;</span><br><span class="line"><span class="number">2244</span>                    scheduleServiceRestartLocked(r, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">2245</span>                &#125;</span><br><span class="line"><span class="number">2246</span>            &#125;</span><br><span class="line"><span class="number">2247</span>        &#125;</span><br><span class="line"><span class="number">2248</span></span><br><span class="line"><span class="number">2249</span>        <span class="keyword">if</span> (r.whitelistManager) &#123;</span><br><span class="line"><span class="number">2250</span>            app.whitelistManager = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">2251</span>        &#125;</span><br><span class="line"><span class="number">2252</span></span><br><span class="line"><span class="number">2253</span>        requestServiceBindingsLocked(r, execInFg);</span><br><span class="line"><span class="number">2254</span></span><br><span class="line"><span class="number">2255</span>        updateServiceClientActivitiesLocked(app, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">2256</span></span><br><span class="line"><span class="number">2257</span>        <span class="comment">// If the service is in the started state, and there are no</span></span><br><span class="line"><span class="number">2258</span>        <span class="comment">// pending arguments, then fake up one so its onStartCommand() will</span></span><br><span class="line"><span class="number">2259</span>        <span class="comment">// be called.</span></span><br><span class="line"><span class="number">2260</span>        <span class="keyword">if</span> (r.startRequested &amp;&amp; r.callStart &amp;&amp; r.pendingStarts.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">2261</span>            r.pendingStarts.add(<span class="keyword">new</span> ServiceRecord.StartItem(r, <span class="keyword">false</span>, r.makeNextStartId(),</span><br><span class="line"><span class="number">2262</span>                    <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>));</span><br><span class="line"><span class="number">2263</span>        &#125;</span><br><span class="line"><span class="number">2264</span></span><br><span class="line"><span class="number">2265</span>        sendServiceArgsLocked(r, execInFg, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">2266</span></span><br><span class="line"><span class="number">2267</span>        <span class="keyword">if</span> (r.delayed) &#123;</span><br><span class="line"><span class="number">2268</span>            <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE, <span class="string">"REM FR DELAY LIST (new proc): "</span> + r);</span><br><span class="line"><span class="number">2269</span>            getServiceMapLocked(r.userId).mDelayedStartList.remove(r);</span><br><span class="line"><span class="number">2270</span>            r.delayed = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2271</span>        &#125;</span><br><span class="line"><span class="number">2272</span></span><br><span class="line"><span class="number">2273</span>        <span class="keyword">if</span> (r.delayedStop) &#123;</span><br><span class="line"><span class="number">2274</span>            <span class="comment">// Oh and hey we've already been asked to stop!</span></span><br><span class="line"><span class="number">2275</span>            r.delayedStop = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2276</span>            <span class="keyword">if</span> (r.startRequested) &#123;</span><br><span class="line"><span class="number">2277</span>                <span class="keyword">if</span> (DEBUG_DELAYED_STARTS) Slog.v(TAG_SERVICE,</span><br><span class="line"><span class="number">2278</span>                        <span class="string">"Applying delayed stop (from start): "</span> + r);</span><br><span class="line"><span class="number">2279</span>                stopServiceLocked(r);</span><br><span class="line"><span class="number">2280</span>            &#125;</span><br><span class="line"><span class="number">2281</span>        &#125;</span><br><span class="line"><span class="number">2282</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>app.thread.scheduleCreateService,这个thread就是IApplicationThread，就是ActivityThread对象，于是我们回到ActivityThread中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleCreateService</span><span class="params">(IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">ServiceInfo info, CompatibilityInfo compatInfo, <span class="keyword">int</span> processState)</span> </span>&#123;</span><br><span class="line">updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line">CreateServiceData s = <span class="keyword">new</span> CreateServiceData();</span><br><span class="line">s.token = token;</span><br><span class="line">s.info = info;</span><br><span class="line">s.compatInfo = compatInfo;</span><br><span class="line"></span><br><span class="line">sendMessage(H.CREATE_SERVICE, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们去到H中找到对应的handleMessage处理CREATE_SERVICE的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> CREATE_SERVICE:</span><br><span class="line">Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, (<span class="string">"serviceCreate: "</span> + String.valueOf(msg.obj)));</span><br><span class="line">handleCreateService((CreateServiceData)msg.obj);</span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>然后handleCreateService：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCreateService</span><span class="params">(CreateServiceData data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// If we are getting ready to gc after going to the background, well</span></span><br><span class="line"><span class="comment">// we are back active so skip it.</span></span><br><span class="line">unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">data.info.applicationInfo, data.compatInfo);</span><br><span class="line">Service service = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">service = (Service) cl.loadClass(data.info.name).newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Unable to instantiate service "</span> + data.info.name</span><br><span class="line">+ <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Creating service "</span> + data.info.name);</span><br><span class="line"></span><br><span class="line">ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, packageInfo);</span><br><span class="line">context.setOuterContext(service);</span><br><span class="line"></span><br><span class="line">Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">service.attach(context, <span class="keyword">this</span>, data.info.name, data.token, app,</span><br><span class="line">ActivityManagerNative.getDefault());</span><br><span class="line">service.onCreate();</span><br><span class="line">mServices.put(data.token, service);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ActivityManagerNative.getDefault().serviceDoneExecuting(</span><br><span class="line">data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Unable to create service "</span> + data.info.name</span><br><span class="line">+ <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法中service = (Service) cl.loadClass(data.info.name).newInstance();<br>用反射的方式创建了service对象；<br>然后ContextImpl context = ContextImpl.createAppContext(this, packageInfo);又创建了context对象；<br>然后用service.attach将context对象进行参数设置；<br>然后就调用了service.onCreate();<br>这就是Service的启动过程。</p><p>在刚刚realStartServiceLocked方法中：调用了 app.thread.scheduleCreateService方法后又调用了：<br>sendServiceArgsLocked(r, execInFg, true);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sendServiceArgsLocked</span><span class="params">(ServiceRecord r, <span class="keyword">boolean</span> execInFg,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">2285</span>            <span class="keyword">boolean</span> oomAdjusted)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line"><span class="number">2286</span>        <span class="keyword">final</span> <span class="keyword">int</span> N = r.pendingStarts.size();</span><br><span class="line"><span class="number">2287</span>        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">2288</span>            <span class="keyword">return</span>;</span><br><span class="line"><span class="number">2289</span>        &#125;</span><br><span class="line"><span class="number">2290</span></span><br><span class="line"><span class="number">2291</span>        ArrayList&lt;ServiceStartArgs&gt; args = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="number">2292</span></span><br><span class="line"><span class="number">2293</span>        <span class="keyword">while</span> (r.pendingStarts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">2294</span>            ServiceRecord.StartItem si = r.pendingStarts.remove(<span class="number">0</span>);</span><br><span class="line"><span class="number">2295</span>            <span class="keyword">if</span> (DEBUG_SERVICE) &#123;</span><br><span class="line"><span class="number">2296</span>                Slog.v(TAG_SERVICE, <span class="string">"Sending arguments to: "</span></span><br><span class="line"><span class="number">2297</span>                        + r + <span class="string">" "</span> + r.intent + <span class="string">" args="</span> + si.intent);</span><br><span class="line"><span class="number">2298</span>            &#125;</span><br><span class="line"><span class="number">2299</span>            <span class="keyword">if</span> (si.intent == <span class="keyword">null</span> &amp;&amp; N &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">2300</span>                <span class="comment">// If somehow we got a dummy null intent in the middle,</span></span><br><span class="line"><span class="number">2301</span>                <span class="comment">// then skip it.  DO NOT skip a null intent when it is</span></span><br><span class="line"><span class="number">2302</span>                <span class="comment">// the only one in the list -- this is to support the</span></span><br><span class="line"><span class="number">2303</span>                <span class="comment">// onStartCommand(null) case.</span></span><br><span class="line"><span class="number">2304</span>                <span class="keyword">continue</span>;</span><br><span class="line"><span class="number">2305</span>            &#125;</span><br><span class="line"><span class="number">2306</span>            si.deliveredTime = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">2307</span>            r.deliveredStarts.add(si);</span><br><span class="line"><span class="number">2308</span>            si.deliveryCount++;</span><br><span class="line"><span class="number">2309</span>            <span class="keyword">if</span> (si.neededGrants != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">2310</span>                mAm.grantUriPermissionUncheckedFromIntentLocked(si.neededGrants,</span><br><span class="line"><span class="number">2311</span>                        si.getUriPermissionsLocked());</span><br><span class="line"><span class="number">2312</span>            &#125;</span><br><span class="line"><span class="number">2313</span>            mAm.grantEphemeralAccessLocked(r.userId, si.intent,</span><br><span class="line"><span class="number">2314</span>                    r.appInfo.uid, UserHandle.getAppId(si.callingId));</span><br><span class="line"><span class="number">2315</span>            bumpServiceExecutingLocked(r, execInFg, <span class="string">"start"</span>);</span><br><span class="line"><span class="number">2316</span>            <span class="keyword">if</span> (!oomAdjusted) &#123;</span><br><span class="line"><span class="number">2317</span>                oomAdjusted = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">2318</span>                mAm.updateOomAdjLocked(r.app, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">2319</span>            &#125;</span><br><span class="line"><span class="number">2320</span>            <span class="keyword">if</span> (r.fgRequired &amp;&amp; !r.fgWaiting) &#123;</span><br><span class="line"><span class="number">2321</span>                <span class="keyword">if</span> (!r.isForeground) &#123;</span><br><span class="line"><span class="number">2322</span>                    <span class="keyword">if</span> (DEBUG_BACKGROUND_CHECK) &#123;</span><br><span class="line"><span class="number">2323</span>                        Slog.i(TAG, <span class="string">"Launched service must call startForeground() within timeout: "</span> + r);</span><br><span class="line"><span class="number">2324</span>                    &#125;</span><br><span class="line"><span class="number">2325</span>                    scheduleServiceForegroundTransitionTimeoutLocked(r);</span><br><span class="line"><span class="number">2326</span>                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">2327</span>                    <span class="keyword">if</span> (DEBUG_BACKGROUND_CHECK) &#123;</span><br><span class="line"><span class="number">2328</span>                        Slog.i(TAG, <span class="string">"Service already foreground; no new timeout: "</span> + r);</span><br><span class="line"><span class="number">2329</span>                    &#125;</span><br><span class="line"><span class="number">2330</span>                    r.fgRequired = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2331</span>                &#125;</span><br><span class="line"><span class="number">2332</span>            &#125;</span><br><span class="line"><span class="number">2333</span>            <span class="keyword">int</span> flags = <span class="number">0</span>;</span><br><span class="line"><span class="number">2334</span>            <span class="keyword">if</span> (si.deliveryCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">2335</span>                flags |= Service.START_FLAG_RETRY;</span><br><span class="line"><span class="number">2336</span>            &#125;</span><br><span class="line"><span class="number">2337</span>            <span class="keyword">if</span> (si.doneExecutingCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">2338</span>                flags |= Service.START_FLAG_REDELIVERY;</span><br><span class="line"><span class="number">2339</span>            &#125;</span><br><span class="line"><span class="number">2340</span>            args.add(<span class="keyword">new</span> ServiceStartArgs(si.taskRemoved, si.id, flags, si.intent));</span><br><span class="line"><span class="number">2341</span>        &#125;</span><br><span class="line"><span class="number">2342</span></span><br><span class="line"><span class="number">2343</span>        ParceledListSlice&lt;ServiceStartArgs&gt; slice = <span class="keyword">new</span> ParceledListSlice&lt;&gt;(args);</span><br><span class="line"><span class="number">2344</span>        slice.setInlineCountLimit(<span class="number">4</span>);</span><br><span class="line"><span class="number">2345</span>        Exception caughtException = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">2346</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">2347</span>            r.app.thread.scheduleServiceArgs(r, slice);</span><br><span class="line"><span class="number">2348</span>        &#125; <span class="keyword">catch</span> (TransactionTooLargeException e) &#123;</span><br><span class="line"><span class="number">2349</span>            <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Transaction too large for "</span> + args.size()</span><br><span class="line"><span class="number">2350</span>                    + <span class="string">" args, first: "</span> + args.get(<span class="number">0</span>).args);</span><br><span class="line"><span class="number">2351</span>            Slog.w(TAG, <span class="string">"Failed delivering service starts"</span>, e);</span><br><span class="line"><span class="number">2352</span>            caughtException = e;</span><br><span class="line"><span class="number">2353</span>        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">2354</span>            <span class="comment">// Remote process gone...  we'll let the normal cleanup take care of this.</span></span><br><span class="line"><span class="number">2355</span>            <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while sending args: "</span> + r);</span><br><span class="line"><span class="number">2356</span>            Slog.w(TAG, <span class="string">"Failed delivering service starts"</span>, e);</span><br><span class="line"><span class="number">2357</span>            caughtException = e;</span><br><span class="line"><span class="number">2358</span>        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="number">2359</span>            Slog.w(TAG, <span class="string">"Unexpected exception"</span>, e);</span><br><span class="line"><span class="number">2360</span>            caughtException = e;</span><br><span class="line"><span class="number">2361</span>        &#125;</span><br><span class="line"><span class="number">2362</span></span><br><span class="line"><span class="number">2363</span>        <span class="keyword">if</span> (caughtException != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">2364</span>            <span class="comment">// Keep nesting count correct</span></span><br><span class="line"><span class="number">2365</span>            <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</span><br><span class="line"><span class="number">2366</span>            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.size(); i++) &#123;</span><br><span class="line"><span class="number">2367</span>                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line"><span class="number">2368</span>            &#125;</span><br><span class="line"><span class="number">2369</span>            <span class="keyword">if</span> (caughtException <span class="keyword">instanceof</span> TransactionTooLargeException) &#123;</span><br><span class="line"><span class="number">2370</span>                <span class="keyword">throw</span> (TransactionTooLargeException)caughtException;</span><br><span class="line"><span class="number">2371</span>            &#125;</span><br><span class="line"><span class="number">2372</span>        &#125;</span><br><span class="line"><span class="number">2373</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>看到有这么一句r.app.thread.scheduleServiceArgs(r, slice);<br>于是回到ActivityThread中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleServiceArgs</span><span class="params">(IBinder token, <span class="keyword">boolean</span> taskRemoved, <span class="keyword">int</span> startId,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> flags ,Intent args)</span> </span>&#123;</span><br><span class="line">ServiceArgsData s = <span class="keyword">new</span> ServiceArgsData();</span><br><span class="line">s.token = token;</span><br><span class="line">s.taskRemoved = taskRemoved;</span><br><span class="line">s.startId = startId;</span><br><span class="line">s.flags = flags;</span><br><span class="line">s.args = args;</span><br><span class="line"></span><br><span class="line">sendMessage(H.SERVICE_ARGS, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是去H中找对应的处理case：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SERVICE_ARGS:</span><br><span class="line">Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, (<span class="string">"serviceStart: "</span> + String.valueOf(msg.obj)));</span><br><span class="line">handleServiceArgs((ServiceArgsData)msg.obj);</span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>接着去看handleServiceArgs：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleServiceArgs</span><span class="params">(ServiceArgsData data)</span> </span>&#123;</span><br><span class="line">Service s = mServices.get(data.token);</span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data.args != <span class="keyword">null</span>) &#123;</span><br><span class="line">data.args.setExtrasClassLoader(s.getClassLoader());</span><br><span class="line">data.args.prepareToEnterProcess();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span> (!data.taskRemoved) &#123;</span><br><span class="line">res = s.onStartCommand(data.args, data.flags, data.startId);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">s.onTaskRemoved(data.args);</span><br><span class="line">res = Service.START_TASK_REMOVED_COMPLETE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueuedWork.waitToFinish();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ActivityManagerNative.getDefault().serviceDoneExecuting(</span><br><span class="line">data.token, SERVICE_DONE_EXECUTING_START, data.startId, res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">&#125;</span><br><span class="line">ensureJitEnabled();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(s, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Unable to start service "</span> + s</span><br><span class="line">+ <span class="string">" with "</span> + data.args + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>s.onStartCommand中s就是上面创建的service对象。那么onStartCommand方法就是在这里调用的。至此service启动过程完毕。下面画图看下这个流程：<br><img src="http://opq81riyh.bkt.clouddn.com/startservice.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于8-0源码解析：startService-启动过程&quot;&gt;&lt;a href=&quot;#基于8-0源码解析：startService-启动过程&quot; class=&quot;headerlink&quot; title=&quot;基于8.0源码解析：startService 启动过程&quot;&gt;&lt;/a&gt;基于8.0
      
    
    </summary>
    
      <category term="源码解析" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="源码解析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>RemoteViews一 仿qq音乐自定义通知栏实现快捷切换歌曲</title>
    <link href="http://yoursite.com/2018/01/19/RemoteViews%E4%B8%80-%E4%BB%BFqq%E9%9F%B3%E4%B9%90%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%9F%A5%E6%A0%8F%E5%AE%9E%E7%8E%B0%E5%BF%AB%E6%8D%B7%E5%88%87%E6%8D%A2%E6%AD%8C%E6%9B%B2/"/>
    <id>http://yoursite.com/2018/01/19/RemoteViews一-仿qq音乐自定义通知栏实现快捷切换歌曲/</id>
    <published>2018-01-19T09:24:05.000Z</published>
    <updated>2018-01-19T09:31:09.936Z</updated>
    
    <content type="html"><![CDATA[<h5 id="RemoteViews一-仿qq音乐自定义通知栏实现快捷切换歌曲"><a href="#RemoteViews一-仿qq音乐自定义通知栏实现快捷切换歌曲" class="headerlink" title="RemoteViews一 仿qq音乐自定义通知栏实现快捷切换歌曲"></a>RemoteViews一 仿qq音乐自定义通知栏实现快捷切换歌曲</h5><h3 id="定义：RemoteViews表示一种view结构，它可以在其他进程中显示，由于它在其它进程中，为了能够更新它的界面，RemoteViews提供了一组基础的操作用于更新它的界面。"><a href="#定义：RemoteViews表示一种view结构，它可以在其他进程中显示，由于它在其它进程中，为了能够更新它的界面，RemoteViews提供了一组基础的操作用于更新它的界面。" class="headerlink" title="定义：RemoteViews表示一种view结构，它可以在其他进程中显示，由于它在其它进程中，为了能够更新它的界面，RemoteViews提供了一组基础的操作用于更新它的界面。"></a>定义：RemoteViews表示一种view结构，它可以在其他进程中显示，由于它在其它进程中，为了能够更新它的界面，RemoteViews提供了一组基础的操作用于更新它的界面。</h3><h2 id="本文大概需要5分钟，从以下三方面讲解。文章底部有总结，急性子可以直接看总结，快速掌握知识点。"><a href="#本文大概需要5分钟，从以下三方面讲解。文章底部有总结，急性子可以直接看总结，快速掌握知识点。" class="headerlink" title="本文大概需要5分钟，从以下三方面讲解。文章底部有总结，急性子可以直接看总结，快速掌握知识点。"></a>本文大概需要5分钟，从以下三方面讲解。文章底部有总结，急性子可以直接看总结，快速掌握知识点。</h2><ol><li>一、成果展示</li><li>二、代码讲解</li><li>三、总结</li></ol><h6 id="一、成果展示"><a href="#一、成果展示" class="headerlink" title="一、成果展示"></a>一、成果展示</h6><h4 id="仿照qq音乐通知栏切换歌曲（缺图，只能以文字代替）"><a href="#仿照qq音乐通知栏切换歌曲（缺图，只能以文字代替）" class="headerlink" title="仿照qq音乐通知栏切换歌曲（缺图，只能以文字代替）"></a>仿照qq音乐通知栏切换歌曲（缺图，只能以文字代替）</h4><p><img src="http://opq81riyh.bkt.clouddn.com/remoteviews.png" alt="remoteviews"></p><h4 id="点击下一曲后，执行相应的代码（以相应Toast代替）"><a href="#点击下一曲后，执行相应的代码（以相应Toast代替）" class="headerlink" title="点击下一曲后，执行相应的代码（以相应Toast代替）"></a>点击下一曲后，执行相应的代码（以相应Toast代替）</h4><p><img src="http://opq81riyh.bkt.clouddn.com/pause.png" alt="pause"></p><h4 id="后台启动相应的service执行切换歌曲和暂停等逻辑"><a href="#后台启动相应的service执行切换歌曲和暂停等逻辑" class="headerlink" title="后台启动相应的service执行切换歌曲和暂停等逻辑"></a>后台启动相应的service执行切换歌曲和暂停等逻辑</h4><p><img src="http://opq81riyh.bkt.clouddn.com/log.png" alt="log"></p><h4 id="二、代码讲解"><a href="#二、代码讲解" class="headerlink" title="二、代码讲解"></a>二、代码讲解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.com.remoteviews;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Notification;</span><br><span class="line"><span class="keyword">import</span> android.app.NotificationManager;</span><br><span class="line"><span class="keyword">import</span> android.app.PendingIntent;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.RemoteViews;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.R.string.no;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">initRemoteViews();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRemoteViews</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification();</span><br><span class="line">notification.icon = R.mipmap.ic_launcher;</span><br><span class="line">notification.tickerText = <span class="string">"remoteviewTest"</span>;</span><br><span class="line">notification.when = System.currentTimeMillis();</span><br><span class="line">notification.flags = Notification.FLAG_AUTO_CANCEL;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">RemoteViews remoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_remoteviews);</span><br><span class="line">remoteViews.setTextViewText(R.id.tv_remote, <span class="string">"暧昧"</span>);</span><br><span class="line">remoteViews.setImageViewResource(R.id.iv_remote,R.mipmap.ic_launcher);</span><br><span class="line">Intent changeService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ChangeService.class);</span><br><span class="line">changeService.putExtra(<span class="string">"data"</span>,<span class="string">"下一曲"</span>);</span><br><span class="line">PendingIntent changeIntent = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">1</span>, changeService, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">changeService.putExtra(<span class="string">"data"</span>,<span class="string">"暂停"</span>);</span><br><span class="line">PendingIntent pauseIntent = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">2</span>, changeService, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.tv_pause,pauseIntent);</span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.tv_next,changeIntent);</span><br><span class="line">PendingIntent clickIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ThirdActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.iv_remote,clickIntent);</span><br><span class="line">notification.contentView = remoteViews;</span><br><span class="line">notification.contentIntent = pendingIntent;</span><br><span class="line">NotificationManager notifacationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">notifacationManager.notify(<span class="number">2</span>,notification);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是核心代码，以下会分块讲解：<br>首先需要notification，设置参数，icon应该是每一首歌曲对应的图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = <span class="keyword">new</span> Notification();</span><br><span class="line">notification.icon = R.mipmap.ic_launcher;</span><br><span class="line">notification.tickerText = <span class="string">"remoteviewTest"</span>;</span><br><span class="line">notification.when = System.currentTimeMillis();</span><br><span class="line">notification.flags = Notification.FLAG_AUTO_CANCEL;</span><br></pre></td></tr></table></figure></p><p>然后构造出PendingIntent<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br></pre></td></tr></table></figure></p><p>再然后，构造出remoteviews，它有两个参数，一个是包名，另一个是布局的id，这里我写了一个简单的展示在通知栏的布局。<br>注意了，remoteview设置文字和图片资源都没有findViewById，只能通过这种set方法，将对应的id和资源传进去。（这里先说用法，remoteview机制的原理在后面讲解）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RemoteViews remoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_remoteviews);</span><br><span class="line">remoteViews.setTextViewText(R.id.tv_remote, <span class="string">"暧昧"</span>);</span><br><span class="line">remoteViews.setImageViewResource(R.id.iv_remote,R.mipmap.ic_launcher);</span><br></pre></td></tr></table></figure></p><p>布局的代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">android:orientation=<span class="string">"horizontal"</span></span><br><span class="line">android:gravity=<span class="string">"center_vertical"</span></span><br><span class="line">android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">android:id=<span class="string">"@+id/iv_remote"</span></span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:src=<span class="string">"@mipmap/ic_launcher_round"</span>/&gt;</span><br><span class="line">&lt;TextView</span><br><span class="line">android:id=<span class="string">"@+id/tv_remote"</span></span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_marginLeft=<span class="string">"10dp"</span></span><br><span class="line">android:text=<span class="string">"i am a apple"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">android:id=<span class="string">"@+id/tv_pause"</span></span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_marginLeft=<span class="string">"10dp"</span></span><br><span class="line">android:text=<span class="string">"暂停"</span>/&gt;</span><br><span class="line">&lt;TextView</span><br><span class="line">android:id=<span class="string">"@+id/tv_next"</span></span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_marginLeft=<span class="string">"10dp"</span></span><br><span class="line">android:text=<span class="string">"下一曲"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;TextView</span><br><span class="line">android:id=<span class="string">"@+id/tv_close"</span></span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_marginLeft=<span class="string">"10dp"</span></span><br><span class="line">android:text=<span class="string">"关闭"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p>这里要澄清以下，不是非要用textview，而是我没有图，只能用文字代替，等以后又图了做个好看的哈哈。</p><p>下面说下remoteview上面点击事件，同理没有直接设置点击事件的方法（进它的源码瞅一眼就知道为啥了）,还是只能传进去penddingIntent，由于qq音乐点击通知栏按钮直接切换歌曲，界面不发生变化所以，这块的penddingIntent用的PendingIntent.getService。当然，点击整个通知栏要跳到qq音乐主界面的话，就是底下PendingIntent.getActivity了。<br>有一点，PendingIntent两个如果requescode一样，只是extras不一样会被认为是同一个peddingInetent。原因是，区分PenddingIntent是由内部intent和requescode，而内部intent区分是由componentName和intent-filter，ectras不参与Intent的匹配过程。<br>如果notify方法的id是常量，那么不管PenddingIntent是否匹配，后面的通知会直接替换前面的通知。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Intent changeService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ChangeService.class);</span><br><span class="line">changeService.putExtra(<span class="string">"data"</span>,<span class="string">"下一曲"</span>);</span><br><span class="line">PendingIntent changeIntent = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">1</span>, changeService, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">changeService.putExtra(<span class="string">"data"</span>,<span class="string">"暂停"</span>);</span><br><span class="line">PendingIntent pauseIntent = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">2</span>, changeService, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.tv_pause,pauseIntent);</span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.tv_next,changeIntent);</span><br><span class="line">PendingIntent clickIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ThirdActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">remoteViews.setOnClickPendingIntent(R.id.iv_remote,clickIntent);</span><br></pre></td></tr></table></figure></p><p>最后将自定义的remoteviews设置给notification的contentview<br>并且获取系统NotificationManager，通过notifacationManager.notify方法<br>将自定义的通知工具栏发出，展示在通知栏中国呢。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">notification.contentView = remoteViews;</span><br><span class="line">notification.contentIntent = pendingIntent;</span><br><span class="line">NotificationManager notifacationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">notifacationManager.notify(<span class="number">2</span>,notification);</span><br></pre></td></tr></table></figure></p><p>最后，本文只是仿照qq通知栏操作界面将remoteview的使用讲解一下，并不是一个播放器，再次强调，不是在做播放器。<br>我这么想的，如果要做qq音乐的播放器通知更新，应该service里面去更新notinication的界面，比如，收到点击下一曲的penddingIntent，service去播放下一首歌曲，同时更新remoteview的界面（歌曲名字和歌曲对应的图片）<br>对于qq音乐的其他操作，比如点击通知栏进入qq音乐主界面，就是notification的pendingIntent，它是由PenddingIntent.getActivity获取的。其他与qq音乐相关的先不管了，本文只提与remoteview有关的东西。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><ol><li>RemoteViews构造方法接受一个包名，一个layout的id；</li><li>RemoteViews设置图片资源和文字资源接受id和资源；</li><li>没有直接方法设置点击事件，只能通过PenddingIntent相关方法实现；</li><li>将RemoteViews设置在notification中，通过NotificationManager的notify方法实现。</li><li>注意点：notify方法的id，penddingIntent的requestCode能用来区分PenddingIntent是不是同一个。</li></ol><h4 id="后记，RemoteViews还有一个最重要的使用就是桌面小部件（AppWidgetProvider），下一篇会写一个类似天气的桌面部件，并完成RemoteViews的原理讲解。"><a href="#后记，RemoteViews还有一个最重要的使用就是桌面小部件（AppWidgetProvider），下一篇会写一个类似天气的桌面部件，并完成RemoteViews的原理讲解。" class="headerlink" title="后记，RemoteViews还有一个最重要的使用就是桌面小部件（AppWidgetProvider），下一篇会写一个类似天气的桌面部件，并完成RemoteViews的原理讲解。"></a>后记，RemoteViews还有一个最重要的使用就是桌面小部件（AppWidgetProvider），下一篇会写一个类似天气的桌面部件，并完成RemoteViews的原理讲解。</h4><p><a href="http://blog.csdn.net/lantier743865" target="_blank" rel="noopener">我的csdn博客</a><br>欢迎关注我的微信公众号：<br><img src="http://opq81riyh.bkt.clouddn.com/qrcode_for_gh_1d2b09f3edbf_258%20%282%29.jpg" alt="微信公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;RemoteViews一-仿qq音乐自定义通知栏实现快捷切换歌曲&quot;&gt;&lt;a href=&quot;#RemoteViews一-仿qq音乐自定义通知栏实现快捷切换歌曲&quot; class=&quot;headerlink&quot; title=&quot;RemoteViews一 仿qq音乐自定义通知栏实现快捷
      
    
    </summary>
    
      <category term="源码解析" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>基于8.0源码解析：Activity启动流程</title>
    <link href="http://yoursite.com/2018/01/17/%E5%9F%BA%E4%BA%8E8.0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%9AActivity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/17/基于8.0源码解析：Activity启动流程/</id>
    <published>2018-01-17T12:18:45.000Z</published>
    <updated>2018-01-25T11:26:34.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于8-0源码解析：Activity启动流程"><a href="#基于8-0源码解析：Activity启动流程" class="headerlink" title="基于8.0源码解析：Activity启动流程"></a>基于8.0源码解析：Activity启动流程</h1><p>标签（空格分隔）： 未分类</p><hr><p>调用startActivity，会执行Activity中的startActivity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.startActivity(intent, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后调用它的重载方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Note we want to go through this call for compatibility with</span></span><br><span class="line"><span class="comment">// applications that may have overridden the method.</span></span><br><span class="line">startActivityForResult(intent, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后会调用startActivityForResult<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Bundle options)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">options = transferSpringboardActivityOptions(options);</span><br><span class="line">Instrumentation.ActivityResult ar =</span><br><span class="line">mInstrumentation.execStartActivity(</span><br><span class="line"><span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">intent, requestCode, options);</span><br><span class="line"><span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</span><br><span class="line">mMainThread.sendActivityResult(</span><br><span class="line">mToken, mEmbeddedID, requestCode, ar.getResultCode(),</span><br><span class="line">ar.getResultData());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// If this start is requesting a result, we can avoid making</span></span><br><span class="line"><span class="comment">// the activity visible until the result is received.  Setting</span></span><br><span class="line"><span class="comment">// this code during onCreate(Bundle savedInstanceState) or onResume() will keep the</span></span><br><span class="line"><span class="comment">// activity hidden during this time, to avoid flickering.</span></span><br><span class="line"><span class="comment">// This can only be done when a result is requested because</span></span><br><span class="line"><span class="comment">// that guarantees we will get information back when the</span></span><br><span class="line"><span class="comment">// activity is finished, no matter what happens to it.</span></span><br><span class="line">mStartedActivity = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cancelInputsAndStartExitTransition(options);</span><br><span class="line"><span class="comment">// TODO Consider clearing/flushing other event sources and events for child windows.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Note we want to go through this method for compatibility with</span></span><br><span class="line"><span class="comment">// existing applications that may have overridden it.</span></span><br><span class="line">mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后会调用mInstrumentation的execStartActivity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mInstrumentation.execStartActivity(</span><br><span class="line"><span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">intent, requestCode, options);</span><br></pre></td></tr></table></figure></p><p>mInstrumentation是android系统中启动activity的一个实际操作类，也就是说activity在应用进程端的启动实际上就是instrumentation执行的。实际上activity的启动分为应用进程端的启动和systemserver服务端的启动。多个应用进程相互配合最终完成了activity在系统中的启动，而在应用进程端的启动实际的操作类就是intrumentation来执行的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Context who, IBinder contextThread, IBinder token, Activity target,</span></span></span><br><span class="line"><span class="function"><span class="params">Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">Uri referrer = target != <span class="keyword">null</span> ? target.onProvideReferrer() : <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (referrer != <span class="keyword">null</span>) &#123;</span><br><span class="line">intent.putExtra(Intent.EXTRA_REFERRER, referrer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = mActivityMonitors.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line"><span class="keyword">final</span> ActivityMonitor am = mActivityMonitors.get(i);</span><br><span class="line"><span class="keyword">if</span> (am.match(who, <span class="keyword">null</span>, intent)) &#123;</span><br><span class="line">am.mHits++;</span><br><span class="line"><span class="keyword">if</span> (am.isBlocking()) &#123;</span><br><span class="line"><span class="keyword">return</span> requestCode &gt;= <span class="number">0</span> ? am.getResult() : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">intent.migrateExtraStreamToClipData();</span><br><span class="line">intent.prepareToLeaveProcess(who);</span><br><span class="line"><span class="keyword">int</span> result = ActivityManagerNative.getDefault()</span><br><span class="line">.startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br><span class="line">checkStartActivityResult(result, intent);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是发现了这个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = ActivityManagerNative.getDefault()</span><br><span class="line">.startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">token, target, requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br></pre></td></tr></table></figure></p><p>ActivityManagerNative.getDefault() 是什么？<br>到ActivityManagerNative中看一眼<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gDefault.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>gDefault.get()又是什么？先看gDefault<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service binder = "</span> + b);</span><br><span class="line">&#125;</span><br><span class="line">IActivityManager am = asInterface(b);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service = "</span> + am);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> am;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现启动了IActivityManager am = asInterface(b);<br>然后看asInterface(b)的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">IActivityManager in =</span><br><span class="line">(IActivityManager)obj.queryLocalInterface(descriptor);</span><br><span class="line"><span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActivityManagerProxy(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后直击返回了ActivityManagerProxy。二ActivityManagerProxy继承自IActivityManager，IActivityManager extends IInterface。<br>应用进程与systemserver进程属于两个不同的进程，进程之间需要通讯，android系统采取了自身设计的binder机制，这里的activityManagerProxy和ActivityManagerNative都是继承IAcitivityManager，而Systemserver进程中的ActivityManagerServise对象则继承于ActivityManagerNative<br>Binder –&gt; ActivityManagerNative/ActivityManagerProxy –&gt;ActivityManagerService<br>这样ActivityManagerNative和ActivityManagerProxy相当于一个binder的客户端，而ActivityManagerService相当于Binder的服务端。这样当ActivityManagerNative调用接口方法的时候底层通过Binder driver就会将请求数据与请求传递给server端，并在server端进行具体的接口逻辑。binder机制是单向的，异步的。<br>继续看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = ActivityManagerNative.getDefault()</span><br><span class="line">.startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">token, target, requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br></pre></td></tr></table></figure></p><p>可以看到涉及到了binder数据传输机制，说明会调用systemserver进程<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">Parcel data = Parcel.obtain();</span><br><span class="line">Parcel reply = Parcel.obtain();</span><br><span class="line">data.writeInterfaceToken(IActivityManager.descriptor);</span><br><span class="line">data.writeStrongBinder(caller != <span class="keyword">null</span> ? caller.asBinder() : <span class="keyword">null</span>);</span><br><span class="line">data.writeString(callingPackage);</span><br><span class="line">intent.writeToParcel(data, <span class="number">0</span>);</span><br><span class="line">data.writeString(resolvedType);</span><br><span class="line">data.writeStrongBinder(resultTo);</span><br><span class="line">data.writeString(resultWho);</span><br><span class="line">data.writeInt(requestCode);</span><br><span class="line">data.writeInt(startFlags);</span><br><span class="line"><span class="keyword">if</span> (profilerInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">data.writeInt(<span class="number">1</span>);</span><br><span class="line">profilerInfo.writeToParcel(data, Parcelable.PARCELABLE_WRITE_RETURN_VALUE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">data.writeInt(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">data.writeInt(<span class="number">1</span>);</span><br><span class="line">options.writeToParcel(data, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">data.writeInt(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">reply.readException();</span><br><span class="line"><span class="keyword">int</span> result = reply.readInt();</span><br><span class="line">reply.recycle();</span><br><span class="line">data.recycle();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ActivityManagerService中查看startActivity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">UserHandle.getCallingUserId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>又调用了startActivityAsUser<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">enforceNotIsolatedCaller(<span class="string">"startActivity"</span>);</span><br><span class="line">userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</span><br><span class="line">userId, <span class="keyword">false</span>, ALLOW_FULL_ONLY, <span class="string">"startActivity"</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line"><span class="keyword">return</span> mActivityStarter.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</span><br><span class="line">resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</span><br><span class="line">profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, bOptions, <span class="keyword">false</span>, userId, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line"><span class="string">"startActivityAsUser"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后调用到了ActivityStarter的startActivityMayWait方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">669</span>            String callingPackage, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">670</span>            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">671</span>            IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">672</span>            ProfilerInfo profilerInfo, WaitResult outResult,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">673</span>            Configuration globalConfig, Bundle bOptions, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">674</span>            IActivityContainer iContainer, TaskRecord inTask, String reason)</span> </span>&#123;</span><br><span class="line"><span class="number">675</span>        <span class="comment">// Refuse possible leaked file descriptors</span></span><br><span class="line"><span class="number">676</span>        <span class="keyword">if</span> (intent != <span class="keyword">null</span> &amp;&amp; intent.hasFileDescriptors()) &#123;</span><br><span class="line"><span class="number">677</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</span><br><span class="line"><span class="number">678</span>        &#125;</span><br><span class="line"><span class="number">679</span>        mSupervisor.mActivityMetricsLogger.notifyActivityLaunching();</span><br><span class="line"><span class="number">680</span>        <span class="keyword">boolean</span> componentSpecified = intent.getComponent() != <span class="keyword">null</span>;</span><br><span class="line"><span class="number">681</span></span><br><span class="line"><span class="number">682</span>        <span class="comment">// Save a copy in case ephemeral needs it</span></span><br><span class="line"><span class="number">683</span>        <span class="keyword">final</span> Intent ephemeralIntent = <span class="keyword">new</span> Intent(intent);</span><br><span class="line"><span class="number">684</span>        <span class="comment">// Don't modify the client's object!</span></span><br><span class="line"><span class="number">685</span>        intent = <span class="keyword">new</span> Intent(intent);</span><br><span class="line"><span class="number">686</span>        <span class="keyword">if</span> (componentSpecified</span><br><span class="line"><span class="number">687</span>                &amp;&amp; intent.getData() != <span class="keyword">null</span></span><br><span class="line"><span class="number">688</span>                &amp;&amp; Intent.ACTION_VIEW.equals(intent.getAction())</span><br><span class="line"><span class="number">689</span>                &amp;&amp; mService.getPackageManagerInternalLocked()</span><br><span class="line"><span class="number">690</span>                        .isInstantAppInstallerComponent(intent.getComponent())) &#123;</span><br><span class="line"><span class="number">691</span>            <span class="comment">// intercept intents targeted directly to the ephemeral installer the</span></span><br><span class="line"><span class="number">692</span>            <span class="comment">// ephemeral installer should never be started with a raw URL; instead</span></span><br><span class="line"><span class="number">693</span>            <span class="comment">// adjust the intent so it looks like a "normal" instant app launch</span></span><br><span class="line"><span class="number">694</span>            intent.setComponent(<span class="keyword">null</span> <span class="comment">/*component*/</span>);</span><br><span class="line"><span class="number">695</span>            componentSpecified = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">696</span>        &#125;</span><br><span class="line"><span class="number">697</span></span><br><span class="line"><span class="number">698</span>        ResolveInfo rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId);</span><br><span class="line"><span class="number">699</span>        <span class="keyword">if</span> (rInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">700</span>            UserInfo userInfo = mSupervisor.getUserInfo(userId);</span><br><span class="line"><span class="number">701</span>            <span class="keyword">if</span> (userInfo != <span class="keyword">null</span> &amp;&amp; userInfo.isManagedProfile()) &#123;</span><br><span class="line"><span class="number">702</span>                <span class="comment">// Special case for managed profiles, if attempting to launch non-cryto aware</span></span><br><span class="line"><span class="number">703</span>                <span class="comment">// app in a locked managed profile from an unlocked parent allow it to resolve</span></span><br><span class="line"><span class="number">704</span>                <span class="comment">// as user will be sent via confirm credentials to unlock the profile.</span></span><br><span class="line"><span class="number">705</span>                UserManager userManager = UserManager.get(mService.mContext);</span><br><span class="line"><span class="number">706</span>                <span class="keyword">boolean</span> profileLockedAndParentUnlockingOrUnlocked = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">707</span>                <span class="keyword">long</span> token = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">708</span>                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">709</span>                    UserInfo parent = userManager.getProfileParent(userId);</span><br><span class="line"><span class="number">710</span>                    profileLockedAndParentUnlockingOrUnlocked = (parent != <span class="keyword">null</span>)</span><br><span class="line"><span class="number">711</span>                            &amp;&amp; userManager.isUserUnlockingOrUnlocked(parent.id)</span><br><span class="line"><span class="number">712</span>                            &amp;&amp; !userManager.isUserUnlockingOrUnlocked(userId);</span><br><span class="line"><span class="number">713</span>                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">714</span>                    Binder.restoreCallingIdentity(token);</span><br><span class="line"><span class="number">715</span>                &#125;</span><br><span class="line"><span class="number">716</span>                <span class="keyword">if</span> (profileLockedAndParentUnlockingOrUnlocked) &#123;</span><br><span class="line"><span class="number">717</span>                    rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId,</span><br><span class="line"><span class="number">718</span>                            PackageManager.MATCH_DIRECT_BOOT_AWARE</span><br><span class="line"><span class="number">719</span>                                    | PackageManager.MATCH_DIRECT_BOOT_UNAWARE);</span><br><span class="line"><span class="number">720</span>                &#125;</span><br><span class="line"><span class="number">721</span>            &#125;</span><br><span class="line"><span class="number">722</span>        &#125;</span><br><span class="line"><span class="number">723</span>        <span class="comment">// Collect information about the target of the Intent.</span></span><br><span class="line"><span class="number">724</span>        ActivityInfo aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, profilerInfo);</span><br><span class="line"><span class="number">725</span></span><br><span class="line"><span class="number">726</span>        ActivityOptions options = ActivityOptions.fromBundle(bOptions);</span><br><span class="line"><span class="number">727</span>        ActivityStackSupervisor.ActivityContainer container =</span><br><span class="line"><span class="number">728</span>                (ActivityStackSupervisor.ActivityContainer)iContainer;</span><br><span class="line"><span class="number">729</span>        <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line"><span class="number">730</span>            <span class="keyword">if</span> (container != <span class="keyword">null</span> &amp;&amp; container.mParentActivity != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line"><span class="number">731</span>                    container.mParentActivity.state != RESUMED) &#123;</span><br><span class="line"><span class="number">732</span>                <span class="comment">// Cannot start a child activity if the parent is not resumed.</span></span><br><span class="line"><span class="number">733</span>                <span class="keyword">return</span> ActivityManager.START_CANCELED;</span><br><span class="line"><span class="number">734</span>            &#125;</span><br><span class="line"><span class="number">735</span>            <span class="keyword">final</span> <span class="keyword">int</span> realCallingPid = Binder.getCallingPid();</span><br><span class="line"><span class="number">736</span>            <span class="keyword">final</span> <span class="keyword">int</span> realCallingUid = Binder.getCallingUid();</span><br><span class="line"><span class="number">737</span>            <span class="keyword">int</span> callingPid;</span><br><span class="line"><span class="number">738</span>            <span class="keyword">if</span> (callingUid &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">739</span>                callingPid = -<span class="number">1</span>;</span><br><span class="line"><span class="number">740</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (caller == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">741</span>                callingPid = realCallingPid;</span><br><span class="line"><span class="number">742</span>                callingUid = realCallingUid;</span><br><span class="line"><span class="number">743</span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">744</span>                callingPid = callingUid = -<span class="number">1</span>;</span><br><span class="line"><span class="number">745</span>            &#125;</span><br><span class="line"><span class="number">746</span></span><br><span class="line"><span class="number">747</span>            <span class="keyword">final</span> ActivityStack stack;</span><br><span class="line"><span class="number">748</span>            <span class="keyword">if</span> (container == <span class="keyword">null</span> || container.mStack.isOnHomeDisplay()) &#123;</span><br><span class="line"><span class="number">749</span>                stack = mSupervisor.mFocusedStack;</span><br><span class="line"><span class="number">750</span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">751</span>                stack = container.mStack;</span><br><span class="line"><span class="number">752</span>            &#125;</span><br><span class="line"><span class="number">753</span>            stack.mConfigWillChange = globalConfig != <span class="keyword">null</span></span><br><span class="line"><span class="number">754</span>                    &amp;&amp; mService.getGlobalConfiguration().diff(globalConfig) != <span class="number">0</span>;</span><br><span class="line"><span class="number">755</span>            <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG_CONFIGURATION,</span><br><span class="line"><span class="number">756</span>                    <span class="string">"Starting activity when config will change = "</span> + stack.mConfigWillChange);</span><br><span class="line"><span class="number">757</span></span><br><span class="line"><span class="number">758</span>            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">759</span></span><br><span class="line"><span class="number">760</span>            <span class="keyword">if</span> (aInfo != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line"><span class="number">761</span>                    (aInfo.applicationInfo.privateFlags</span><br><span class="line"><span class="number">762</span>                            &amp; ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">763</span>                <span class="comment">// This may be a heavy-weight process!  Check to see if we already</span></span><br><span class="line"><span class="number">764</span>                <span class="comment">// have another, different heavy-weight process running.</span></span><br><span class="line"><span class="number">765</span>                <span class="keyword">if</span> (aInfo.processName.equals(aInfo.applicationInfo.packageName)) &#123;</span><br><span class="line"><span class="number">766</span>                    <span class="keyword">final</span> ProcessRecord heavy = mService.mHeavyWeightProcess;</span><br><span class="line"><span class="number">767</span>                    <span class="keyword">if</span> (heavy != <span class="keyword">null</span> &amp;&amp; (heavy.info.uid != aInfo.applicationInfo.uid</span><br><span class="line"><span class="number">768</span>                            || !heavy.processName.equals(aInfo.processName))) &#123;</span><br><span class="line"><span class="number">769</span>                        <span class="keyword">int</span> appCallingUid = callingUid;</span><br><span class="line"><span class="number">770</span>                        <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">771</span>                            ProcessRecord callerApp = mService.getRecordForAppLocked(caller);</span><br><span class="line"><span class="number">772</span>                            <span class="keyword">if</span> (callerApp != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">773</span>                                appCallingUid = callerApp.info.uid;</span><br><span class="line"><span class="number">774</span>                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">775</span>                                Slog.w(TAG, <span class="string">"Unable to find app for caller "</span> + caller</span><br><span class="line"><span class="number">776</span>                                        + <span class="string">" (pid="</span> + callingPid + <span class="string">") when starting: "</span></span><br><span class="line"><span class="number">777</span>                                        + intent.toString());</span><br><span class="line"><span class="number">778</span>                                ActivityOptions.abort(options);</span><br><span class="line"><span class="number">779</span>                                <span class="keyword">return</span> ActivityManager.START_PERMISSION_DENIED;</span><br><span class="line"><span class="number">780</span>                            &#125;</span><br><span class="line"><span class="number">781</span>                        &#125;</span><br><span class="line"><span class="number">782</span></span><br><span class="line"><span class="number">783</span>                        IIntentSender target = mService.getIntentSenderLocked(</span><br><span class="line"><span class="number">784</span>                                ActivityManager.INTENT_SENDER_ACTIVITY, <span class="string">"android"</span>,</span><br><span class="line"><span class="number">785</span>                                appCallingUid, userId, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent[] &#123; intent &#125;,</span><br><span class="line"><span class="number">786</span>                                <span class="keyword">new</span> String[] &#123; resolvedType &#125;, PendingIntent.FLAG_CANCEL_CURRENT</span><br><span class="line"><span class="number">787</span>                                        | PendingIntent.FLAG_ONE_SHOT, <span class="keyword">null</span>);</span><br><span class="line"><span class="number">788</span></span><br><span class="line"><span class="number">789</span>                        Intent newIntent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="number">790</span>                        <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">791</span>                            <span class="comment">// Caller is requesting a result.</span></span><br><span class="line"><span class="number">792</span>                            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_HAS_RESULT, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">793</span>                        &#125;</span><br><span class="line"><span class="number">794</span>                        newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_INTENT,</span><br><span class="line"><span class="number">795</span>                                <span class="keyword">new</span> IntentSender(target));</span><br><span class="line"><span class="number">796</span>                        <span class="keyword">if</span> (heavy.activities.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">797</span>                            ActivityRecord hist = heavy.activities.get(<span class="number">0</span>);</span><br><span class="line"><span class="number">798</span>                            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_APP,</span><br><span class="line"><span class="number">799</span>                                    hist.packageName);</span><br><span class="line"><span class="number">800</span>                            newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_CUR_TASK,</span><br><span class="line"><span class="number">801</span>                                    hist.getTask().taskId);</span><br><span class="line"><span class="number">802</span>                        &#125;</span><br><span class="line"><span class="number">803</span>                        newIntent.putExtra(HeavyWeightSwitcherActivity.KEY_NEW_APP,</span><br><span class="line"><span class="number">804</span>                                aInfo.packageName);</span><br><span class="line"><span class="number">805</span>                        newIntent.setFlags(intent.getFlags());</span><br><span class="line"><span class="number">806</span>                        newIntent.setClassName(<span class="string">"android"</span>,</span><br><span class="line"><span class="number">807</span>                                HeavyWeightSwitcherActivity.class.getName());</span><br><span class="line"><span class="number">808</span>                        intent = newIntent;</span><br><span class="line"><span class="number">809</span>                        resolvedType = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">810</span>                        caller = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">811</span>                        callingUid = Binder.getCallingUid();</span><br><span class="line"><span class="number">812</span>                        callingPid = Binder.getCallingPid();</span><br><span class="line"><span class="number">813</span>                        componentSpecified = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">814</span>                        rInfo = mSupervisor.resolveIntent(intent, <span class="keyword">null</span> <span class="comment">/*resolvedType*/</span>, userId);</span><br><span class="line"><span class="number">815</span>                        aInfo = rInfo != <span class="keyword">null</span> ? rInfo.activityInfo : <span class="keyword">null</span>;</span><br><span class="line"><span class="number">816</span>                        <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">817</span>                            aInfo = mService.getActivityInfoForUser(aInfo, userId);</span><br><span class="line"><span class="number">818</span>                        &#125;</span><br><span class="line"><span class="number">819</span>                    &#125;</span><br><span class="line"><span class="number">820</span>                &#125;</span><br><span class="line"><span class="number">821</span>            &#125;</span><br><span class="line"><span class="number">822</span></span><br><span class="line"><span class="number">823</span>            <span class="keyword">final</span> ActivityRecord[] outRecord = <span class="keyword">new</span> ActivityRecord[<span class="number">1</span>];</span><br><span class="line"><span class="number">824</span>            <span class="keyword">int</span> res = startActivityLocked(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line"><span class="number">825</span>                    aInfo, rInfo, voiceSession, voiceInteractor,</span><br><span class="line"><span class="number">826</span>                    resultTo, resultWho, requestCode, callingPid,</span><br><span class="line"><span class="number">827</span>                    callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line"><span class="number">828</span>                    options, ignoreTargetSecurity, componentSpecified, outRecord, container,</span><br><span class="line"><span class="number">829</span>                    inTask, reason);</span><br><span class="line"><span class="number">830</span></span><br><span class="line"><span class="number">831</span>            Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">832</span></span><br><span class="line"><span class="number">833</span>            <span class="keyword">if</span> (stack.mConfigWillChange) &#123;</span><br><span class="line"><span class="number">834</span>                <span class="comment">// If the caller also wants to switch to a new configuration,</span></span><br><span class="line"><span class="number">835</span>                <span class="comment">// do so now.  This allows a clean switch, as we are waiting</span></span><br><span class="line"><span class="number">836</span>                <span class="comment">// for the current activity to pause (so we will not destroy</span></span><br><span class="line"><span class="number">837</span>                <span class="comment">// it), and have not yet started the next activity.</span></span><br><span class="line"><span class="number">838</span>                mService.enforceCallingPermission(android.Manifest.permission.CHANGE_CONFIGURATION,</span><br><span class="line"><span class="number">839</span>                        <span class="string">"updateConfiguration()"</span>);</span><br><span class="line"><span class="number">840</span>                stack.mConfigWillChange = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">841</span>                <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG_CONFIGURATION,</span><br><span class="line"><span class="number">842</span>                        <span class="string">"Updating to new configuration after starting activity."</span>);</span><br><span class="line"><span class="number">843</span>                mService.updateConfigurationLocked(globalConfig, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">844</span>            &#125;</span><br><span class="line"><span class="number">845</span></span><br><span class="line"><span class="number">846</span>            <span class="keyword">if</span> (outResult != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">847</span>                outResult.result = res;</span><br><span class="line"><span class="number">848</span>                <span class="keyword">if</span> (res == ActivityManager.START_SUCCESS) &#123;</span><br><span class="line"><span class="number">849</span>                    mSupervisor.mWaitingActivityLaunched.add(outResult);</span><br><span class="line"><span class="number">850</span>                    <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="number">851</span>                        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">852</span>                            mService.wait();</span><br><span class="line"><span class="number">853</span>                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">854</span>                        &#125;</span><br><span class="line"><span class="number">855</span>                    &#125; <span class="keyword">while</span> (outResult.result != START_TASK_TO_FRONT</span><br><span class="line"><span class="number">856</span>                            &amp;&amp; !outResult.timeout &amp;&amp; outResult.who == <span class="keyword">null</span>);</span><br><span class="line"><span class="number">857</span>                    <span class="keyword">if</span> (outResult.result == START_TASK_TO_FRONT) &#123;</span><br><span class="line"><span class="number">858</span>                        res = START_TASK_TO_FRONT;</span><br><span class="line"><span class="number">859</span>                    &#125;</span><br><span class="line"><span class="number">860</span>                &#125;</span><br><span class="line"><span class="number">861</span>                <span class="keyword">if</span> (res == START_TASK_TO_FRONT) &#123;</span><br><span class="line"><span class="number">862</span>                    <span class="keyword">final</span> ActivityRecord r = outRecord[<span class="number">0</span>];</span><br><span class="line"><span class="number">863</span></span><br><span class="line"><span class="number">864</span>                    <span class="comment">// ActivityRecord may represent a different activity, but it should not be in</span></span><br><span class="line"><span class="number">865</span>                    <span class="comment">// the resumed state.</span></span><br><span class="line"><span class="number">866</span>                    <span class="keyword">if</span> (r.nowVisible &amp;&amp; r.state == RESUMED) &#123;</span><br><span class="line"><span class="number">867</span>                        outResult.timeout = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">868</span>                        outResult.who = r.realActivity;</span><br><span class="line"><span class="number">869</span>                        outResult.totalTime = <span class="number">0</span>;</span><br><span class="line"><span class="number">870</span>                        outResult.thisTime = <span class="number">0</span>;</span><br><span class="line"><span class="number">871</span>                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">872</span>                        outResult.thisTime = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">873</span>                        mSupervisor.waitActivityVisible(r.realActivity, outResult);</span><br><span class="line"><span class="number">874</span>                        <span class="comment">// Note: the timeout variable is not currently not ever set.</span></span><br><span class="line"><span class="number">875</span>                        <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="number">876</span>                            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">877</span>                                mService.wait();</span><br><span class="line"><span class="number">878</span>                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">879</span>                            &#125;</span><br><span class="line"><span class="number">880</span>                        &#125; <span class="keyword">while</span> (!outResult.timeout &amp;&amp; outResult.who == <span class="keyword">null</span>);</span><br><span class="line"><span class="number">881</span>                    &#125;</span><br><span class="line"><span class="number">882</span>                &#125;</span><br><span class="line"><span class="number">883</span>            &#125;</span><br><span class="line"><span class="number">884</span></span><br><span class="line"><span class="number">885</span>            mSupervisor.mActivityMetricsLogger.notifyActivityLaunched(res, outRecord[<span class="number">0</span>]);</span><br><span class="line"><span class="number">886</span>            <span class="keyword">return</span> res;</span><br><span class="line"><span class="number">887</span>        &#125;</span><br><span class="line"><span class="number">888</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>然后调用startActivityLocked<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">257</span>            String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">258</span>            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">259</span>            IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">260</span>            String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">261</span>            ActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">262</span>            ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">263</span>            TaskRecord inTask, String reason)</span> </span>&#123;</span><br><span class="line"><span class="number">264</span></span><br><span class="line"><span class="number">265</span>        <span class="keyword">if</span> (TextUtils.isEmpty(reason)) &#123;</span><br><span class="line"><span class="number">266</span>            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Need to specify a reason."</span>);</span><br><span class="line"><span class="number">267</span>        &#125;</span><br><span class="line"><span class="number">268</span>        mLastStartReason = reason;</span><br><span class="line"><span class="number">269</span>        mLastStartActivityTimeMs = System.currentTimeMillis();</span><br><span class="line"><span class="number">270</span>        mLastStartActivityRecord[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">271</span></span><br><span class="line"><span class="number">272</span>        mLastStartActivityResult = startActivity(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line"><span class="number">273</span>                aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,</span><br><span class="line"><span class="number">274</span>                callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line"><span class="number">275</span>                options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,</span><br><span class="line"><span class="number">276</span>                container, inTask);</span><br><span class="line"><span class="number">277</span></span><br><span class="line"><span class="number">278</span>        <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">279</span>            <span class="comment">// mLastStartActivityRecord[0] is set in the call to startActivity above.</span></span><br><span class="line"><span class="number">280</span>            outActivity[<span class="number">0</span>] = mLastStartActivityRecord[<span class="number">0</span>];</span><br><span class="line"><span class="number">281</span>        &#125;</span><br><span class="line"><span class="number">282</span>        <span class="keyword">return</span> mLastStartActivityResult;</span><br><span class="line"><span class="number">283</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>然后调用 startActivity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">996</span>            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">997</span>            <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">998</span>            ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line"><span class="number">999</span>        <span class="keyword">int</span> result = START_CANCELED;</span><br><span class="line"><span class="number">1000</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1001</span>            mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line"><span class="number">1002</span>            result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line"><span class="number">1003</span>                    startFlags, doResume, options, inTask, outActivity);</span><br><span class="line"><span class="number">1004</span>        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">1005</span>            <span class="comment">// If we are not able to proceed, disassociate the activity from the task. Leaving an</span></span><br><span class="line"><span class="number">1006</span>            <span class="comment">// activity in an incomplete state can lead to issues, such as performing operations</span></span><br><span class="line"><span class="number">1007</span>            <span class="comment">// without a window container.</span></span><br><span class="line"><span class="number">1008</span>            <span class="keyword">if</span> (!ActivityManager.isStartResultSuccessful(result)</span><br><span class="line"><span class="number">1009</span>                    &amp;&amp; mStartActivity.getTask() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1010</span>                mStartActivity.getTask().removeActivity(mStartActivity);</span><br><span class="line"><span class="number">1011</span>            &#125;</span><br><span class="line"><span class="number">1012</span>            mService.mWindowManager.continueSurfaceLayout();</span><br><span class="line"><span class="number">1013</span>        &#125;</span><br><span class="line"><span class="number">1014</span></span><br><span class="line"><span class="number">1015</span>        postStartActivityProcessing(r, result, mSupervisor.getLastStack().mStackId,  mSourceRecord,</span><br><span class="line"><span class="number">1016</span>                mTargetStack);</span><br><span class="line"><span class="number">1017</span></span><br><span class="line"><span class="number">1018</span>        <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">1019</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>其中又调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line"><span class="number">1003</span>                    startFlags, doResume, options, inTask, outActivity);</span><br></pre></td></tr></table></figure></p><p>最后调用到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line"><span class="number">1159</span>                mSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line"><span class="number">1160</span>            &#125;</span><br></pre></td></tr></table></figure></p><p>查看这个方法，最后发现其中调用了<br>mFocusedStack.resumeTopActivityUncheckedLocked(null, null);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">boolean resumeFocusedStackTopActivityLocked(</span><br><span class="line">2060            ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions) &#123;</span><br><span class="line">2061        if (targetStack != null &amp;&amp; isFocusedStack(targetStack)) &#123;</span><br><span class="line">2062            return targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">2063        &#125;</span><br><span class="line">2064        final ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">2065        if (r == null || r.state != RESUMED) &#123;</span><br><span class="line">2066            mFocusedStack.resumeTopActivityUncheckedLocked(null, null);</span><br><span class="line">2067        &#125; else if (r.state == RESUMED) &#123;</span><br><span class="line">2068            // Kick off any lingering app transitions form the MoveTaskToFront operation.</span><br><span class="line">2069            mFocusedStack.executeAppTransition(targetOptions);</span><br><span class="line">2070        &#125;</span><br><span class="line">2071        return false;</span><br><span class="line">2072    &#125;</span><br></pre></td></tr></table></figure><p>查看其中的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line"><span class="number">2206</span>        <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</span><br><span class="line"><span class="number">2207</span>            <span class="comment">// Don't even start recursing.</span></span><br><span class="line"><span class="number">2208</span>            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2209</span>        &#125;</span><br><span class="line"><span class="number">2210</span></span><br><span class="line"><span class="number">2211</span>        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2212</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">2213</span>            <span class="comment">// Protect against recursion.</span></span><br><span class="line"><span class="number">2214</span>            mStackSupervisor.inResumeTopActivity = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">2215</span>            result = resumeTopActivityInnerLocked(prev, options);</span><br><span class="line"><span class="number">2216</span>        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">2217</span>            mStackSupervisor.inResumeTopActivity = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">2218</span>        &#125;</span><br><span class="line"><span class="number">2219</span>        <span class="comment">// When resuming the top activity, it may be necessary to pause the top activity (for</span></span><br><span class="line"><span class="number">2220</span>        <span class="comment">// example, returning to the lock screen. We suppress the normal pause logic in</span></span><br><span class="line"><span class="number">2221</span>        <span class="comment">// &#123;@link #resumeTopActivityUncheckedLocked&#125;, since the top activity is resumed at the end.</span></span><br><span class="line"><span class="number">2222</span>        <span class="comment">// We call the &#123;@link ActivityStackSupervisor#checkReadyForSleepLocked&#125; again here to ensure</span></span><br><span class="line"><span class="number">2223</span>        <span class="comment">// any necessary pause logic occurs.</span></span><br><span class="line"><span class="number">2224</span>        mStackSupervisor.checkReadyForSleepLocked();</span><br><span class="line"><span class="number">2225</span></span><br><span class="line"><span class="number">2226</span>        <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">2227</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>继续跟mStackSupervisor.checkReadyForSleepLocked();<br>发现其中调用了 startPausingLocked(false, true, null, false);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkReadyForSleepLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">1173</span>        <span class="keyword">if</span> (mResumedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1174</span>            <span class="comment">// Still have something resumed; can't sleep until it is paused.</span></span><br><span class="line"><span class="number">1175</span>            <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"Sleep needs to pause "</span> + mResumedActivity);</span><br><span class="line"><span class="number">1176</span>            <span class="keyword">if</span> (DEBUG_USER_LEAVING) Slog.v(TAG_USER_LEAVING,</span><br><span class="line"><span class="number">1177</span>                    <span class="string">"Sleep =&gt; pause with userLeaving=false"</span>);</span><br><span class="line"><span class="number">1178</span></span><br><span class="line"><span class="number">1179</span>            <span class="comment">// If we are in the middle of resuming the top activity in</span></span><br><span class="line"><span class="number">1180</span>            <span class="comment">// &#123;@link #resumeTopActivityUncheckedLocked&#125;, mResumedActivity will be set but not</span></span><br><span class="line"><span class="number">1181</span>            <span class="comment">// resumed yet. We must not proceed pausing the activity here. This method will be</span></span><br><span class="line"><span class="number">1182</span>            <span class="comment">// called again if necessary as part of</span></span><br><span class="line"><span class="number">1183</span>            <span class="comment">// &#123;@link ActivityStackSupervisor#checkReadyForSleepLocked&#125;.</span></span><br><span class="line"><span class="number">1184</span>            <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</span><br><span class="line"><span class="number">1185</span>                <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"In the middle of resuming top activity "</span></span><br><span class="line"><span class="number">1186</span>                        + mResumedActivity);</span><br><span class="line"><span class="number">1187</span>                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1188</span>            &#125;</span><br><span class="line"><span class="number">1189</span></span><br><span class="line"><span class="number">1190</span>            startPausingLocked(<span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1191</span>            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1192</span>        &#125;</span><br><span class="line"><span class="number">1193</span>        <span class="keyword">if</span> (mPausingActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1194</span>            <span class="comment">// Still waiting for something to pause; can't sleep yet.</span></span><br><span class="line"><span class="number">1195</span>            <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"Sleep still waiting to pause "</span> + mPausingActivity);</span><br><span class="line"><span class="number">1196</span>            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1197</span>        &#125;</span><br><span class="line"><span class="number">1198</span></span><br><span class="line"><span class="number">1199</span>        <span class="keyword">if</span> (hasVisibleBehindActivity()) &#123;</span><br><span class="line"><span class="number">1200</span>            <span class="comment">// Stop visible behind activity before going to sleep.</span></span><br><span class="line"><span class="number">1201</span>            <span class="keyword">final</span> ActivityRecord r = getVisibleBehindActivity();</span><br><span class="line"><span class="number">1202</span>            mStackSupervisor.mStoppingActivities.add(r);</span><br><span class="line"><span class="number">1203</span>            <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class="string">"Sleep still waiting to stop visible behind "</span> + r);</span><br><span class="line"><span class="number">1204</span>            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1205</span>        &#125;</span><br><span class="line"><span class="number">1206</span></span><br><span class="line"><span class="number">1207</span>        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1208</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>然后去 startPausingLocked(false, true, null, false)中看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">final boolean startPausingLocked(boolean userLeaving, boolean uiSleeping,</span><br><span class="line">1255            ActivityRecord resuming, boolean pauseImmediately) &#123;</span><br><span class="line">1256        if (mPausingActivity != null) &#123;</span><br><span class="line">1257            Slog.wtf(TAG, &quot;Going to pause when pause is already pending for &quot; + mPausingActivity</span><br><span class="line">1258                    + &quot; state=&quot; + mPausingActivity.state);</span><br><span class="line">1259            if (!mService.isSleepingLocked()) &#123;</span><br><span class="line">1260                // Avoid recursion among check for sleep and complete pause during sleeping.</span><br><span class="line">1261                // Because activity will be paused immediately after resume, just let pause</span><br><span class="line">1262                // be completed by the order of activity paused from clients.</span><br><span class="line">1263                completePauseLocked(false, resuming);</span><br><span class="line">1264            &#125;</span><br><span class="line">1265        &#125;</span><br><span class="line">1266        ActivityRecord prev = mResumedActivity;</span><br><span class="line">1267</span><br><span class="line">1268        if (prev == null) &#123;</span><br><span class="line">1269            if (resuming == null) &#123;</span><br><span class="line">1270                Slog.wtf(TAG, &quot;Trying to pause when nothing is resumed&quot;);</span><br><span class="line">1271                mStackSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">1272            &#125;</span><br><span class="line">1273            return false;</span><br><span class="line">1274        &#125;</span><br><span class="line">1275</span><br><span class="line">1276        if (mActivityContainer.mParentActivity == null) &#123;</span><br><span class="line">1277            // Top level stack, not a child. Look for child stacks.</span><br><span class="line">1278            mStackSupervisor.pauseChildStacks(prev, userLeaving, uiSleeping, resuming,</span><br><span class="line">1279                    pauseImmediately);</span><br><span class="line">1280        &#125;</span><br><span class="line">1281</span><br><span class="line">1282        if (DEBUG_STATES) Slog.v(TAG_STATES, &quot;Moving to PAUSING: &quot; + prev);</span><br><span class="line">1283        else if (DEBUG_PAUSE) Slog.v(TAG_PAUSE, &quot;Start pausing: &quot; + prev);</span><br><span class="line">1284        mResumedActivity = null;</span><br><span class="line">1285        mPausingActivity = prev;</span><br><span class="line">1286        mLastPausedActivity = prev;</span><br><span class="line">1287        mLastNoHistoryActivity = (prev.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NO_HISTORY) != 0</span><br><span class="line">1288                || (prev.info.flags &amp; ActivityInfo.FLAG_NO_HISTORY) != 0 ? prev : null;</span><br><span class="line">1289        prev.state = ActivityState.PAUSING;</span><br><span class="line">1290        prev.getTask().touchActiveTime();</span><br><span class="line">1291        clearLaunchTime(prev);</span><br><span class="line">1292        final ActivityRecord next = mStackSupervisor.topRunningActivityLocked();</span><br><span class="line">1293        if (mService.mHasRecents</span><br><span class="line">1294                &amp;&amp; (next == null || next.noDisplay || next.getTask() != prev.getTask()</span><br><span class="line">1295                || uiSleeping)) &#123;</span><br><span class="line">1296            prev.mUpdateTaskThumbnailWhenHidden = true;</span><br><span class="line">1297        &#125;</span><br><span class="line">1298        stopFullyDrawnTraceIfNeeded();</span><br><span class="line">1299</span><br><span class="line">1300        mService.updateCpuStats();</span><br><span class="line">1301</span><br><span class="line">1302        if (prev.app != null &amp;&amp; prev.app.thread != null) &#123;</span><br><span class="line">1303            if (DEBUG_PAUSE) Slog.v(TAG_PAUSE, &quot;Enqueueing pending pause: &quot; + prev);</span><br><span class="line">1304            try &#123;</span><br><span class="line">1305                EventLog.writeEvent(EventLogTags.AM_PAUSE_ACTIVITY,</span><br><span class="line">1306                        prev.userId, System.identityHashCode(prev),</span><br><span class="line">1307                        prev.shortComponentName);</span><br><span class="line">1308                mService.updateUsageStats(prev, false);</span><br><span class="line">1309                prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,</span><br><span class="line">1310                        userLeaving, prev.configChangeFlags, pauseImmediately);</span><br><span class="line">1311            &#125; catch (Exception e) &#123;</span><br><span class="line">1312                // Ignore exception, if process died other code will cleanup.</span><br><span class="line">1313                Slog.w(TAG, &quot;Exception thrown during pause&quot;, e);</span><br><span class="line">1314                mPausingActivity = null;</span><br><span class="line">1315                mLastPausedActivity = null;</span><br><span class="line">1316                mLastNoHistoryActivity = null;</span><br><span class="line">1317            &#125;</span><br><span class="line">1318        &#125; else &#123;</span><br><span class="line">1319            mPausingActivity = null;</span><br><span class="line">1320            mLastPausedActivity = null;</span><br><span class="line">1321            mLastNoHistoryActivity = null;</span><br><span class="line">1322        &#125;</span><br><span class="line">1323</span><br><span class="line">1324        // If we are not going to sleep, we want to ensure the device is</span><br><span class="line">1325        // awake until the next activity is started.</span><br><span class="line">1326        if (!uiSleeping &amp;&amp; !mService.isSleepingOrShuttingDownLocked()) &#123;</span><br><span class="line">1327            mStackSupervisor.acquireLaunchWakelock();</span><br><span class="line">1328        &#125;</span><br><span class="line">1329</span><br><span class="line">1330        if (mPausingActivity != null) &#123;</span><br><span class="line">1331            // Have the window manager pause its key dispatching until the new</span><br><span class="line">1332            // activity has started.  If we&apos;re pausing the activity just because</span><br><span class="line">1333            // the screen is being turned off and the UI is sleeping, don&apos;t interrupt</span><br><span class="line">1334            // key dispatch; the same activity will pick it up again on wakeup.</span><br><span class="line">1335            if (!uiSleeping) &#123;</span><br><span class="line">1336                prev.pauseKeyDispatchingLocked();</span><br><span class="line">1337            &#125; else if (DEBUG_PAUSE) &#123;</span><br><span class="line">1338                 Slog.v(TAG_PAUSE, &quot;Key dispatch not paused for screen off&quot;);</span><br><span class="line">1339            &#125;</span><br><span class="line">1340</span><br><span class="line">1341            if (pauseImmediately) &#123;</span><br><span class="line">1342                // If the caller said they don&apos;t want to wait for the pause, then complete</span><br><span class="line">1343                // the pause now.</span><br><span class="line">1344                completePauseLocked(false, resuming);</span><br><span class="line">1345                return false;</span><br><span class="line">1346</span><br><span class="line">1347            &#125; else &#123;</span><br><span class="line">1348                schedulePauseTimeout(prev);</span><br><span class="line">1349                return true;</span><br><span class="line">1350            &#125;</span><br><span class="line">1351</span><br><span class="line">1352        &#125; else &#123;</span><br><span class="line">1353            // This activity failed to schedule the</span><br><span class="line">1354            // pause, so just treat it as being paused now.</span><br><span class="line">1355            if (DEBUG_PAUSE) Slog.v(TAG_PAUSE, &quot;Activity not running, resuming next.&quot;);</span><br><span class="line">1356            if (resuming == null) &#123;</span><br><span class="line">1357                mStackSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">1358            &#125;</span><br><span class="line">1359            return false;</span><br><span class="line">1360        &#125;</span><br><span class="line">1361    &#125;</span><br></pre></td></tr></table></figure></p><p>这个方法就是让系统中的栈中的activity执行onPause犯法。<br>其中 prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,userLeaving,prev.configChangeFlags,pauseImmediately);<br>这里的thread是一个IApplicationThread类型的对象，而在ActivityThread中也有一个ApplicationThread类，其继承了IApplicationTHread，并且都是Binder对象。<br>那么这里的IApplication是一个Binder的client端，而ActivityThread中的APplictionThread中的ApplicationThread中是的Binder对象的server端。所以这里的thrad。schedulePauseActivity实际上调用的就是ApplicationThread的SchedulePauseActivity方法。</p><p>回到AcitivityThread中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">schedulePauseActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finished,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> userLeaving, <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> dontReport)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> seq = getLifecycleSeq();</span><br><span class="line"><span class="keyword">if</span> (DEBUG_ORDER) Slog.d(TAG, <span class="string">"pauseActivity "</span> + ActivityThread.<span class="keyword">this</span></span><br><span class="line">+ <span class="string">" operation received seq: "</span> + seq);</span><br><span class="line">sendMessage(</span><br><span class="line">finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,</span><br><span class="line">token,</span><br><span class="line">(userLeaving ? USER_LEAVING : <span class="number">0</span>) | (dontReport ? DONT_REPORT : <span class="number">0</span>),</span><br><span class="line">configChanges,</span><br><span class="line">seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中sendMessage是继承自Handler的H发送了PAUSE_ACTIVITY_FINISHING的msg<br>，于是去H中的handleMessage中找对应的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PAUSE_ACTIVITY_FINISHING: &#123;</span><br><span class="line">Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</span><br><span class="line">SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">handlePauseActivity((IBinder) args.arg1, <span class="keyword">true</span>, (args.argi1 &amp; USER_LEAVING) != <span class="number">0</span>,</span><br><span class="line">args.argi2, (args.argi1 &amp; DONT_REPORT) != <span class="number">0</span>, args.argi3);</span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>其中调用了handlePauseActivity方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlePauseActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finished,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> userLeaving, <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> dontReport, <span class="keyword">int</span> seq)</span> </span>&#123;</span><br><span class="line">ActivityClientRecord r = mActivities.get(token);</span><br><span class="line"><span class="keyword">if</span> (DEBUG_ORDER) Slog.d(TAG, <span class="string">"handlePauseActivity "</span> + r + <span class="string">", seq: "</span> + seq);</span><br><span class="line"><span class="keyword">if</span> (!checkAndUpdateLifecycleSeq(seq, r, <span class="string">"pauseActivity"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//Slog.v(TAG, "userLeaving=" + userLeaving + " handling pause of " + r);</span></span><br><span class="line"><span class="keyword">if</span> (userLeaving) &#123;</span><br><span class="line">performUserLeavingActivity(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.activity.mConfigChangeFlags |= configChanges;</span><br><span class="line">performPauseActivity(token, finished, r.isPreHoneycomb(), <span class="string">"handlePauseActivity"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure any pending writes are now committed.</span></span><br><span class="line"><span class="keyword">if</span> (r.isPreHoneycomb()) &#123;</span><br><span class="line">QueuedWork.waitToFinish();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the activity manager we have paused.</span></span><br><span class="line"><span class="keyword">if</span> (!dontReport) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ActivityManagerNative.getDefault().activityPaused(token);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mSomeActivitiesChanged = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到其中调用了performPauseActivity(token, finished, r.isPreHoneycomb(), “handlePauseActivity”)方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Bundle <span class="title">performPauseActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finished,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> saveState, String reason)</span> </span>&#123;</span><br><span class="line">ActivityClientRecord r = mActivities.get(token);</span><br><span class="line"><span class="keyword">return</span> r != <span class="keyword">null</span> ? performPauseActivity(r, finished, saveState, reason) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这其中又调用了performPauseActivity的重载方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Bundle <span class="title">performPauseActivity</span><span class="params">(ActivityClientRecord r, <span class="keyword">boolean</span> finished,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> saveState, String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r.paused) &#123;</span><br><span class="line"><span class="keyword">if</span> (r.activity.mFinished) &#123;</span><br><span class="line"><span class="comment">// If we are finishing, we won't call onResume() in certain cases.</span></span><br><span class="line"><span class="comment">// So here we likewise don't want to call onPause() if the activity</span></span><br><span class="line"><span class="comment">// isn't resumed.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Performing pause of activity that is not resumed: "</span></span><br><span class="line">+ r.intent.getComponent().toShortString());</span><br><span class="line">Slog.e(TAG, e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (finished) &#123;</span><br><span class="line">r.activity.mFinished = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next have the activity save its current state and managed dialogs...</span></span><br><span class="line"><span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; saveState) &#123;</span><br><span class="line">callCallActivityOnSaveInstanceState(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">performPauseActivityIfNeeded(r, reason);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notify any outstanding on paused listeners</span></span><br><span class="line">ArrayList&lt;OnActivityPausedListener&gt; listeners;</span><br><span class="line"><span class="keyword">synchronized</span> (mOnPauseListeners) &#123;</span><br><span class="line">listeners = mOnPauseListeners.remove(r.activity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = (listeners != <span class="keyword">null</span> ? listeners.size() : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">listeners.get(i).onPaused(r.activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !r.activity.mFinished &amp;&amp; saveState ? r.state : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法中又调用了 performPauseActivityIfNeeded(r, reason)方法，<br>我们到这个方法中看一眼：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performPauseActivityIfNeeded</span><span class="params">(ActivityClientRecord r, String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r.paused) &#123;</span><br><span class="line"><span class="comment">// You are already paused silly...</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">r.activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">mInstrumentation.callActivityOnPause(r.activity);</span><br><span class="line">EventLog.writeEvent(LOG_AM_ON_PAUSE_CALLED, UserHandle.myUserId(),</span><br><span class="line">r.activity.getComponentName().getClassName(), reason);</span><br><span class="line"><span class="keyword">if</span> (!r.activity.mCalled) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(<span class="string">"Activity "</span> + safeToComponentShortString(r.intent)</span><br><span class="line">+ <span class="string">" did not call through to super.onPause()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to pause activity "</span></span><br><span class="line">+ safeToComponentShortString(r.intent) + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.paused = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>终于看到了mInstrumentation.callActivityOnPause(r.activity);<br>然后我们去mInstrumentation中去找对应的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnPause</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">activity.performPause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们看到是调用了 activity.performPause()，于是我们回到activity中看一眼：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mDoReportFullyDrawn = <span class="keyword">false</span>;</span><br><span class="line">mFragments.dispatchPause();</span><br><span class="line">mCalled = <span class="keyword">false</span>;</span><br><span class="line">onPause();</span><br><span class="line">mResumed = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!mCalled &amp;&amp; getApplicationInfo().targetSdkVersion</span><br><span class="line">&gt;= android.os.Build.VERSION_CODES.GINGERBREAD) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line"><span class="string">"Activity "</span> + mComponent.toShortString() +</span><br><span class="line"><span class="string">" did not call through to super.onPause()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">mResumed = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>终于看到了onPause()方法，那么就是在这里调用了onPause()方法，让栈顶的activity处于onpause。<br>也就是说我们在启动一个activty的时候最先被执行的是栈顶的activity的onpause方法；<br>handlePauseActivity最后又掉用了ActivityManagerNative.getDefault().activityPaused(token)，这是应用进程告诉服务进程，栈顶的activity已经弯沉onpause方法，通过binder机制，这个方法最终会调用到ActivityManagerServise的activityPaused方法执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="number">7246</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityPaused</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line"><span class="number">7247</span>        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">7248</span>        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="number">7249</span>            ActivityStack stack = ActivityRecord.getStackLocked(token);</span><br><span class="line"><span class="number">7250</span>            <span class="keyword">if</span> (stack != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">7251</span>                stack.activityPausedLocked(token, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">7252</span>            &#125;</span><br><span class="line"><span class="number">7253</span>        &#125;</span><br><span class="line"><span class="number">7254</span>        Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">7255</span>    &#125;</span><br><span class="line"><span class="number">7256</span></span><br></pre></td></tr></table></figure></p><p>该方法内部调用了activityPausedLocked方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityPausedLocked</span><span class="params">(IBinder token, <span class="keyword">boolean</span> timeout)</span> </span>&#123;</span><br><span class="line"><span class="number">1364</span>        <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE,</span><br><span class="line"><span class="number">1365</span>            <span class="string">"Activity paused: token="</span> + token + <span class="string">", timeout="</span> + timeout);</span><br><span class="line"><span class="number">1366</span></span><br><span class="line"><span class="number">1367</span>        <span class="keyword">final</span> ActivityRecord r = isInStackLocked(token);</span><br><span class="line"><span class="number">1368</span>        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1369</span>            mHandler.removeMessages(PAUSE_TIMEOUT_MSG, r);</span><br><span class="line"><span class="number">1370</span>            <span class="keyword">if</span> (mPausingActivity == r) &#123;</span><br><span class="line"><span class="number">1371</span>                <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class="string">"Moving to PAUSED: "</span> + r</span><br><span class="line"><span class="number">1372</span>                        + (timeout ? <span class="string">" (due to timeout)"</span> : <span class="string">" (pause complete)"</span>));</span><br><span class="line"><span class="number">1373</span>                mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line"><span class="number">1374</span>                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1375</span>                    completePauseLocked(<span class="keyword">true</span> <span class="comment">/* resumeNext */</span>, <span class="keyword">null</span> <span class="comment">/* resumingActivity */</span>);</span><br><span class="line"><span class="number">1376</span>                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">1377</span>                    mService.mWindowManager.continueSurfaceLayout();</span><br><span class="line"><span class="number">1378</span>                &#125;</span><br><span class="line"><span class="number">1379</span>                <span class="keyword">return</span>;</span><br><span class="line"><span class="number">1380</span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1381</span>                EventLog.writeEvent(EventLogTags.AM_FAILED_TO_PAUSE,</span><br><span class="line"><span class="number">1382</span>                        r.userId, System.identityHashCode(r), r.shortComponentName,</span><br><span class="line"><span class="number">1383</span>                        mPausingActivity != <span class="keyword">null</span></span><br><span class="line"><span class="number">1384</span>                            ? mPausingActivity.shortComponentName : <span class="string">"(none)"</span>);</span><br><span class="line"><span class="number">1385</span>                <span class="keyword">if</span> (r.state == ActivityState.PAUSING) &#123;</span><br><span class="line"><span class="number">1386</span>                    r.state = ActivityState.PAUSED;</span><br><span class="line"><span class="number">1387</span>                    <span class="keyword">if</span> (r.finishing) &#123;</span><br><span class="line"><span class="number">1388</span>                        <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG,</span><br><span class="line"><span class="number">1389</span>                                <span class="string">"Executing finish of failed to pause activity: "</span> + r);</span><br><span class="line"><span class="number">1390</span>                        finishCurrentActivityLocked(r, FINISH_AFTER_VISIBLE, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1391</span>                    &#125;</span><br><span class="line"><span class="number">1392</span>                &#125;</span><br><span class="line"><span class="number">1393</span>            &#125;</span><br><span class="line"><span class="number">1394</span>        &#125;</span><br><span class="line"><span class="number">1395</span>        mStackSupervisor.ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line"><span class="number">1396</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>然后执行了 completePauseLocked(true /<em> resumeNext </em>/, null /<em> resumingActivity </em>/);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">completePauseLocked</span><span class="params">(<span class="keyword">boolean</span> resumeNext, ActivityRecord resuming)</span> </span>&#123;</span><br><span class="line"><span class="number">1399</span>        ActivityRecord prev = mPausingActivity;</span><br><span class="line"><span class="number">1400</span>        <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"Complete pause: "</span> + prev);</span><br><span class="line"><span class="number">1401</span></span><br><span class="line"><span class="number">1402</span>        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1403</span>            <span class="keyword">final</span> <span class="keyword">boolean</span> wasStopping = prev.state == STOPPING;</span><br><span class="line"><span class="number">1404</span>            prev.state = ActivityState.PAUSED;</span><br><span class="line"><span class="number">1405</span>            <span class="keyword">if</span> (prev.finishing) &#123;</span><br><span class="line"><span class="number">1406</span>                <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"Executing finish of activity: "</span> + prev);</span><br><span class="line"><span class="number">1407</span>                prev = finishCurrentActivityLocked(prev, FINISH_AFTER_VISIBLE, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1408</span>            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev.app != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1409</span>                <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"Enqueue pending stop if needed: "</span> + prev</span><br><span class="line"><span class="number">1410</span>                        + <span class="string">" wasStopping="</span> + wasStopping + <span class="string">" visible="</span> + prev.visible);</span><br><span class="line"><span class="number">1411</span>                <span class="keyword">if</span> (mStackSupervisor.mActivitiesWaitingForVisibleActivity.remove(prev)) &#123;</span><br><span class="line"><span class="number">1412</span>                    <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_PAUSE) Slog.v(TAG_PAUSE,</span><br><span class="line"><span class="number">1413</span>                            <span class="string">"Complete pause, no longer waiting: "</span> + prev);</span><br><span class="line"><span class="number">1414</span>                &#125;</span><br><span class="line"><span class="number">1415</span>                <span class="keyword">if</span> (prev.deferRelaunchUntilPaused) &#123;</span><br><span class="line"><span class="number">1416</span>                    <span class="comment">// Complete the deferred relaunch that was waiting for pause to complete.</span></span><br><span class="line"><span class="number">1417</span>                    <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"Re-launching after pause: "</span> + prev);</span><br><span class="line"><span class="number">1418</span>                    prev.relaunchActivityLocked(<span class="keyword">false</span> <span class="comment">/* andResume */</span>,</span><br><span class="line"><span class="number">1419</span>                            prev.preserveWindowOnDeferredRelaunch);</span><br><span class="line"><span class="number">1420</span>                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wasStopping) &#123;</span><br><span class="line"><span class="number">1421</span>                    <span class="comment">// We are also stopping, the stop request must have gone soon after the pause.</span></span><br><span class="line"><span class="number">1422</span>                    <span class="comment">// We can't clobber it, because the stop confirmation will not be handled.</span></span><br><span class="line"><span class="number">1423</span>                    <span class="comment">// We don't need to schedule another stop, we only need to let it happen.</span></span><br><span class="line"><span class="number">1424</span>                    prev.state = STOPPING;</span><br><span class="line"><span class="number">1425</span>                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!prev.visible &amp;&amp; !hasVisibleBehindActivity())</span><br><span class="line"><span class="number">1426</span>                        || mService.isSleepingOrShuttingDownLocked()) &#123;</span><br><span class="line"><span class="number">1427</span>                    <span class="comment">// Clear out any deferred client hide we might currently have.</span></span><br><span class="line"><span class="number">1428</span>                    prev.setDeferHidingClient(<span class="keyword">false</span>);</span><br><span class="line"><span class="number">1429</span>                    <span class="comment">// If we were visible then resumeTopActivities will release resources before</span></span><br><span class="line"><span class="number">1430</span>                    <span class="comment">// stopping.</span></span><br><span class="line"><span class="number">1431</span>                    addToStopping(prev, <span class="keyword">true</span> <span class="comment">/* scheduleIdle */</span>, <span class="keyword">false</span> <span class="comment">/* idleDelayed */</span>);</span><br><span class="line"><span class="number">1432</span>                &#125;</span><br><span class="line"><span class="number">1433</span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1434</span>                <span class="keyword">if</span> (DEBUG_PAUSE) Slog.v(TAG_PAUSE, <span class="string">"App died during pause, not stopping: "</span> + prev);</span><br><span class="line"><span class="number">1435</span>                prev = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1436</span>            &#125;</span><br><span class="line"><span class="number">1437</span>            <span class="comment">// It is possible the activity was freezing the screen before it was paused.</span></span><br><span class="line"><span class="number">1438</span>            <span class="comment">// In that case go ahead and remove the freeze this activity has on the screen</span></span><br><span class="line"><span class="number">1439</span>            <span class="comment">// since it is no longer visible.</span></span><br><span class="line"><span class="number">1440</span>            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1441</span>                prev.stopFreezingScreenLocked(<span class="keyword">true</span> <span class="comment">/*force*/</span>);</span><br><span class="line"><span class="number">1442</span>            &#125;</span><br><span class="line"><span class="number">1443</span>            mPausingActivity = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1444</span>        &#125;</span><br><span class="line"><span class="number">1445</span></span><br><span class="line"><span class="number">1446</span>        <span class="keyword">if</span> (resumeNext) &#123;</span><br><span class="line"><span class="number">1447</span>            <span class="keyword">final</span> ActivityStack topStack = mStackSupervisor.getFocusedStack();</span><br><span class="line"><span class="number">1448</span>            <span class="keyword">if</span> (!mService.isSleepingOrShuttingDownLocked()) &#123;</span><br><span class="line"><span class="number">1449</span>                mStackSupervisor.resumeFocusedStackTopActivityLocked(topStack, prev, <span class="keyword">null</span>);</span><br><span class="line"><span class="number">1450</span>            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1451</span>                mStackSupervisor.checkReadyForSleepLocked();</span><br><span class="line"><span class="number">1452</span>                ActivityRecord top = topStack.topRunningActivityLocked();</span><br><span class="line"><span class="number">1453</span>                <span class="keyword">if</span> (top == <span class="keyword">null</span> || (prev != <span class="keyword">null</span> &amp;&amp; top != prev)) &#123;</span><br><span class="line"><span class="number">1454</span>                    <span class="comment">// If there are no more activities available to run, do resume anyway to start</span></span><br><span class="line"><span class="number">1455</span>                    <span class="comment">// something. Also if the top activity on the stack is not the just paused</span></span><br><span class="line"><span class="number">1456</span>                    <span class="comment">// activity, we need to go ahead and resume it to ensure we complete an</span></span><br><span class="line"><span class="number">1457</span>                    <span class="comment">// in-flight app switch.</span></span><br><span class="line"><span class="number">1458</span>                    mStackSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line"><span class="number">1459</span>                &#125;</span><br><span class="line"><span class="number">1460</span>            &#125;</span><br><span class="line"><span class="number">1461</span>        &#125;</span><br><span class="line"><span class="number">1462</span></span><br><span class="line"><span class="number">1463</span>        <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1464</span>            prev.resumeKeyDispatchingLocked();</span><br><span class="line"><span class="number">1465</span></span><br><span class="line"><span class="number">1466</span>            <span class="keyword">if</span> (prev.app != <span class="keyword">null</span> &amp;&amp; prev.cpuTimeAtResume &gt; <span class="number">0</span></span><br><span class="line"><span class="number">1467</span>                    &amp;&amp; mService.mBatteryStatsService.isOnBattery()) &#123;</span><br><span class="line"><span class="number">1468</span>                <span class="keyword">long</span> diff = mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid)</span><br><span class="line"><span class="number">1469</span>                        - prev.cpuTimeAtResume;</span><br><span class="line"><span class="number">1470</span>                <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1471</span>                    BatteryStatsImpl bsi = mService.mBatteryStatsService.getActiveStatistics();</span><br><span class="line"><span class="number">1472</span>                    <span class="keyword">synchronized</span> (bsi) &#123;</span><br><span class="line"><span class="number">1473</span>                        BatteryStatsImpl.Uid.Proc ps =</span><br><span class="line"><span class="number">1474</span>                                bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,</span><br><span class="line"><span class="number">1475</span>                                        prev.info.packageName);</span><br><span class="line"><span class="number">1476</span>                        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1477</span>                            ps.addForegroundTimeLocked(diff);</span><br><span class="line"><span class="number">1478</span>                        &#125;</span><br><span class="line"><span class="number">1479</span>                    &#125;</span><br><span class="line"><span class="number">1480</span>                &#125;</span><br><span class="line"><span class="number">1481</span>            &#125;</span><br><span class="line"><span class="number">1482</span>            prev.cpuTimeAtResume = <span class="number">0</span>; <span class="comment">// reset it</span></span><br><span class="line"><span class="number">1483</span>        &#125;</span><br><span class="line"><span class="number">1484</span></span><br><span class="line"><span class="number">1485</span>        <span class="comment">// Notify when the task stack has changed, but only if visibilities changed (not just</span></span><br><span class="line"><span class="number">1486</span>        <span class="comment">// focus). Also if there is an active pinned stack - we always want to notify it about</span></span><br><span class="line"><span class="number">1487</span>        <span class="comment">// task stack changes, because its positioning may depend on it.</span></span><br><span class="line"><span class="number">1488</span>        <span class="keyword">if</span> (mStackSupervisor.mAppVisibilitiesChangedSinceLastPause</span><br><span class="line"><span class="number">1489</span>                || mService.mStackSupervisor.getStack(PINNED_STACK_ID) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1490</span>            mService.mTaskChangeNotificationController.notifyTaskStackChanged();</span><br><span class="line"><span class="number">1491</span>            mStackSupervisor.mAppVisibilitiesChangedSinceLastPause = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1492</span>        &#125;</span><br><span class="line"><span class="number">1493</span></span><br><span class="line"><span class="number">1494</span>        mStackSupervisor.ensureActivitiesVisibleLocked(resuming, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line"><span class="number">1495</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>这里面又调用了 mStackSupervisor.resumeFocusedStackTopActivityLocked(topStack, prev, null);<br>然后对应方法又调用<br>targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);<br>对应的方法又去调用 result = resumeTopActivityInnerLocked(prev, options);</p><p>这个方法最后调用了 mStackSupervisor.startSpecificActivityLocked(next, true, false);<br>（这几个和前面类似，只是代码片段太多，估计贴出来你们都晕头转向了，所以省略吧）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1553</span>            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> </span>&#123;</span><br><span class="line"><span class="number">1554</span>        <span class="comment">// Is this activity's application already running?</span></span><br><span class="line"><span class="number">1555</span>        ProcessRecord app = mService.getProcessRecordLocked(r.processName,</span><br><span class="line"><span class="number">1556</span>                r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">1557</span></span><br><span class="line"><span class="number">1558</span>        r.getStack().setLaunchTime(r);</span><br><span class="line"><span class="number">1559</span></span><br><span class="line"><span class="number">1560</span>        <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1561</span>            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1562</span>                <span class="keyword">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class="number">0</span></span><br><span class="line"><span class="number">1563</span>                        || !<span class="string">"android"</span>.equals(r.info.packageName)) &#123;</span><br><span class="line"><span class="number">1564</span>                    <span class="comment">// Don't add this if it is a platform component that is marked</span></span><br><span class="line"><span class="number">1565</span>                    <span class="comment">// to run in multiple processes, because this is actually</span></span><br><span class="line"><span class="number">1566</span>                    <span class="comment">// part of the framework so doesn't make sense to track as a</span></span><br><span class="line"><span class="number">1567</span>                    <span class="comment">// separate apk in the process.</span></span><br><span class="line"><span class="number">1568</span>                    app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</span><br><span class="line"><span class="number">1569</span>                            mService.mProcessStats);</span><br><span class="line"><span class="number">1570</span>                &#125;</span><br><span class="line"><span class="number">1571</span>                realStartActivityLocked(r, app, andResume, checkConfig);</span><br><span class="line"><span class="number">1572</span>                <span class="keyword">return</span>;</span><br><span class="line"><span class="number">1573</span>            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">1574</span>                Slog.w(TAG, <span class="string">"Exception when starting activity "</span></span><br><span class="line"><span class="number">1575</span>                        + r.intent.getComponent().flattenToShortString(), e);</span><br><span class="line"><span class="number">1576</span>            &#125;</span><br><span class="line"><span class="number">1577</span></span><br><span class="line"><span class="number">1578</span>            <span class="comment">// If a dead object exception was thrown -- fall through to</span></span><br><span class="line"><span class="number">1579</span>            <span class="comment">// restart the application.</span></span><br><span class="line"><span class="number">1580</span>        &#125;</span><br><span class="line"><span class="number">1581</span></span><br><span class="line"><span class="number">1582</span>        mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="keyword">true</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">1583</span>                <span class="string">"activity"</span>, r.intent.getComponent(), <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="number">1584</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>这里判断activity所需的进程是否已经启动，若启动的话<br>调用realStartActivityLocked(r, app, andResume, checkConfig);<br>看一下这个方法，否则调用 mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,<br>1583                “activity”, r.intent.getComponent(), false, false, true)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1326</span>            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"><span class="number">1327</span></span><br><span class="line"><span class="number">1328</span>        <span class="keyword">if</span> (!allPausedActivitiesComplete()) &#123;</span><br><span class="line"><span class="number">1329</span>            <span class="comment">// While there are activities pausing we skipping starting any new activities until</span></span><br><span class="line"><span class="number">1330</span>            <span class="comment">// pauses are complete. <span class="doctag">NOTE:</span> that we also do this for activities that are starting in</span></span><br><span class="line"><span class="number">1331</span>            <span class="comment">// the paused state because they will first be resumed then paused on the client side.</span></span><br><span class="line"><span class="number">1332</span>            <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_PAUSE || DEBUG_STATES) Slog.v(TAG_PAUSE,</span><br><span class="line"><span class="number">1333</span>                    <span class="string">"realStartActivityLocked: Skipping start of r="</span> + r</span><br><span class="line"><span class="number">1334</span>                    + <span class="string">" some activities pausing..."</span>);</span><br><span class="line"><span class="number">1335</span>            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1336</span>        &#125;</span><br><span class="line"><span class="number">1337</span></span><br><span class="line"><span class="number">1338</span>        r.startFreezingScreenLocked(app, <span class="number">0</span>);</span><br><span class="line"><span class="number">1339</span>        <span class="keyword">if</span> (r.getStack().checkKeyguardVisibility(r, <span class="keyword">true</span> <span class="comment">/* shouldBeVisible */</span>, <span class="keyword">true</span> <span class="comment">/* isTop */</span>)) &#123;</span><br><span class="line"><span class="number">1340</span>            <span class="comment">// We only set the visibility to true if the activity is allowed to be visible based on</span></span><br><span class="line"><span class="number">1341</span>            <span class="comment">// keyguard state. This avoids setting this into motion in window manager that is later</span></span><br><span class="line"><span class="number">1342</span>            <span class="comment">// cancelled due to later calls to ensure visible activities that set visibility back to</span></span><br><span class="line"><span class="number">1343</span>            <span class="comment">// false.</span></span><br><span class="line"><span class="number">1344</span>            r.setVisibility(<span class="keyword">true</span>);</span><br><span class="line"><span class="number">1345</span>        &#125;</span><br><span class="line"><span class="number">1346</span></span><br><span class="line"><span class="number">1347</span>        <span class="comment">// schedule launch ticks to collect information about slow apps.</span></span><br><span class="line"><span class="number">1348</span>        r.startLaunchTickingLocked();</span><br><span class="line"><span class="number">1349</span></span><br><span class="line"><span class="number">1350</span>        <span class="comment">// Have the window manager re-evaluate the orientation of the screen based on the new</span></span><br><span class="line"><span class="number">1351</span>        <span class="comment">// activity order.  Note that as a result of this, it can call back into the activity</span></span><br><span class="line"><span class="number">1352</span>        <span class="comment">// manager with a new orientation.  We don't care about that, because the activity is not</span></span><br><span class="line"><span class="number">1353</span>        <span class="comment">// currently running so we are just restarting it anyway.</span></span><br><span class="line"><span class="number">1354</span>        <span class="keyword">if</span> (checkConfig) &#123;</span><br><span class="line"><span class="number">1355</span>            <span class="keyword">final</span> <span class="keyword">int</span> displayId = r.getDisplayId();</span><br><span class="line"><span class="number">1356</span>            <span class="keyword">final</span> Configuration config = mWindowManager.updateOrientationFromAppTokens(</span><br><span class="line"><span class="number">1357</span>                    getDisplayOverrideConfiguration(displayId),</span><br><span class="line"><span class="number">1358</span>                    r.mayFreezeScreenLocked(app) ? r.appToken : <span class="keyword">null</span>, displayId);</span><br><span class="line"><span class="number">1359</span>            <span class="comment">// Deferring resume here because we're going to launch new activity shortly.</span></span><br><span class="line"><span class="number">1360</span>            <span class="comment">// We don't want to perform a redundant launch of the same record while ensuring</span></span><br><span class="line"><span class="number">1361</span>            <span class="comment">// configurations and trying to resume top activity of focused stack.</span></span><br><span class="line"><span class="number">1362</span>            mService.updateDisplayOverrideConfigurationLocked(config, r, <span class="keyword">true</span> <span class="comment">/* deferResume */</span>,</span><br><span class="line"><span class="number">1363</span>                    displayId);</span><br><span class="line"><span class="number">1364</span>        &#125;</span><br><span class="line"><span class="number">1365</span></span><br><span class="line"><span class="number">1366</span>        <span class="keyword">if</span> (mKeyguardController.isKeyguardLocked()) &#123;</span><br><span class="line"><span class="number">1367</span>            r.notifyUnknownVisibilityLaunched();</span><br><span class="line"><span class="number">1368</span>        &#125;</span><br><span class="line"><span class="number">1369</span>        <span class="keyword">final</span> <span class="keyword">int</span> applicationInfoUid =</span><br><span class="line"><span class="number">1370</span>                (r.info.applicationInfo != <span class="keyword">null</span>) ? r.info.applicationInfo.uid : -<span class="number">1</span>;</span><br><span class="line"><span class="number">1371</span>        <span class="keyword">if</span> ((r.userId != app.userId) || (r.appInfo.uid != applicationInfoUid)) &#123;</span><br><span class="line"><span class="number">1372</span>            Slog.wtf(TAG,</span><br><span class="line"><span class="number">1373</span>                    <span class="string">"User ID for activity changing for "</span> + r</span><br><span class="line"><span class="number">1374</span>                            + <span class="string">" appInfo.uid="</span> + r.appInfo.uid</span><br><span class="line"><span class="number">1375</span>                            + <span class="string">" info.ai.uid="</span> + applicationInfoUid</span><br><span class="line"><span class="number">1376</span>                            + <span class="string">" old="</span> + r.app + <span class="string">" new="</span> + app);</span><br><span class="line"><span class="number">1377</span>        &#125;</span><br><span class="line"><span class="number">1378</span></span><br><span class="line"><span class="number">1379</span>        r.app = app;</span><br><span class="line"><span class="number">1380</span>        app.waitingToKill = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1381</span>        r.launchCount++;</span><br><span class="line"><span class="number">1382</span>        r.lastLaunchTime = SystemClock.uptimeMillis();</span><br><span class="line"><span class="number">1383</span></span><br><span class="line"><span class="number">1384</span>        <span class="keyword">if</span> (DEBUG_ALL) Slog.v(TAG, <span class="string">"Launching: "</span> + r);</span><br><span class="line"><span class="number">1385</span></span><br><span class="line"><span class="number">1386</span>        <span class="keyword">int</span> idx = app.activities.indexOf(r);</span><br><span class="line"><span class="number">1387</span>        <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1388</span>            app.activities.add(r);</span><br><span class="line"><span class="number">1389</span>        &#125;</span><br><span class="line"><span class="number">1390</span>        mService.updateLruProcessLocked(app, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="number">1391</span>        mService.updateOomAdjLocked();</span><br><span class="line"><span class="number">1392</span></span><br><span class="line"><span class="number">1393</span>        <span class="keyword">final</span> TaskRecord task = r.getTask();</span><br><span class="line"><span class="number">1394</span>        <span class="keyword">if</span> (task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE ||</span><br><span class="line"><span class="number">1395</span>                task.mLockTaskAuth == LOCK_TASK_AUTH_LAUNCHABLE_PRIV) &#123;</span><br><span class="line"><span class="number">1396</span>            setLockTaskModeLocked(task, LOCK_TASK_MODE_LOCKED, <span class="string">"mLockTaskAuth==LAUNCHABLE"</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1397</span>        &#125;</span><br><span class="line"><span class="number">1398</span></span><br><span class="line"><span class="number">1399</span>        <span class="keyword">final</span> ActivityStack stack = task.getStack();</span><br><span class="line"><span class="number">1400</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1401</span>            <span class="keyword">if</span> (app.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1402</span>                <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line"><span class="number">1403</span>            &#125;</span><br><span class="line"><span class="number">1404</span>            List&lt;ResultInfo&gt; results = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1405</span>            List&lt;ReferrerIntent&gt; newIntents = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1406</span>            <span class="keyword">if</span> (andResume) &#123;</span><br><span class="line"><span class="number">1407</span>                <span class="comment">// We don't need to deliver new intents and/or set results if activity is going</span></span><br><span class="line"><span class="number">1408</span>                <span class="comment">// to pause immediately after launch.</span></span><br><span class="line"><span class="number">1409</span>                results = r.results;</span><br><span class="line"><span class="number">1410</span>                newIntents = r.newIntents;</span><br><span class="line"><span class="number">1411</span>            &#125;</span><br><span class="line"><span class="number">1412</span>            <span class="keyword">if</span> (DEBUG_SWITCH) Slog.v(TAG_SWITCH,</span><br><span class="line"><span class="number">1413</span>                    <span class="string">"Launching: "</span> + r + <span class="string">" icicle="</span> + r.icicle + <span class="string">" with results="</span> + results</span><br><span class="line"><span class="number">1414</span>                    + <span class="string">" newIntents="</span> + newIntents + <span class="string">" andResume="</span> + andResume);</span><br><span class="line"><span class="number">1415</span>            EventLog.writeEvent(EventLogTags.AM_RESTART_ACTIVITY, r.userId,</span><br><span class="line"><span class="number">1416</span>                    System.identityHashCode(r), task.taskId, r.shortComponentName);</span><br><span class="line"><span class="number">1417</span>            <span class="keyword">if</span> (r.isHomeActivity()) &#123;</span><br><span class="line"><span class="number">1418</span>                <span class="comment">// Home process is the root process of the task.</span></span><br><span class="line"><span class="number">1419</span>                mService.mHomeProcess = task.mActivities.get(<span class="number">0</span>).app;</span><br><span class="line"><span class="number">1420</span>            &#125;</span><br><span class="line"><span class="number">1421</span>            mService.notifyPackageUse(r.intent.getComponent().getPackageName(),</span><br><span class="line"><span class="number">1422</span>                                      PackageManager.NOTIFY_PACKAGE_USE_ACTIVITY);</span><br><span class="line"><span class="number">1423</span>            r.sleeping = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1424</span>            r.forceNewConfig = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1425</span>            mService.showUnsupportedZoomDialogIfNeededLocked(r);</span><br><span class="line"><span class="number">1426</span>            mService.showAskCompatModeDialogLocked(r);</span><br><span class="line"><span class="number">1427</span>            r.compat = mService.compatibilityInfoForPackageLocked(r.info.applicationInfo);</span><br><span class="line"><span class="number">1428</span>            ProfilerInfo profilerInfo = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1429</span>            <span class="keyword">if</span> (mService.mProfileApp != <span class="keyword">null</span> &amp;&amp; mService.mProfileApp.equals(app.processName)) &#123;</span><br><span class="line"><span class="number">1430</span>                <span class="keyword">if</span> (mService.mProfileProc == <span class="keyword">null</span> || mService.mProfileProc == app) &#123;</span><br><span class="line"><span class="number">1431</span>                    mService.mProfileProc = app;</span><br><span class="line"><span class="number">1432</span>                    <span class="keyword">final</span> String profileFile = mService.mProfileFile;</span><br><span class="line"><span class="number">1433</span>                    <span class="keyword">if</span> (profileFile != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1434</span>                        ParcelFileDescriptor profileFd = mService.mProfileFd;</span><br><span class="line"><span class="number">1435</span>                        <span class="keyword">if</span> (profileFd != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1436</span>                            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1437</span>                                profileFd = profileFd.dup();</span><br><span class="line"><span class="number">1438</span>                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">1439</span>                                <span class="keyword">if</span> (profileFd != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1440</span>                                    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1441</span>                                        profileFd.close();</span><br><span class="line"><span class="number">1442</span>                                    &#125; <span class="keyword">catch</span> (IOException o) &#123;</span><br><span class="line"><span class="number">1443</span>                                    &#125;</span><br><span class="line"><span class="number">1444</span>                                    profileFd = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1445</span>                                &#125;</span><br><span class="line"><span class="number">1446</span>                            &#125;</span><br><span class="line"><span class="number">1447</span>                        &#125;</span><br><span class="line"><span class="number">1448</span></span><br><span class="line"><span class="number">1449</span>                        profilerInfo = <span class="keyword">new</span> ProfilerInfo(profileFile, profileFd,</span><br><span class="line"><span class="number">1450</span>                                mService.mSamplingInterval, mService.mAutoStopProfiler,</span><br><span class="line"><span class="number">1451</span>                                mService.mStreamingOutput);</span><br><span class="line"><span class="number">1452</span>                    &#125;</span><br><span class="line"><span class="number">1453</span>                &#125;</span><br><span class="line"><span class="number">1454</span>            &#125;</span><br><span class="line"><span class="number">1455</span></span><br><span class="line"><span class="number">1456</span>            app.hasShownUi = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1457</span>            app.pendingUiClean = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1458</span>            app.forceProcessStateUpTo(mService.mTopProcessState);</span><br><span class="line"><span class="number">1459</span>            <span class="comment">// Because we could be starting an Activity in the system process this may not go across</span></span><br><span class="line"><span class="number">1460</span>            <span class="comment">// a Binder interface which would create a new Configuration. Consequently we have to</span></span><br><span class="line"><span class="number">1461</span>            <span class="comment">// always create a new Configuration here.</span></span><br><span class="line"><span class="number">1462</span></span><br><span class="line"><span class="number">1463</span>            <span class="keyword">final</span> MergedConfiguration mergedConfiguration = <span class="keyword">new</span> MergedConfiguration(</span><br><span class="line"><span class="number">1464</span>                    mService.getGlobalConfiguration(), r.getMergedOverrideConfiguration());</span><br><span class="line"><span class="number">1465</span>            r.setLastReportedConfiguration(mergedConfiguration);</span><br><span class="line"><span class="number">1466</span></span><br><span class="line"><span class="number">1467</span>            app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</span><br><span class="line"><span class="number">1468</span>                    System.identityHashCode(r), r.info,</span><br><span class="line"><span class="number">1469</span>                    <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global and</span></span><br><span class="line"><span class="number">1470</span>                    <span class="comment">// override configs.</span></span><br><span class="line"><span class="number">1471</span>                    mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line"><span class="number">1472</span>                    mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line"><span class="number">1473</span>                    r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line"><span class="number">1474</span>                    r.persistentState, results, newIntents, !andResume,</span><br><span class="line"><span class="number">1475</span>                    mService.isNextTransitionForward(), profilerInfo);</span><br><span class="line"><span class="number">1476</span></span><br><span class="line"><span class="number">1477</span>            <span class="keyword">if</span> ((app.info.privateFlags&amp;ApplicationInfo.PRIVATE_FLAG_CANT_SAVE_STATE) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1478</span>                <span class="comment">// This may be a heavy-weight process!  Note that the package</span></span><br><span class="line"><span class="number">1479</span>                <span class="comment">// manager will ensure that only activity can run in the main</span></span><br><span class="line"><span class="number">1480</span>                <span class="comment">// process of the .apk, which is the only thing that will be</span></span><br><span class="line"><span class="number">1481</span>                <span class="comment">// considered heavy-weight.</span></span><br><span class="line"><span class="number">1482</span>                <span class="keyword">if</span> (app.processName.equals(app.info.packageName)) &#123;</span><br><span class="line"><span class="number">1483</span>                    <span class="keyword">if</span> (mService.mHeavyWeightProcess != <span class="keyword">null</span></span><br><span class="line"><span class="number">1484</span>                            &amp;&amp; mService.mHeavyWeightProcess != app) &#123;</span><br><span class="line"><span class="number">1485</span>                        Slog.w(TAG, <span class="string">"Starting new heavy weight process "</span> + app</span><br><span class="line"><span class="number">1486</span>                                + <span class="string">" when already running "</span></span><br><span class="line"><span class="number">1487</span>                                + mService.mHeavyWeightProcess);</span><br><span class="line"><span class="number">1488</span>                    &#125;</span><br><span class="line"><span class="number">1489</span>                    mService.mHeavyWeightProcess = app;</span><br><span class="line"><span class="number">1490</span>                    Message msg = mService.mHandler.obtainMessage(</span><br><span class="line"><span class="number">1491</span>                            ActivityManagerService.POST_HEAVY_NOTIFICATION_MSG);</span><br><span class="line"><span class="number">1492</span>                    msg.obj = r;</span><br><span class="line"><span class="number">1493</span>                    mService.mHandler.sendMessage(msg);</span><br><span class="line"><span class="number">1494</span>                &#125;</span><br><span class="line"><span class="number">1495</span>            &#125;</span><br><span class="line"><span class="number">1496</span></span><br><span class="line"><span class="number">1497</span>        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">1498</span>            <span class="keyword">if</span> (r.launchFailed) &#123;</span><br><span class="line"><span class="number">1499</span>                <span class="comment">// This is the second time we failed -- finish activity</span></span><br><span class="line"><span class="number">1500</span>                <span class="comment">// and give up.</span></span><br><span class="line"><span class="number">1501</span>                Slog.e(TAG, <span class="string">"Second failure launching "</span></span><br><span class="line"><span class="number">1502</span>                      + r.intent.getComponent().flattenToShortString()</span><br><span class="line"><span class="number">1503</span>                      + <span class="string">", giving up"</span>, e);</span><br><span class="line"><span class="number">1504</span>                mService.appDiedLocked(app);</span><br><span class="line"><span class="number">1505</span>                stack.requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line"><span class="number">1506</span>                        <span class="string">"2nd-crash"</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1507</span>                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1508</span>            &#125;</span><br><span class="line"><span class="number">1509</span></span><br><span class="line"><span class="number">1510</span>            <span class="comment">// This is the first time we failed -- restart process and</span></span><br><span class="line"><span class="number">1511</span>            <span class="comment">// retry.</span></span><br><span class="line"><span class="number">1512</span>            r.launchFailed = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1513</span>            app.activities.remove(r);</span><br><span class="line"><span class="number">1514</span>            <span class="keyword">throw</span> e;</span><br><span class="line"><span class="number">1515</span>        &#125;</span><br><span class="line"><span class="number">1516</span></span><br><span class="line"><span class="number">1517</span>        r.launchFailed = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1518</span>        <span class="keyword">if</span> (stack.updateLRUListLocked(r)) &#123;</span><br><span class="line"><span class="number">1519</span>            Slog.w(TAG, <span class="string">"Activity "</span> + r + <span class="string">" being launched, but already in LRU list"</span>);</span><br><span class="line"><span class="number">1520</span>        &#125;</span><br><span class="line"><span class="number">1521</span></span><br><span class="line"><span class="number">1522</span>        <span class="keyword">if</span> (andResume) &#123;</span><br><span class="line"><span class="number">1523</span>            <span class="comment">// As part of the process of launching, ActivityThread also performs</span></span><br><span class="line"><span class="number">1524</span>            <span class="comment">// a resume.</span></span><br><span class="line"><span class="number">1525</span>            stack.minimalResumeActivityLocked(r);</span><br><span class="line"><span class="number">1526</span>        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1527</span>            <span class="comment">// This activity is not starting in the resumed state... which should look like we asked</span></span><br><span class="line"><span class="number">1528</span>            <span class="comment">// it to pause+stop (but remain visible), and it has done so and reported back the</span></span><br><span class="line"><span class="number">1529</span>            <span class="comment">// current icicle and other state.</span></span><br><span class="line"><span class="number">1530</span>            <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES,</span><br><span class="line"><span class="number">1531</span>                    <span class="string">"Moving to PAUSED: "</span> + r + <span class="string">" (starting in paused state)"</span>);</span><br><span class="line"><span class="number">1532</span>            r.state = PAUSED;</span><br><span class="line"><span class="number">1533</span>        &#125;</span><br><span class="line"><span class="number">1534</span></span><br><span class="line"><span class="number">1535</span>        <span class="comment">// Launch the new version setup screen if needed.  We do this -after-</span></span><br><span class="line"><span class="number">1536</span>        <span class="comment">// launching the initial activity (that is, home), so that it can have</span></span><br><span class="line"><span class="number">1537</span>        <span class="comment">// a chance to initialize itself while in the background, making the</span></span><br><span class="line"><span class="number">1538</span>        <span class="comment">// switch back to it faster and look better.</span></span><br><span class="line"><span class="number">1539</span>        <span class="keyword">if</span> (isFocusedStack(stack)) &#123;</span><br><span class="line"><span class="number">1540</span>            mService.startSetupActivityLocked();</span><br><span class="line"><span class="number">1541</span>        &#125;</span><br><span class="line"><span class="number">1542</span></span><br><span class="line"><span class="number">1543</span>        <span class="comment">// Update any services we are bound to that might care about whether</span></span><br><span class="line"><span class="number">1544</span>        <span class="comment">// their client may have activities.</span></span><br><span class="line"><span class="number">1545</span>        <span class="keyword">if</span> (r.app != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1546</span>            mService.mServices.updateServiceConnectionActivitiesLocked(r.app);</span><br><span class="line"><span class="number">1547</span>        &#125;</span><br><span class="line"><span class="number">1548</span></span><br><span class="line"><span class="number">1549</span>        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1550</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>在这其中调用了<strong>app.thread.scheduleLaunchActivity</strong></p><p>而当activity所需要的进程未启动则会调用 startProcessLocked(<br>3752                app, hostingType, hostingNameStr, abiOverride, entryPoint, entryPointArgs);<br>然后这个方法又调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startResult = Process.start(entryPoint,</span><br><span class="line"><span class="number">3926</span>                        app.processName, uid, uid, gids, debugFlags, mountExternal,</span><br><span class="line"><span class="number">3927</span>                        app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,</span><br><span class="line"><span class="number">3928</span>                        app.info.dataDir, invokeWith, entryPointArgs);</span><br></pre></td></tr></table></figure></p><p>然后就到了ZygoteProcess中的start方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Process.<span class="function">ProcessStartResult <span class="title">start</span><span class="params">(<span class="keyword">final</span> String processClass,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">196</span>                                                  <span class="keyword">final</span> String niceName,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">197</span>                                                  <span class="keyword">int</span> uid, <span class="keyword">int</span> gid, <span class="keyword">int</span>[] gids,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">198</span>                                                  <span class="keyword">int</span> debugFlags, <span class="keyword">int</span> mountExternal,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">199</span>                                                  <span class="keyword">int</span> targetSdkVersion,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">200</span>                                                  String seInfo,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">201</span>                                                  String abi,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">202</span>                                                  String instructionSet,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">203</span>                                                  String appDataDir,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">204</span>                                                  String invokeWith,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">205</span>                                                  String[] zygoteArgs)</span> </span>&#123;</span><br><span class="line"><span class="number">206</span>        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">207</span>            <span class="keyword">return</span> startViaZygote(processClass, niceName, uid, gid, gids,</span><br><span class="line"><span class="number">208</span>                    debugFlags, mountExternal, targetSdkVersion, seInfo,</span><br><span class="line"><span class="number">209</span>                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);</span><br><span class="line"><span class="number">210</span>        &#125; <span class="keyword">catch</span> (ZygoteStartFailedEx ex) &#123;</span><br><span class="line"><span class="number">211</span>            Log.e(LOG_TAG,</span><br><span class="line"><span class="number">212</span>                    <span class="string">"Starting VM process through Zygote failed"</span>);</span><br><span class="line"><span class="number">213</span>            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="number">214</span>                    <span class="string">"Starting VM process through Zygote failed"</span>, ex);</span><br><span class="line"><span class="number">215</span>        &#125;</span><br><span class="line"><span class="number">216</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>对应方法太长于是就截取最关键的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(mLock) &#123;</span><br><span class="line"><span class="number">431</span>            <span class="keyword">return</span> zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);</span><br><span class="line"><span class="number">432</span>        &#125;</span><br></pre></td></tr></table></figure></p><p>这最终调用了zygote并通过socket通信的方式让那个zygote进程fork出一个新的进程，并根据我们刚刚传递的“android.app.ActivityTHread”字符串，发射出该对象并执行activitythread的main方法。<br>应用进程被产创建之后，首先执行的是ActivityThead的main方法。<br>main方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">thread.attach(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><p>attach方法又调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mgr.attachApplication(mAppThread);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是又回到了ActivityManagerService中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="number">7021</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</span><br><span class="line"><span class="number">7022</span>        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="number">7023</span>            <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line"><span class="number">7024</span>            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">7025</span>            attachApplicationLocked(thread, callingPid);</span><br><span class="line"><span class="number">7026</span>            Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">7027</span>        &#125;</span><br><span class="line"><span class="number">7028</span>    &#125;</span><br><span class="line"><span class="number">7029</span></span><br></pre></td></tr></table></figure></p><p>最终调用到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</span><br><span class="line"><span class="number">1468</span>                    System.identityHashCode(r), r.info,</span><br><span class="line"><span class="number">1469</span>                    <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global and</span></span><br><span class="line"><span class="number">1470</span>                    <span class="comment">// override configs.</span></span><br><span class="line"><span class="number">1471</span>                    mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line"><span class="number">1472</span>                    mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line"><span class="number">1473</span>                    r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line"><span class="number">1474</span>                    r.persistentState, results, newIntents, !andResume,</span><br><span class="line"><span class="number">1475</span>                    mService.isNextTransitionForward(), profilerInfo);</span><br></pre></td></tr></table></figure></p><p>与onPause类似，这里也是通过IApplicationThread的方法实现的，这里调用的scheduleLaunchActivity方法最终调用的是ActivityThread中的 <strong>scheduleLaunchActivity方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">(Intent intent, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> procState, Bundle state, PersistableBundle persistentState,</span></span></span><br><span class="line"><span class="function"><span class="params">List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> notResumed, <span class="keyword">boolean</span> isForward, ProfilerInfo profilerInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">updateProcessState(procState, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord();</span><br><span class="line"></span><br><span class="line">r.token = token;</span><br><span class="line">r.ident = ident;</span><br><span class="line">r.intent = intent;</span><br><span class="line">r.referrer = referrer;</span><br><span class="line">r.voiceInteractor = voiceInteractor;</span><br><span class="line">r.activityInfo = info;</span><br><span class="line">r.compatInfo = compatInfo;</span><br><span class="line">r.state = state;</span><br><span class="line">r.persistentState = persistentState;</span><br><span class="line"></span><br><span class="line">r.pendingResults = pendingResults;</span><br><span class="line">r.pendingIntents = pendingNewIntents;</span><br><span class="line"></span><br><span class="line">r.startsNotResumed = notResumed;</span><br><span class="line">r.isForward = isForward;</span><br><span class="line"></span><br><span class="line">r.profilerInfo = profilerInfo;</span><br><span class="line"></span><br><span class="line">r.overrideConfig = overrideConfig;</span><br><span class="line">updatePendingConfiguration(curConfig);</span><br><span class="line"></span><br><span class="line">sendMessage(H.LAUNCH_ACTIVITY, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的到了H中的handleMessage：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</span><br><span class="line">Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</span><br><span class="line"><span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</span><br><span class="line"></span><br><span class="line">r.packageInfo = getPackageInfoNoCheck(</span><br><span class="line">r.activityInfo.applicationInfo, r.compatInfo);</span><br><span class="line">handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>然后我们去看handleLaunchActivity，其中又调用了<br>Activity a = performLaunchActivity(r, customIntent);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line"><span class="comment">// System.out.println("##### [" + System.currentTimeMillis() + "] ActivityThread.performLaunchActivity(" + r + ")");</span></span><br><span class="line"></span><br><span class="line">ActivityInfo aInfo = r.activityInfo;</span><br><span class="line"><span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</span><br><span class="line">Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ComponentName component = r.intent.getComponent();</span><br><span class="line"><span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</span><br><span class="line">component = r.intent.resolveActivity(</span><br><span class="line">mInitialApplication.getPackageManager());</span><br><span class="line">r.intent.setComponent(component);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</span><br><span class="line">r.activityInfo.targetActivity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Activity activity = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</span><br><span class="line">activity = mInstrumentation.newActivity(</span><br><span class="line">cl, component.getClassName(), r.intent);</span><br><span class="line">StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">r.intent.setExtrasClassLoader(cl);</span><br><span class="line">r.intent.prepareToEnterProcess();</span><br><span class="line"><span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">r.state.setClassLoader(cl);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Unable to instantiate activity "</span> + component</span><br><span class="line">+ <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing launch of "</span> + r);</span><br><span class="line"><span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">TAG, r + <span class="string">": app="</span> + app</span><br><span class="line">+ <span class="string">", appName="</span> + app.getPackageName()</span><br><span class="line">+ <span class="string">", pkg="</span> + r.packageInfo.getPackageName()</span><br><span class="line">+ <span class="string">", comp="</span> + r.intent.getComponent().toShortString()</span><br><span class="line">+ <span class="string">", dir="</span> + r.packageInfo.getAppDir());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">Context appContext = createBaseContextForActivity(r, activity);</span><br><span class="line">CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</span><br><span class="line">Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</span><br><span class="line"><span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">config.updateFrom(r.overrideConfig);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></span><br><span class="line">+ r.activityInfo.name + <span class="string">" with config "</span> + config);</span><br><span class="line">Window window = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">window = r.mPendingRemoveWindow;</span><br><span class="line">r.mPendingRemoveWindow = <span class="keyword">null</span>;</span><br><span class="line">r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">r.referrer, r.voiceInteractor, window);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (customIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">activity.mIntent = customIntent;</span><br><span class="line">&#125;</span><br><span class="line">r.lastNonConfigurationInstances = <span class="keyword">null</span>;</span><br><span class="line">activity.mStartedActivity = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</span><br><span class="line"><span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</span><br><span class="line">activity.setTheme(theme);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line"><span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line"><span class="string">" did not call through to super.onCreate()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">r.activity = activity;</span><br><span class="line">r.stopped = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">activity.performStart();</span><br><span class="line">r.stopped = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line"><span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line"><span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</span><br><span class="line">r.persistentState);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">mInstrumentation.callActivityOnPostCreate(activity, r.state,</span><br><span class="line">r.persistentState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mInstrumentation.callActivityOnPostCreate(activity, r.state);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line"><span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line"><span class="string">" did not call through to super.onPostCreate()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.paused = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">mActivities.put(r.token, r);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line"><span class="string">"Unable to start activity "</span> + component</span><br><span class="line">+ <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mInstrumentation.newActivity通过反射方法创建了Activity，<br>最后调用了mInstrumentation.callActivityOnCreate方法<br>然后我们去Instrumentation中看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">(Activity activity, Bundle icicle)</span> </span>&#123;</span><br><span class="line">prePerformCreate(activity);</span><br><span class="line">activity.performCreate(icicle);</span><br><span class="line">postPerformCreate(activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们去看Activity中的activity.performCreate(icicle);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">restoreHasCurrentPermissionRequest(icicle);</span><br><span class="line">onCreate(icicle);</span><br><span class="line">mActivityTransitionState.readState(icicle);</span><br><span class="line">performCreateCommon();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好吧，总算看到了Activity的onCreate方法，<br>再去ActivityThread的performLaunchActivty中在调用了callActivityOnCreate方法后又调用了activity.performStart();方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">activity.performStart();</span><br><span class="line">r.stopped = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>去Activity类中看一眼对应的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mActivityTransitionState.setEnterActivityOptions(<span class="keyword">this</span>, getActivityOptions());</span><br><span class="line">mFragments.noteStateNotSaved();</span><br><span class="line">mCalled = <span class="keyword">false</span>;</span><br><span class="line">mFragments.execPendingActions();</span><br><span class="line">mInstrumentation.callActivityOnStart(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line"><span class="string">"Activity "</span> + mComponent.toShortString() +</span><br><span class="line"><span class="string">" did not call through to super.onStart()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">mFragments.dispatchStart();</span><br><span class="line">mFragments.reportLoaderStart();</span><br><span class="line"></span><br><span class="line"><span class="comment">// This property is set for all builds except final release</span></span><br><span class="line"><span class="keyword">boolean</span> isDlwarningEnabled = SystemProperties.getInt(<span class="string">"ro.bionic.ld.warning"</span>, <span class="number">0</span>) == <span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isAppDebuggable =</span><br><span class="line">(mApplication.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAppDebuggable || isDlwarningEnabled) &#123;</span><br><span class="line">String dlwarning = getDlWarning();</span><br><span class="line"><span class="keyword">if</span> (dlwarning != <span class="keyword">null</span>) &#123;</span><br><span class="line">String appName = getApplicationInfo().loadLabel(getPackageManager())</span><br><span class="line">.toString();</span><br><span class="line">String warning = <span class="string">"Detected problems with app native libraries\n"</span> +</span><br><span class="line"><span class="string">"(please consult log for detail):\n"</span> + dlwarning;</span><br><span class="line"><span class="keyword">if</span> (isAppDebuggable) &#123;</span><br><span class="line"><span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).</span><br><span class="line">setTitle(appName).</span><br><span class="line">setMessage(warning).</span><br><span class="line">setPositiveButton(android.R.string.ok, <span class="keyword">null</span>).</span><br><span class="line">setCancelable(<span class="keyword">false</span>).</span><br><span class="line">show();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, appName + <span class="string">"\n"</span> + warning, Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mActivityTransitionState.enterReady(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到了mInstrumentation.callActivityOnStart(this);<br>看一眼这个方法做了什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnStart</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">activity.onStart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尼玛，这么久终于等到onstart方法了。<br>然后我们再回到ActivityThread中的handleLaunchActivty中看到PerformLaynchActivty方法之后调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</span><br><span class="line">!r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</span><br></pre></td></tr></table></figure></p><p>然后就是调用r = performResumeActivity(token, clearHide, reason);<br>然后再调用 r.activity.performResume();<br>这个方法在Activity中，于是又跑到activty类中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">performRestart();</span><br><span class="line"></span><br><span class="line">mFragments.execPendingActions();</span><br><span class="line"></span><br><span class="line">mLastNonConfigurationInstances = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">mCalled = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// mResumed is set by the instrumentation</span></span><br><span class="line">mInstrumentation.callActivityOnResume(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line"><span class="string">"Activity "</span> + mComponent.toShortString() +</span><br><span class="line"><span class="string">" did not call through to super.onResume()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// invisible activities must be finished before onResume() completes</span></span><br><span class="line"><span class="keyword">if</span> (!mVisibleFromClient &amp;&amp; !mFinished) &#123;</span><br><span class="line">Log.w(TAG, <span class="string">"An activity without a UI must call finish() before onResume() completes"</span>);</span><br><span class="line"><span class="keyword">if</span> (getApplicationInfo().targetSdkVersion</span><br><span class="line">&gt; android.os.Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Activity "</span> + mComponent.toShortString() +</span><br><span class="line"><span class="string">" did not call finish() prior to onResume() completing"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now really resume, and install the current status bar and menu.</span></span><br><span class="line">mCalled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">mFragments.dispatchResume();</span><br><span class="line">mFragments.execPendingActions();</span><br><span class="line"></span><br><span class="line">onPostResume();</span><br><span class="line"><span class="keyword">if</span> (!mCalled) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line"><span class="string">"Activity "</span> + mComponent.toShortString() +</span><br><span class="line"><span class="string">" did not call through to super.onPostResume()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>又看到了mInstrumentation.callActivityOnResume(this);</p><p>去Instrumentation中看对应的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnResume</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">activity.mResumed = <span class="keyword">true</span>;</span><br><span class="line">activity.onResume();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> N = mActivityMonitors.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line"><span class="keyword">final</span> ActivityMonitor am = mActivityMonitors.get(i);</span><br><span class="line">am.match(activity, activity, activity.getIntent());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到了activity.onResume();</p><p>至此，一个activty的启动过程完成。<br>下面就是另一个activty的onstop过程：<br>在ActivityThread中的handleresumeActivty中：<br>有这样一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!r.onlyLocalRequest) &#123;</span><br><span class="line">r.nextIdle = mNewActivities;</span><br><span class="line">mNewActivities = r;</span><br><span class="line"><span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">TAG, <span class="string">"Scheduling idle handler for "</span> + r);</span><br><span class="line">Looper.myQueue().addIdleHandler(<span class="keyword">new</span> Idler());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先把这段代码贴出来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Idler</span> <span class="keyword">implements</span> <span class="title">MessageQueue</span>.<span class="title">IdleHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">queueIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ActivityClientRecord a = mNewActivities;</span><br><span class="line"><span class="keyword">boolean</span> stopProfiling = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (mBoundApplication != <span class="keyword">null</span> &amp;&amp; mProfiler.profileFd != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; mProfiler.autoStopProfiler) &#123;</span><br><span class="line">stopProfiling = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">mNewActivities = <span class="keyword">null</span>;</span><br><span class="line">IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">ActivityClientRecord prev;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">TAG, <span class="string">"Reporting idle of "</span> + a +</span><br><span class="line"><span class="string">" finished="</span> +</span><br><span class="line">(a.activity != <span class="keyword">null</span> &amp;&amp; a.activity.mFinished));</span><br><span class="line"><span class="keyword">if</span> (a.activity != <span class="keyword">null</span> &amp;&amp; !a.activity.mFinished) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">am.activityIdle(a.token, a.createdConfig, stopProfiling);</span><br><span class="line">a.createdConfig = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">prev = a;</span><br><span class="line">a = a.nextIdle;</span><br><span class="line">prev.nextIdle = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (stopProfiling) &#123;</span><br><span class="line">mProfiler.stopProfiling();</span><br><span class="line">&#125;</span><br><span class="line">ensureJitEnabled();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到其中调用了am.activityIdle(a.token, a.createdConfig, stopProfiling);</p><p>按照Binder机制，这段代码执行在ActivityManagerService中，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="number">7031</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityIdle</span><span class="params">(IBinder token, Configuration config, <span class="keyword">boolean</span> stopProfiling)</span> </span>&#123;</span><br><span class="line"><span class="number">7032</span>        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">7033</span>        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="number">7034</span>            ActivityStack stack = ActivityRecord.getStackLocked(token);</span><br><span class="line"><span class="number">7035</span>            <span class="keyword">if</span> (stack != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">7036</span>                ActivityRecord r =</span><br><span class="line"><span class="number">7037</span>                        mStackSupervisor.activityIdleInternalLocked(token, <span class="keyword">false</span> <span class="comment">/* fromTimeout */</span>,</span><br><span class="line"><span class="number">7038</span>                                <span class="keyword">false</span> <span class="comment">/* processPausingActivities */</span>, config);</span><br><span class="line"><span class="number">7039</span>                <span class="keyword">if</span> (stopProfiling) &#123;</span><br><span class="line"><span class="number">7040</span>                    <span class="keyword">if</span> ((mProfileProc == r.app) &amp;&amp; (mProfileFd != <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="number">7041</span>                        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">7042</span>                            mProfileFd.close();</span><br><span class="line"><span class="number">7043</span>                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">7044</span>                        &#125;</span><br><span class="line"><span class="number">7045</span>                        clearProfilerLocked();</span><br><span class="line"><span class="number">7046</span>                    &#125;</span><br><span class="line"><span class="number">7047</span>                &#125;</span><br><span class="line"><span class="number">7048</span>            &#125;</span><br><span class="line"><span class="number">7049</span>        &#125;</span><br><span class="line"><span class="number">7050</span>        Binder.restoreCallingIdentity(origId);</span><br><span class="line"><span class="number">7051</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>这其中有一段代码：mStackSupervisor.activityIdleInternalLocked<br>先贴下这个方法的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> ActivityRecord <span class="title">activityIdleInternalLocked</span><span class="params">(<span class="keyword">final</span> IBinder token, <span class="keyword">boolean</span> fromTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="number">1855</span>            <span class="keyword">boolean</span> processPausingActivities, Configuration config)</span> </span>&#123;</span><br><span class="line"><span class="number">1856</span>        <span class="keyword">if</span> (DEBUG_ALL) Slog.v(TAG, <span class="string">"Activity idle: "</span> + token);</span><br><span class="line"><span class="number">1857</span></span><br><span class="line"><span class="number">1858</span>        ArrayList&lt;ActivityRecord&gt; finishes = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1859</span>        ArrayList&lt;UserState&gt; startingUsers = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1860</span>        <span class="keyword">int</span> NS = <span class="number">0</span>;</span><br><span class="line"><span class="number">1861</span>        <span class="keyword">int</span> NF = <span class="number">0</span>;</span><br><span class="line"><span class="number">1862</span>        <span class="keyword">boolean</span> booting = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1863</span>        <span class="keyword">boolean</span> activityRemoved = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">1864</span></span><br><span class="line"><span class="number">1865</span>        ActivityRecord r = ActivityRecord.forTokenLocked(token);</span><br><span class="line"><span class="number">1866</span>        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1867</span>            <span class="keyword">if</span> (DEBUG_IDLE) Slog.d(TAG_IDLE, <span class="string">"activityIdleInternalLocked: Callers="</span></span><br><span class="line"><span class="number">1868</span>                    + Debug.getCallers(<span class="number">4</span>));</span><br><span class="line"><span class="number">1869</span>            mHandler.removeMessages(IDLE_TIMEOUT_MSG, r);</span><br><span class="line"><span class="number">1870</span>            r.finishLaunchTickingLocked();</span><br><span class="line"><span class="number">1871</span>            <span class="keyword">if</span> (fromTimeout) &#123;</span><br><span class="line"><span class="number">1872</span>                reportActivityLaunchedLocked(fromTimeout, r, -<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="number">1873</span>            &#125;</span><br><span class="line"><span class="number">1874</span></span><br><span class="line"><span class="number">1875</span>            <span class="comment">// This is a hack to semi-deal with a race condition</span></span><br><span class="line"><span class="number">1876</span>            <span class="comment">// in the client where it can be constructed with a</span></span><br><span class="line"><span class="number">1877</span>            <span class="comment">// newer configuration from when we asked it to launch.</span></span><br><span class="line"><span class="number">1878</span>            <span class="comment">// We'll update with whatever configuration it now says</span></span><br><span class="line"><span class="number">1879</span>            <span class="comment">// it used to launch.</span></span><br><span class="line"><span class="number">1880</span>            <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1881</span>                r.setLastReportedGlobalConfiguration(config);</span><br><span class="line"><span class="number">1882</span>            &#125;</span><br><span class="line"><span class="number">1883</span></span><br><span class="line"><span class="number">1884</span>            <span class="comment">// We are now idle.  If someone is waiting for a thumbnail from</span></span><br><span class="line"><span class="number">1885</span>            <span class="comment">// us, we can now deliver.</span></span><br><span class="line"><span class="number">1886</span>            r.idle = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">1887</span></span><br><span class="line"><span class="number">1888</span>            <span class="comment">//Slog.i(TAG, "IDLE: mBooted=" + mBooted + ", fromTimeout=" + fromTimeout);</span></span><br><span class="line"><span class="number">1889</span>            <span class="keyword">if</span> (isFocusedStack(r.getStack()) || fromTimeout) &#123;</span><br><span class="line"><span class="number">1890</span>                booting = checkFinishBootingLocked();</span><br><span class="line"><span class="number">1891</span>            &#125;</span><br><span class="line"><span class="number">1892</span>        &#125;</span><br><span class="line"><span class="number">1893</span></span><br><span class="line"><span class="number">1894</span>        <span class="keyword">if</span> (allResumedActivitiesIdle()) &#123;</span><br><span class="line"><span class="number">1895</span>            <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1896</span>                mService.scheduleAppGcsLocked();</span><br><span class="line"><span class="number">1897</span>            &#125;</span><br><span class="line"><span class="number">1898</span></span><br><span class="line"><span class="number">1899</span>            <span class="keyword">if</span> (mLaunchingActivity.isHeld()) &#123;</span><br><span class="line"><span class="number">1900</span>                mHandler.removeMessages(LAUNCH_TIMEOUT_MSG);</span><br><span class="line"><span class="number">1901</span>                <span class="keyword">if</span> (VALIDATE_WAKE_LOCK_CALLER &amp;&amp;</span><br><span class="line"><span class="number">1902</span>                        Binder.getCallingUid() != Process.myUid()) &#123;</span><br><span class="line"><span class="number">1903</span>                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Calling must be system uid"</span>);</span><br><span class="line"><span class="number">1904</span>                &#125;</span><br><span class="line"><span class="number">1905</span>                mLaunchingActivity.release();</span><br><span class="line"><span class="number">1906</span>            &#125;</span><br><span class="line"><span class="number">1907</span>            ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line"><span class="number">1908</span>        &#125;</span><br><span class="line"><span class="number">1909</span></span><br><span class="line"><span class="number">1910</span>        <span class="comment">// Atomically retrieve all of the other things to do.</span></span><br><span class="line"><span class="number">1911</span>        <span class="keyword">final</span> ArrayList&lt;ActivityRecord&gt; stops = processStoppingActivitiesLocked(r,</span><br><span class="line"><span class="number">1912</span>                <span class="keyword">true</span> <span class="comment">/* remove */</span>, processPausingActivities);</span><br><span class="line"><span class="number">1913</span>        NS = stops != <span class="keyword">null</span> ? stops.size() : <span class="number">0</span>;</span><br><span class="line"><span class="number">1914</span>        <span class="keyword">if</span> ((NF = mFinishingActivities.size()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1915</span>            finishes = <span class="keyword">new</span> ArrayList&lt;&gt;(mFinishingActivities);</span><br><span class="line"><span class="number">1916</span>            mFinishingActivities.clear();</span><br><span class="line"><span class="number">1917</span>        &#125;</span><br><span class="line"><span class="number">1918</span></span><br><span class="line"><span class="number">1919</span>        <span class="keyword">if</span> (mStartingUsers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1920</span>            startingUsers = <span class="keyword">new</span> ArrayList&lt;&gt;(mStartingUsers);</span><br><span class="line"><span class="number">1921</span>            mStartingUsers.clear();</span><br><span class="line"><span class="number">1922</span>        &#125;</span><br><span class="line"><span class="number">1923</span></span><br><span class="line"><span class="number">1924</span>        <span class="comment">// Stop any activities that are scheduled to do so but have been</span></span><br><span class="line"><span class="number">1925</span>        <span class="comment">// waiting for the next one to start.</span></span><br><span class="line"><span class="number">1926</span>        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NS; i++) &#123;</span><br><span class="line"><span class="number">1927</span>            r = stops.get(i);</span><br><span class="line"><span class="number">1928</span>            <span class="keyword">final</span> ActivityStack stack = r.getStack();</span><br><span class="line"><span class="number">1929</span>            <span class="keyword">if</span> (stack != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1930</span>                <span class="keyword">if</span> (r.finishing) &#123;</span><br><span class="line"><span class="number">1931</span>                    stack.finishCurrentActivityLocked(r, ActivityStack.FINISH_IMMEDIATELY, <span class="keyword">false</span>);</span><br><span class="line"><span class="number">1932</span>                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1933</span>                    stack.stopActivityLocked(r);</span><br><span class="line"><span class="number">1934</span>                &#125;</span><br><span class="line"><span class="number">1935</span>            &#125;</span><br><span class="line"><span class="number">1936</span>        &#125;</span><br><span class="line"><span class="number">1937</span></span><br><span class="line"><span class="number">1938</span>        <span class="comment">// Finish any activities that are scheduled to do so but have been</span></span><br><span class="line"><span class="number">1939</span>        <span class="comment">// waiting for the next one to start.</span></span><br><span class="line"><span class="number">1940</span>        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NF; i++) &#123;</span><br><span class="line"><span class="number">1941</span>            r = finishes.get(i);</span><br><span class="line"><span class="number">1942</span>            <span class="keyword">final</span> ActivityStack stack = r.getStack();</span><br><span class="line"><span class="number">1943</span>            <span class="keyword">if</span> (stack != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1944</span>                activityRemoved |= stack.destroyActivityLocked(r, <span class="keyword">true</span>, <span class="string">"finish-idle"</span>);</span><br><span class="line"><span class="number">1945</span>            &#125;</span><br><span class="line"><span class="number">1946</span>        &#125;</span><br><span class="line"><span class="number">1947</span></span><br><span class="line"><span class="number">1948</span>        <span class="keyword">if</span> (!booting) &#123;</span><br><span class="line"><span class="number">1949</span>            <span class="comment">// Complete user switch</span></span><br><span class="line"><span class="number">1950</span>            <span class="keyword">if</span> (startingUsers != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">1951</span>                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startingUsers.size(); i++) &#123;</span><br><span class="line"><span class="number">1952</span>                    mService.mUserController.finishUserSwitch(startingUsers.get(i));</span><br><span class="line"><span class="number">1953</span>                &#125;</span><br><span class="line"><span class="number">1954</span>            &#125;</span><br><span class="line"><span class="number">1955</span>        &#125;</span><br><span class="line"><span class="number">1956</span></span><br><span class="line"><span class="number">1957</span>        mService.trimApplications();</span><br><span class="line"><span class="number">1958</span>        <span class="comment">//dump();</span></span><br><span class="line"><span class="number">1959</span>        <span class="comment">//mWindowManager.dump();</span></span><br><span class="line"><span class="number">1960</span></span><br><span class="line"><span class="number">1961</span>        <span class="keyword">if</span> (activityRemoved) &#123;</span><br><span class="line"><span class="number">1962</span>            resumeFocusedStackTopActivityLocked();</span><br><span class="line"><span class="number">1963</span>        &#125;</span><br><span class="line"><span class="number">1964</span></span><br><span class="line"><span class="number">1965</span>        <span class="keyword">return</span> r;</span><br><span class="line"><span class="number">1966</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>在这其中，又调用了 stack.stopActivityLocked(r);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">stopActivityLocked</span><span class="params">(ActivityRecord r)</span> </span>&#123;</span><br><span class="line"><span class="number">3389</span>        <span class="keyword">if</span> (DEBUG_SWITCH) Slog.d(TAG_SWITCH, <span class="string">"Stopping: "</span> + r);</span><br><span class="line"><span class="number">3390</span>        <span class="keyword">if</span> ((r.intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NO_HISTORY) != <span class="number">0</span></span><br><span class="line"><span class="number">3391</span>                || (r.info.flags&amp;ActivityInfo.FLAG_NO_HISTORY) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">3392</span>            <span class="keyword">if</span> (!r.finishing) &#123;</span><br><span class="line"><span class="number">3393</span>                <span class="keyword">if</span> (!mService.isSleepingLocked()) &#123;</span><br><span class="line"><span class="number">3394</span>                    <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES, <span class="string">"no-history finish of "</span> + r);</span><br><span class="line"><span class="number">3395</span>                    <span class="keyword">if</span> (requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line"><span class="number">3396</span>                            <span class="string">"stop-no-history"</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line"><span class="number">3397</span>                        <span class="comment">// If &#123;@link requestFinishActivityLocked&#125; returns &#123;@code true&#125;,</span></span><br><span class="line"><span class="number">3398</span>                        <span class="comment">// &#123;@link adjustFocusedActivityStackLocked&#125; would have been already called.</span></span><br><span class="line"><span class="number">3399</span>                        r.resumeKeyDispatchingLocked();</span><br><span class="line"><span class="number">3400</span>                        <span class="keyword">return</span>;</span><br><span class="line"><span class="number">3401</span>                    &#125;</span><br><span class="line"><span class="number">3402</span>                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">3403</span>                    <span class="keyword">if</span> (DEBUG_STATES) Slog.d(TAG_STATES, <span class="string">"Not finishing noHistory "</span> + r</span><br><span class="line"><span class="number">3404</span>                            + <span class="string">" on stop because we're just sleeping"</span>);</span><br><span class="line"><span class="number">3405</span>                &#125;</span><br><span class="line"><span class="number">3406</span>            &#125;</span><br><span class="line"><span class="number">3407</span>        &#125;</span><br><span class="line"><span class="number">3408</span></span><br><span class="line"><span class="number">3409</span>        <span class="keyword">if</span> (r.app != <span class="keyword">null</span> &amp;&amp; r.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="number">3410</span>            adjustFocusedActivityStackLocked(r, <span class="string">"stopActivity"</span>);</span><br><span class="line"><span class="number">3411</span>            r.resumeKeyDispatchingLocked();</span><br><span class="line"><span class="number">3412</span>            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">3413</span>                r.stopped = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">3414</span>                <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES,</span><br><span class="line"><span class="number">3415</span>                        <span class="string">"Moving to STOPPING: "</span> + r + <span class="string">" (stop requested)"</span>);</span><br><span class="line"><span class="number">3416</span>                r.state = STOPPING;</span><br><span class="line"><span class="number">3417</span>                <span class="keyword">if</span> (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,</span><br><span class="line"><span class="number">3418</span>                        <span class="string">"Stopping visible="</span> + r.visible + <span class="string">" for "</span> + r);</span><br><span class="line"><span class="number">3419</span>                <span class="keyword">if</span> (!r.visible) &#123;</span><br><span class="line"><span class="number">3420</span>                    r.setVisible(<span class="keyword">false</span>);</span><br><span class="line"><span class="number">3421</span>                &#125;</span><br><span class="line"><span class="number">3422</span>                EventLogTags.writeAmStopActivity(</span><br><span class="line"><span class="number">3423</span>                        r.userId, System.identityHashCode(r), r.shortComponentName);</span><br><span class="line"><span class="number">3424</span>                r.app.thread.scheduleStopActivity(r.appToken, r.visible, r.configChangeFlags);</span><br><span class="line"><span class="number">3425</span>                <span class="keyword">if</span> (mService.isSleepingOrShuttingDownLocked()) &#123;</span><br><span class="line"><span class="number">3426</span>                    r.setSleeping(<span class="keyword">true</span>);</span><br><span class="line"><span class="number">3427</span>                &#125;</span><br><span class="line"><span class="number">3428</span>                Message msg = mHandler.obtainMessage(STOP_TIMEOUT_MSG, r);</span><br><span class="line"><span class="number">3429</span>                mHandler.sendMessageDelayed(msg, STOP_TIMEOUT);</span><br><span class="line"><span class="number">3430</span>            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="number">3431</span>                <span class="comment">// Maybe just ignore exceptions here...  if the process</span></span><br><span class="line"><span class="number">3432</span>                <span class="comment">// has crashed, our death notification will clean things</span></span><br><span class="line"><span class="number">3433</span>                <span class="comment">// up.</span></span><br><span class="line"><span class="number">3434</span>                Slog.w(TAG, <span class="string">"Exception thrown during pause"</span>, e);</span><br><span class="line"><span class="number">3435</span>                <span class="comment">// Just in case, assume it to be stopped.</span></span><br><span class="line"><span class="number">3436</span>                r.stopped = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">3437</span>                <span class="keyword">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class="string">"Stop failed; moving to STOPPED: "</span> + r);</span><br><span class="line"><span class="number">3438</span>                r.state = STOPPED;</span><br><span class="line"><span class="number">3439</span>                <span class="keyword">if</span> (r.deferRelaunchUntilPaused) &#123;</span><br><span class="line"><span class="number">3440</span>                    destroyActivityLocked(r, <span class="keyword">true</span>, <span class="string">"stop-except"</span>);</span><br><span class="line"><span class="number">3441</span>                &#125;</span><br><span class="line"><span class="number">3442</span>            &#125;</span><br><span class="line"><span class="number">3443</span>        &#125;</span><br><span class="line"><span class="number">3444</span>    &#125;</span><br></pre></td></tr></table></figure></p><p>r.app.thread.scheduleStopActivity这个熟悉吧，这个肯定又是去ActivityThread中，还是Binder机制，<br>于是又回到ActivityThread中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleStopActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> showWindow,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> configChanges)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> seq = getLifecycleSeq();</span><br><span class="line"><span class="keyword">if</span> (DEBUG_ORDER) Slog.d(TAG, <span class="string">"stopActivity "</span> + ActivityThread.<span class="keyword">this</span></span><br><span class="line">+ <span class="string">" operation received seq: "</span> + seq);</span><br><span class="line">sendMessage(</span><br><span class="line">showWindow ? H.STOP_ACTIVITY_SHOW : H.STOP_ACTIVITY_HIDE,</span><br><span class="line">token, <span class="number">0</span>, configChanges, seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还是去H中看对应的case：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> STOP_ACTIVITY_SHOW: &#123;</span><br><span class="line">Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStop"</span>);</span><br><span class="line">SomeArgs args = (SomeArgs) msg.obj;</span><br><span class="line">handleStopActivity((IBinder) args.arg1, <span class="keyword">true</span>, args.argi2, args.argi3);</span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p><p>再追踪，发现handleStopActivty中又调用了performStopActivityInner(r, info, show, true, “handleStopActivity”);<br>然后对应的有看到r.activity.performStop(false /<em>preserveWindow</em>/);<br>回到Activty中：<br>又调用了mInstrumentation.callActivityOnStop(this);<br>贴代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnStop</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">activity.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>激动不，终于调用到了onstop方法。<br>值得注意的是在 r.activity.performStop();之前调用了callCallActivityOnSaveInstanceState(r);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callCallActivityOnSaveInstanceState</span><span class="params">(ActivityClientRecord r)</span> </span>&#123;</span><br><span class="line">r.state = <span class="keyword">new</span> Bundle();</span><br><span class="line">r.state.setAllowFds(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">r.persistentState = <span class="keyword">new</span> PersistableBundle();</span><br><span class="line">mInstrumentation.callActivityOnSaveInstanceState(r.activity, r.state,</span><br><span class="line">r.persistentState);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mInstrumentation.callActivityOnSaveInstanceState(r.activity, r.state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后又调用到了mInstrumentation.callActivityOnSaveInstanceState<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnSaveInstanceState</span><span class="params">(Activity activity, Bundle outState,</span></span></span><br><span class="line"><span class="function"><span class="params">PersistableBundle outPersistentState)</span> </span>&#123;</span><br><span class="line">activity.performSaveInstanceState(outState, outPersistentState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到Activity中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">onSaveInstanceState(outState);</span><br><span class="line">saveManagedDialogs(outState);</span><br><span class="line">mActivityTransitionState.saveState(outState);</span><br><span class="line">storeHasCurrentPermissionRequest(outState);</span><br><span class="line"><span class="keyword">if</span> (DEBUG_LIFECYCLE) Slog.v(TAG, <span class="string">"onSaveInstanceState "</span> + <span class="keyword">this</span> + <span class="string">": "</span> + outState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>onSaveInstanceState(outState);就是在这里被调起来的，<br>所以通常问onSaveInstanceState在什么时机被调起，就是onstop之前。<br>至此，所有的activity启动流程我们都分析完成了。<br>下面总结一下：</p><ol><li>Activity启动涉及到多个进程之间的通讯，这里主要是ActivityThead和ActivityManagerService之间的通讯</li><li>ActivityThread向ActivityManagerService进程间消息通过ActivityManagerNative，ActivityManagerService向ActivityThread进程间传递消息通过IApplicationThread</li><li>ActivityManagerService保存完信息之后会将系统栈顶的activity执行onPause操作，并且IApplication进程间通讯告诉应用程序执行当前栈顶Activity的onPause方法。</li><li>ActivityThead接收到SystemServer的消息后会统一交给自身定义的Handler对象处理；</li><li>ActivityManagerService将执行创建Activity的通知告知ActivityTHread，通过反射机制创建出Activity对象，并执行Activity的oncreate方法，onstart方法，onresume方法。</li><li>ActivityThread执行完成onresume方法后告知ActivityManagerServise onresume方法完成，执行栈顶的onstop方法。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于8-0源码解析：Activity启动流程&quot;&gt;&lt;a href=&quot;#基于8-0源码解析：Activity启动流程&quot; class=&quot;headerlink&quot; title=&quot;基于8.0源码解析：Activity启动流程&quot;&gt;&lt;/a&gt;基于8.0源码解析：Activity启动
      
    
    </summary>
    
      <category term="源码解析" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="源码解析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android 项目构建过程</title>
    <link href="http://yoursite.com/2018/01/12/Android-%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/01/12/Android-项目构建过程/</id>
    <published>2018-01-12T06:04:05.000Z</published>
    <updated>2018-01-12T06:09:28.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1、AAPT（Android-Asset-Packaging-Tool）工具会打包应用中的资源文件，如AndroidManifest-xml、layout布局中的xml等，并将xml文件编译为二进制形式，当然asset文件夹中的文件不会被编译，图片几raw文件夹中的资源也会保持原来的形态，需要注意的是raw文件夹种的资源也会生成资源id。AAPT编译完成后会生成R-java文件。"><a href="#1-1、AAPT（Android-Asset-Packaging-Tool）工具会打包应用中的资源文件，如AndroidManifest-xml、layout布局中的xml等，并将xml文件编译为二进制形式，当然asset文件夹中的文件不会被编译，图片几raw文件夹中的资源也会保持原来的形态，需要注意的是raw文件夹种的资源也会生成资源id。AAPT编译完成后会生成R-java文件。" class="headerlink" title="1. 1、AAPT（Android Asset Packaging Tool）工具会打包应用中的资源文件，如AndroidManifest.xml、layout布局中的xml等，并将xml文件编译为二进制形式，当然asset文件夹中的文件不会被编译，图片几raw文件夹中的资源也会保持原来的形态，需要注意的是raw文件夹种的资源也会生成资源id。AAPT编译完成后会生成R.java文件。"></a>1. 1、AAPT（Android Asset Packaging Tool）工具会打包应用中的资源文件，如AndroidManifest.xml、layout布局中的xml等，并将xml文件编译为二进制形式，当然asset文件夹中的文件不会被编译，图片几raw文件夹中的资源也会保持原来的形态，需要注意的是raw文件夹种的资源也会生成资源id。AAPT编译完成后会生成R.java文件。</h3><h3 id="2-2、AIDL工具会将所有的AIDL接口转化为java接口。"><a href="#2-2、AIDL工具会将所有的AIDL接口转化为java接口。" class="headerlink" title="2. 2、AIDL工具会将所有的AIDL接口转化为java接口。"></a>2. 2、AIDL工具会将所有的AIDL接口转化为java接口。</h3><h3 id="3-3、所有的java代码，包括R-java与aidl文件都会被java编译器编译成-class文件。"><a href="#3-3、所有的java代码，包括R-java与aidl文件都会被java编译器编译成-class文件。" class="headerlink" title="3. 3、所有的java代码，包括R.java与aidl文件都会被java编译器编译成.class文件。"></a>3. 3、所有的java代码，包括R.java与aidl文件都会被java编译器编译成.class文件。</h3><h3 id="4-4、Dex工具会将上述产生的-class文件及第三方库及其他-class文件编译成-dex文件（dex文件是Dalvik虚拟机可以执行的格式），dex文件最终会被打包进APK文件。"><a href="#4-4、Dex工具会将上述产生的-class文件及第三方库及其他-class文件编译成-dex文件（dex文件是Dalvik虚拟机可以执行的格式），dex文件最终会被打包进APK文件。" class="headerlink" title="4. 4、Dex工具会将上述产生的.class文件及第三方库及其他.class文件编译成.dex文件（dex文件是Dalvik虚拟机可以执行的格式），dex文件最终会被打包进APK文件。"></a>4. 4、Dex工具会将上述产生的.class文件及第三方库及其他.class文件编译成.dex文件（dex文件是Dalvik虚拟机可以执行的格式），dex文件最终会被打包进APK文件。</h3><h3 id="5-5、ApkBuilder工具会将编译过的资源（如图片等）以及-dex文件打包成APK文件。"><a href="#5-5、ApkBuilder工具会将编译过的资源（如图片等）以及-dex文件打包成APK文件。" class="headerlink" title="5. 5、ApkBuilder工具会将编译过的资源（如图片等）以及.dex文件打包成APK文件。"></a>5. 5、ApkBuilder工具会将编译过的资源（如图片等）以及.dex文件打包成APK文件。</h3><h3 id="6-6、生成apk文件后，需要对其签名才可安装到设备，平时测试会使用debug-keystore，当正式发布应用时必须使用release版的keysore对应用进行签名。"><a href="#6-6、生成apk文件后，需要对其签名才可安装到设备，平时测试会使用debug-keystore，当正式发布应用时必须使用release版的keysore对应用进行签名。" class="headerlink" title="6. 6、生成apk文件后，需要对其签名才可安装到设备，平时测试会使用debug keystore，当正式发布应用时必须使用release版的keysore对应用进行签名。"></a>6. 6、生成apk文件后，需要对其签名才可安装到设备，平时测试会使用debug keystore，当正式发布应用时必须使用release版的keysore对应用进行签名。</h3><h3 id="7-7、如果对APK正式签名，还需要使用zipalign工具对APK进行对齐操作，这样做的好处是当应用运行时会提高速度，但是相应会增加内存的开销。"><a href="#7-7、如果对APK正式签名，还需要使用zipalign工具对APK进行对齐操作，这样做的好处是当应用运行时会提高速度，但是相应会增加内存的开销。" class="headerlink" title="7. 7、如果对APK正式签名，还需要使用zipalign工具对APK进行对齐操作，这样做的好处是当应用运行时会提高速度，但是相应会增加内存的开销。"></a>7. 7、如果对APK正式签名，还需要使用zipalign工具对APK进行对齐操作，这样做的好处是当应用运行时会提高速度，但是相应会增加内存的开销。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1、AAPT（Android-Asset-Packaging-Tool）工具会打包应用中的资源文件，如AndroidManifest-xml、layout布局中的xml等，并将xml文件编译为二进制形式，当然asset文件夹中的文件不会被编译，图片几raw文件
      
    
    </summary>
    
      <category term="源码解析" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>android 8.0同步问题适配相关问题（联想）</title>
    <link href="http://yoursite.com/2018/01/11/android-8-0%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E9%80%82%E9%85%8D%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%EF%BC%88%E8%81%94%E6%83%B3%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/11/android-8-0同步问题适配相关问题（联想）/</id>
    <published>2018-01-11T07:19:23.000Z</published>
    <updated>2018-01-11T07:20:06.862Z</updated>
    
    <content type="html"><![CDATA[<h4 id="android-8-0同步问题适配相关问题（联想）"><a href="#android-8-0同步问题适配相关问题（联想）" class="headerlink" title="android 8.0同步问题适配相关问题（联想）"></a>android 8.0同步问题适配相关问题（联想）</h4><p>由于访问<a href="http://clients3.google.com/generate_204失败，导致的WiFi和移动网络提示“已连接" target="_blank" rel="noopener">http://clients3.google.com/generate_204失败，导致的WiFi和移动网络提示“已连接</a> 但无法访问互联网”问题<br>，查看之前版本源码，网络验证并未作为条件记录在jobStatus中，从dump出来信息看是同步操作的条件不满足。</p><p>反向验证，关闭网络验证</p><h3 id="1、adb-shell-settings-put-global-captive-portal-detection-enabled-0"><a href="#1、adb-shell-settings-put-global-captive-portal-detection-enabled-0" class="headerlink" title="1、adb shell settings put global captive_portal_detection_enabled 0"></a>1、adb shell settings put global captive_portal_detection_enabled 0</h3><p>执行关闭这个命令后adb reboot网络上叉号消失，同步正常。</p><h3 id="2、打开vpn，访问谷歌正常，同步邮件正常。"><a href="#2、打开vpn，访问谷歌正常，同步邮件正常。" class="headerlink" title="2、打开vpn，访问谷歌正常，同步邮件正常。"></a>2、打开vpn，访问谷歌正常，同步邮件正常。</h3><p><img src="http://opq81riyh.bkt.clouddn.com/ConnectivityController" alt="源码"><br><img src="http://opq81riyh.bkt.clouddn.com/Undtaisfied" alt="源码"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;android-8-0同步问题适配相关问题（联想）&quot;&gt;&lt;a href=&quot;#android-8-0同步问题适配相关问题（联想）&quot; class=&quot;headerlink&quot; title=&quot;android 8.0同步问题适配相关问题（联想）&quot;&gt;&lt;/a&gt;android 8.0
      
    
    </summary>
    
      <category term="bug" scheme="http://yoursite.com/categories/bug/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>IPC方式的优缺点和适用场景</title>
    <link href="http://yoursite.com/2018/01/11/IPC%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2018/01/11/IPC方式的优缺点和适用场景/</id>
    <published>2018-01-11T06:29:19.000Z</published>
    <updated>2018-01-11T06:31:04.386Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>名称</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>Bundle</td><td>简单易用</td><td>只能传输Bundle支持的数据类型</td><td>四大组件间的进程间通信</td></tr><tr><td>文件共享</td><td>简单易用</td><td>不适合高并发场景，并且无法做到进程间的即时通信</td><td>无并发访问情形，交换简单的数据实时性不高的场景</td></tr><tr><td>AIDL</td><td>功能强大，支持一对多并发通信，支持实时通信</td><td>使用稍复杂，需处理好线程同步</td><td>一对多通信且有RPC需求</td></tr><tr><td>Messenager</td><td>功能一般，支持一对多串行通信，支持实时通信</td><td>不能很好的处理高并发情形，不支持RPC，数据通过Message进行传输，因此只能传输Bundle支持的数据类型</td><td>低并发的一对多即时通信，无RPC需求，或者无需返回结果的RPC需求</td></tr><tr><td>ContentProvider</td><td>在数据源访问方面功能强大，支持一对多并发数据共享，可通过call方法扩展其他操作</td><td>可以理解为受约束的AIDL，主要提供数据源的CRUD操作</td><td>一对多的进程间的数据共享</td></tr><tr><td>Socket</td><td>功能强大，可以通过网络传输字节流，支持一对多并发实时通信</td><td>实现细节稍有点繁琐，不支持杂直接的RPC</td><td>网络数据交换</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;th&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bundle&lt;/td&gt;
&lt;td&gt;简单易用&lt;/td&gt;
&lt;td&gt;只能传输Bun
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>setCompoundDrawables不显示图片</title>
    <link href="http://yoursite.com/2018/01/09/setCompoundDrawables%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/01/09/setCompoundDrawables不显示图片/</id>
    <published>2018-01-09T10:59:47.000Z</published>
    <updated>2018-01-09T11:11:46.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BUG-28475-海外版登陆界面缺少Hi图标中代码不起作用的问题"><a href="#BUG-28475-海外版登陆界面缺少Hi图标中代码不起作用的问题" class="headerlink" title="BUG #28475 海外版登陆界面缺少Hi图标中代码不起作用的问题"></a><strong>BUG #28475 海外版登陆界面缺少Hi图标中代码不起作用的问题</strong></h3><h2 id="dynamicAddView会调用BaseActivity的dynamicAddSkinEnableView，"><a href="#dynamicAddView会调用BaseActivity的dynamicAddSkinEnableView，" class="headerlink" title="dynamicAddView会调用BaseActivity的dynamicAddSkinEnableView，"></a>dynamicAddView会调用BaseActivity的dynamicAddSkinEnableView，</h2><h2 id="然后调用AttrFactory-get，通过if-else判断"><a href="#然后调用AttrFactory-get，通过if-else判断" class="headerlink" title="然后调用AttrFactory.get，通过if else判断"></a>然后调用AttrFactory.get，通过if else判断</h2><p>mSkinAttr = new DrawableLeftAttr();</p><p>看代码知道最终调用setCompoundDrawables。通过debug发现已进入equas方法，</p><p>但最终并未成功加载图片到textView的左侧。</p><p>然后去看setCompoundDrawables源码，发现有这么一句注释。</p><p>```Sets the Drawables (if any) to appear to the left of, above, to the</p><ul><li>right of, and below the text. Use {@code null} if you do not want a</li><li>Drawable there. The Drawables must already have had</li><li>{@link Drawable#setBounds} called.</li></ul><p>skin.lib不能修改源码，只能写demo来验证是不是这个原因造成的。</p><p>布局这样子，能正常显示，运行起来也没有问题。</p><p>然后代码里修改，通过setCompoundDrawables在Textview左侧加图片，运行发现不能正常显示。</p><p>调用drawable.setBounds 后能够正常显示。</p><p>2、直接调用setCompoundDrawablesWithIntrinsicBounds方法，不用setBounds也能正常显示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;BUG-28475-海外版登陆界面缺少Hi图标中代码不起作用的问题&quot;&gt;&lt;a href=&quot;#BUG-28475-海外版登陆界面缺少Hi图标中代码不起作用的问题&quot; class=&quot;headerlink&quot; title=&quot;BUG #28475 海外版登陆界面缺少Hi图标中代
      
    
    </summary>
    
      <category term="bug" scheme="http://yoursite.com/categories/bug/"/>
    
    
      <category term="android bug" scheme="http://yoursite.com/tags/android-bug/"/>
    
  </entry>
  
  <entry>
    <title>startService引起的FC</title>
    <link href="http://yoursite.com/2018/01/07/startService%E5%BC%95%E8%B5%B7%E7%9A%84FC/"/>
    <id>http://yoursite.com/2018/01/07/startService引起的FC/</id>
    <published>2018-01-06T16:25:20.000Z</published>
    <updated>2018-01-09T11:12:31.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h3><p>Short Msg: java.lang.RuntimeException<br>// Long Msg: java.lang.RuntimeException: Unknown exception code: 1936206469 msg null<br>// Build Label: OPPO/R9PlusmA/R9PlusA:6.0.1/MMB29M/1481606711:user/release-keys<br>// Build Changelist: eng.root.20171024.134100<br>// Build Time: 1508823947000<br>// java.lang.RuntimeException: Unable to create service com.kingsoft.email.eventbus.Transferservice: java.lang.RuntimeException: Unknown exception code: 1936206469 msg null<br>//     at android.app.ActivityThread.handleCreateService(ActivityThread.java:2978)<br>//     at android.app.ActivityThread.access$2100(ActivityThread.java:165)<br>//     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1513)<br>//     at android.os.Handler.dispatchMessage(Handler.java:102)<br>//     at android.os.Looper.loop(Looper.java:179)<br>//     at android.app.ActivityThread.main(ActivityThread.java:5672)<br>//     at java.lang.reflect.Method.invoke(Native Method)<br>//     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:786)<br>//     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:676)<br>// Caused by: java.lang.RuntimeException: Unknown exception code: 1936206469 msg null<br>//     at android.os.Parcel.readException(Parcel.java:1644)<br>//     at android.os.Parcel.readException(Parcel.java:1583)<br>//     at android.app.ActivityManagerProxy.serviceDoneExecuting(ActivityManagerNative.java:3907)<br>//     at android.app.ActivityThread.handleCreateService(ActivityThread.java:2971)<br>//     … 8 more</p><h3 id="onStartCommand方法返回的数值问题"><a href="#onStartCommand方法返回的数值问题" class="headerlink" title="onStartCommand方法返回的数值问题"></a>onStartCommand方法返回的数值问题</h3><p><strong>这里主要解释这三个变量的意义：</strong></p><p><em>1、  START_STICKY</em></p><p>在运行onStartCommand后service进程被kill后，那将保留在开始状态，但是不保留那些传入的intent。不久后service就会再次尝试重新创建，因为保留在开始状态，在创建     service后将保证调用onstartCommand。如果没有传递任何开始命令给service，那将获取到null的intent</p><p><em>2、  START_STICKY</em></p><p>在运行onStartCommand后service进程被kill后，并且没有新的intent传递给它。Service将移出开始状态，并且直到新的明显的方法（startService）调用才重新创建。因为如果没有传递任何未决定的intent那么service是不会启动，也就是期间onstartCommand不会接收到任何null的intent。</p><p><em>3、  START_REDELIVER_INTENT</em></p><p>在运行onStartCommand后service进程被kill后，系统将会再次启动service，并传入最后一个intent给onstartCommand。直到调用stopSelf(int)才停止传递intent。如果在被kill后还有未处理好的intent，那被kill后服务还是会自动启动。因此onstartCommand不会接收到任何null的intent。</p><blockquote><p>START_STICKY和 START_STICKY：当进程被杀死后onDestroy()是不会被执行的！</p><p>START_REDELIVER_INTENT ：当进程被杀死后onDestroy()会被执行！</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><a href="http://blog.csdn.net/ssstudio/article/details/7258363" target="_blank" rel="noopener">参考文章</a></h2></blockquote><h2 id="必应图"><a href="#必应图" class="headerlink" title="必应图"></a><a href="http://cn.bing.com/az/hprichbg/rb/Wintersolstice1222_ROW10807868228_1920x1080.jpg" target="_blank" rel="noopener">必应图</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;bug描述&quot;&gt;&lt;a href=&quot;#bug描述&quot; class=&quot;headerlink&quot; title=&quot;bug描述&quot;&gt;&lt;/a&gt;bug描述&lt;/h3&gt;&lt;p&gt;Short Msg: java.lang.RuntimeException&lt;br&gt;// Long Msg: java
      
    
    </summary>
    
      <category term="bug" scheme="http://yoursite.com/categories/bug/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
</feed>
